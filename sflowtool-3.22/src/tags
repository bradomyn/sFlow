!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
$(ACLOCAL_M4)	Makefile	/^$(ACLOCAL_M4):  $(am__aclocal_m4_deps)$/;"	t
$(am__aclocal_m4_deps)	Makefile	/^$(am__aclocal_m4_deps):$/;"	t
$(srcdir)/Makefile.in	Makefile	/^$(srcdir)\/Makefile.in:  $(srcdir)\/Makefile.am  $(am__configure_deps)$/;"	t
$(top_builddir)/config.status	Makefile	/^$(top_builddir)\/config.status: $(top_srcdir)\/configure $(CONFIG_STATUS_DEPENDENCIES)$/;"	t
$(top_srcdir)/configure	Makefile	/^$(top_srcdir)\/configure:  $(am__configure_deps)$/;"	t
.MAKE	Makefile	/^.MAKE: install-am install-strip$/;"	t
.NOEXPORT	Makefile	/^.NOEXPORT:$/;"	t
.PHONY	Makefile	/^.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \\$/;"	t
.PRECIOUS	Makefile	/^.PRECIOUS: Makefile$/;"	t
.SUFFIXES	Makefile	/^.SUFFIXES: .c .o .obj$/;"	t
.SUFFIXES	Makefile	/^.SUFFIXES:$/;"	t
.c.o	Makefile	/^.c.o:$/;"	t
.c.obj	Makefile	/^.c.obj:$/;"	t
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/home\/bradomyn\/projects\/sFlow\/sflowtool-3.22\/missing --run aclocal-1.11$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
AMTAR	Makefile	/^AMTAR = ${SHELL} \/home\/bradomyn\/projects\/sFlow\/sflowtool-3.22\/missing --run tar$/;"	m
APP_STATUS_ENUMRANGE	sflow.h	/^  APP_STATUS_ENUMRANGE$/;"	e	enum:__anon10
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/home\/bradomyn\/projects\/sFlow\/sflowtool-3.22\/missing --run autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/home\/bradomyn\/projects\/sFlow\/sflowtool-3.22\/missing --run autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/home\/bradomyn\/projects\/sFlow\/sflowtool-3.22\/missing --run automake-1.11$/;"	m
AWK	Makefile	/^AWK = gawk$/;"	m
CC	Makefile	/^CC = gcc$/;"	m
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	Makefile	/^CCLD = $(CC)$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -O2$/;"	m
COMPILE	Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
COUNTERSSAMPLE	sflowtool.h	/^   COUNTERSSAMPLE = 2$/;"	e	enum:INMSample_types
CPP	Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS = $/;"	m
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CTAGS	Makefile	/^CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \\$/;"	t
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
DEFAULT_INCLUDES	Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)$/;"	m
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(srcdir)\/Makefile.in$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES = $(sflowtool_SOURCES)$/;"	m
DLT_EN10MB	sflowtool.c	1079;"	d	file:
DLT_EN10MB	sflowtool.c	1120;"	d	file:
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
EGREP	Makefile	/^EGREP = \/bin\/grep -E$/;"	m
ENC_KEY_BYTES	sflowtool.c	2222;"	d	file:
ETAGS	Makefile	/^ETAGS = etags$/;"	m
EXEEXT	Makefile	/^EXEEXT = $/;"	m
EnumSFLAPPStatus	sflow.h	/^} EnumSFLAPPStatus;$/;"	t	typeref:enum:__anon10
EnumSFLFormat	sflowtool.c	/^typedef enum { SFLFMT_FULL=0, SFLFMT_PCAP, SFLFMT_LINE, SFLFMT_NETFLOW, SFLFMT_FWD, SFLFMT_CLF } EnumSFLFormat;$/;"	t	typeref:enum:__anon15	file:
FILTER_MAX_VLAN	sflowtool.c	195;"	d	file:
FLOWSAMPLE	sflowtool.h	/^   FLOWSAMPLE  = 1,$/;"	e	enum:INMSample_types
GREP	Makefile	/^GREP = \/bin\/grep$/;"	m
GTAGS	Makefile	/^GTAGS:$/;"	t
ID	Makefile	/^ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)$/;"	t
IEEE80211_A	sflow.h	/^  IEEE80211_A=1,$/;"	e	enum:__anon6
IEEE80211_B	sflow.h	/^  IEEE80211_B=2,$/;"	e	enum:__anon6
IEEE80211_G	sflow.h	/^  IEEE80211_G=3,$/;"	e	enum:__anon6
IEEE80211_N	sflow.h	/^  IEEE80211_N=4,$/;"	e	enum:__anon6
INMADDRESSTYPE_IP_V4	sflowtool.h	/^  INMADDRESSTYPE_IP_V4 = 1,$/;"	e	enum:INMAddress_type
INMADDRESSTYPE_IP_V6	sflowtool.h	/^  INMADDRESSTYPE_IP_V6 = 2$/;"	e	enum:INMAddress_type
INMAddress	sflowtool.h	/^} INMAddress;$/;"	t	typeref:struct:_INMAddress
INMAddress_type	sflowtool.h	/^enum INMAddress_type {$/;"	g
INMAddress_value	sflowtool.h	/^} INMAddress_value;$/;"	t	typeref:union:_INMAddress_value
INMCOUNTERSVERSION_ETHERNET	sflowtool.h	/^  INMCOUNTERSVERSION_ETHERNET     = 2,$/;"	e	enum:INMCounters_version
INMCOUNTERSVERSION_FDDI	sflowtool.h	/^  INMCOUNTERSVERSION_FDDI         = 4,$/;"	e	enum:INMCounters_version
INMCOUNTERSVERSION_GENERIC	sflowtool.h	/^  INMCOUNTERSVERSION_GENERIC      = 1,$/;"	e	enum:INMCounters_version
INMCOUNTERSVERSION_TOKENRING	sflowtool.h	/^  INMCOUNTERSVERSION_TOKENRING    = 3,$/;"	e	enum:INMCounters_version
INMCOUNTERSVERSION_VG	sflowtool.h	/^  INMCOUNTERSVERSION_VG           = 5,$/;"	e	enum:INMCounters_version
INMCOUNTERSVERSION_VLAN	sflowtool.h	/^  INMCOUNTERSVERSION_VLAN         = 7$/;"	e	enum:INMCounters_version
INMCOUNTERSVERSION_WAN	sflowtool.h	/^  INMCOUNTERSVERSION_WAN          = 6,$/;"	e	enum:INMCounters_version
INMCounters_sample	sflowtool.h	/^} INMCounters_sample;$/;"	t	typeref:struct:_INMCounters_sample
INMCounters_sample_hdr	sflowtool.h	/^} INMCounters_sample_hdr;$/;"	t	typeref:struct:_INMCounters_sample_hdr
INMCounters_type	sflowtool.h	/^} INMCounters_type;$/;"	t	typeref:union:_INMCounters_type
INMCounters_version	sflowtool.h	/^enum INMCounters_version {$/;"	g
INMDATAGRAM_VERSION2	sflowtool.h	/^  INMDATAGRAM_VERSION2 = 2,$/;"	e	enum:INMDatagram_version
INMDATAGRAM_VERSION4	sflowtool.h	/^  INMDATAGRAM_VERSION4 = 4$/;"	e	enum:INMDatagram_version
INMDatagram_version	sflowtool.h	/^enum INMDatagram_version {$/;"	g
INMEXTENDED_AS_SEQUENCE	sflowtool.h	/^  INMEXTENDED_AS_SEQUENCE = 2  \/* Ordered sequence of ASs *\/$/;"	e	enum:INMExtended_as_path_segment_type
INMEXTENDED_AS_SET	sflowtool.h	/^  INMEXTENDED_AS_SET = 1,      \/* Unordered set of ASs *\/$/;"	e	enum:INMExtended_as_path_segment_type
INMEXTENDED_GATEWAY	sflowtool.h	/^  INMEXTENDED_GATEWAY   = 3,      \/* Extended gateway router information *\/$/;"	e	enum:INMExtended_information_type
INMEXTENDED_ROUTER	sflowtool.h	/^  INMEXTENDED_ROUTER    = 2,      \/* Extended router information *\/$/;"	e	enum:INMExtended_information_type
INMEXTENDED_SWITCH	sflowtool.h	/^  INMEXTENDED_SWITCH    = 1,      \/* Extended switch information *\/$/;"	e	enum:INMExtended_information_type
INMEXTENDED_URL	sflowtool.h	/^  INMEXTENDED_URL       = 5       \/* Extended URL information *\/$/;"	e	enum:INMExtended_information_type
INMEXTENDED_URL_DST	sflowtool.h	/^  INMEXTENDED_URL_DST = 2  \/* URL is associated with destination address *\/$/;"	e	enum:INMExtended_url_direction
INMEXTENDED_URL_SRC	sflowtool.h	/^  INMEXTENDED_URL_SRC = 1, \/* URL is associated with source address *\/$/;"	e	enum:INMExtended_url_direction
INMEXTENDED_USER	sflowtool.h	/^  INMEXTENDED_USER      = 4,      \/* Extended TACAS\/RADIUS user information *\/$/;"	e	enum:INMExtended_information_type
INMEthernet_counters	sflowtool.h	/^} INMEthernet_counters;$/;"	t	typeref:struct:_INMEthernet_counters
INMEthernet_specific_counters	sflowtool.h	/^} INMEthernet_specific_counters;$/;"	t	typeref:struct:_INMEthernet_specific_counters
INMExtended_as_path_segment	sflowtool.h	/^} INMExtended_as_path_segment;$/;"	t	typeref:struct:_INMExtended_as_path_segment
INMExtended_as_path_segment_type	sflowtool.h	/^enum INMExtended_as_path_segment_type {$/;"	g
INMExtended_gateway_v2	sflowtool.h	/^} INMExtended_gateway_v2;$/;"	t	typeref:struct:_INMExtended_gateway_v2
INMExtended_gateway_v4	sflowtool.h	/^} INMExtended_gateway_v4;$/;"	t	typeref:struct:_INMExtended_gateway_v4
INMExtended_information_type	sflowtool.h	/^enum INMExtended_information_type {$/;"	g
INMExtended_router	sflowtool.h	/^} INMExtended_router;$/;"	t	typeref:struct:_INMExtended_router
INMExtended_switch	sflowtool.h	/^} INMExtended_switch;$/;"	t	typeref:struct:_INMExtended_switch
INMExtended_url	sflowtool.h	/^} INMExtended_url;$/;"	t	typeref:struct:_INMExtended_url
INMExtended_url_direction	sflowtool.h	/^enum INMExtended_url_direction {$/;"	g
INMExtended_user	sflowtool.h	/^} INMExtended_user;$/;"	t	typeref:struct:_INMExtended_user
INMFddi_counters	sflowtool.h	/^} INMFddi_counters;$/;"	t	typeref:struct:_INMFddi_counters
INMFlow_sample	sflowtool.h	/^} INMFlow_sample;$/;"	t	typeref:struct:_INMFlow_sample
INMHEADER_AAL5	sflowtool.h	/^  INMHEADER_AAL5                 = 9,$/;"	e	enum:INMHeader_protocol
INMHEADER_AAL5_IP	sflowtool.h	/^  INMHEADER_AAL5_IP              = 10, \/* e.g. Cisco AAL5 mux *\/$/;"	e	enum:INMHeader_protocol
INMHEADER_ETHERNET_ISO8023	sflowtool.h	/^  INMHEADER_ETHERNET_ISO8023     = 1,$/;"	e	enum:INMHeader_protocol
INMHEADER_FDDI	sflowtool.h	/^  INMHEADER_FDDI                 = 4,$/;"	e	enum:INMHeader_protocol
INMHEADER_FRAME_RELAY	sflowtool.h	/^  INMHEADER_FRAME_RELAY          = 5,$/;"	e	enum:INMHeader_protocol
INMHEADER_IPv4	sflowtool.h	/^  INMHEADER_IPv4                 = 11,$/;"	e	enum:INMHeader_protocol
INMHEADER_IPv6	sflowtool.h	/^  INMHEADER_IPv6                 = 12$/;"	e	enum:INMHeader_protocol
INMHEADER_ISO88024_TOKENBUS	sflowtool.h	/^  INMHEADER_ISO88024_TOKENBUS    = 2,$/;"	e	enum:INMHeader_protocol
INMHEADER_ISO88025_TOKENRING	sflowtool.h	/^  INMHEADER_ISO88025_TOKENRING   = 3,$/;"	e	enum:INMHeader_protocol
INMHEADER_PPP	sflowtool.h	/^  INMHEADER_PPP                  = 7,$/;"	e	enum:INMHeader_protocol
INMHEADER_SMDS	sflowtool.h	/^  INMHEADER_SMDS                 = 8,$/;"	e	enum:INMHeader_protocol
INMHEADER_X25	sflowtool.h	/^  INMHEADER_X25                  = 6,$/;"	e	enum:INMHeader_protocol
INMHeader_protocol	sflowtool.h	/^enum INMHeader_protocol {$/;"	g
INMIf_counters	sflowtool.h	/^} INMIf_counters;$/;"	t	typeref:struct:_INMIf_counters
INMPACKETTYPE_HEADER	sflowtool.h	/^  INMPACKETTYPE_HEADER  = 1,      \/* Packet headers are sampled *\/$/;"	e	enum:INMPacket_information_type
INMPACKETTYPE_IPV4	sflowtool.h	/^  INMPACKETTYPE_IPV4    = 2,      \/* IP version 4 data *\/$/;"	e	enum:INMPacket_information_type
INMPACKETTYPE_IPV6	sflowtool.h	/^  INMPACKETTYPE_IPV6    = 3       \/* IP version 4 data *\/$/;"	e	enum:INMPacket_information_type
INMPacket_data_type	sflowtool.h	/^} INMPacket_data_type;$/;"	t	typeref:union:_INMPacket_data_type
INMPacket_information_type	sflowtool.h	/^enum INMPacket_information_type {$/;"	g
INMSample_datagram_hdr	sflowtool.h	/^} INMSample_datagram_hdr;$/;"	t	typeref:struct:_INMSample_datagram_hdr
INMSample_type	sflowtool.h	/^} INMSample_type;$/;"	t	typeref:union:_INMSample_type
INMSample_types	sflowtool.h	/^enum INMSample_types {$/;"	g
INMSampled_header	sflowtool.h	/^} INMSampled_header;$/;"	t	typeref:struct:_INMSampled_header
INMSampled_ipv4	sflowtool.h	/^} INMSampled_ipv4;$/;"	t	typeref:struct:_INMSampled_ipv4
INMSampled_ipv6	sflowtool.h	/^} INMSampled_ipv6;$/;"	t	typeref:struct:_INMSampled_ipv6
INMTokenring_counters	sflowtool.h	/^} INMTokenring_counters;$/;"	t	typeref:struct:_INMTokenring_counters
INMTokenring_specific_counters	sflowtool.h	/^} INMTokenring_specific_counters;$/;"	t	typeref:struct:_INMTokenring_specific_counters
INMVg_counters	sflowtool.h	/^} INMVg_counters;$/;"	t	typeref:struct:_INMVg_counters
INMVg_specific_counters	sflowtool.h	/^} INMVg_specific_counters;$/;"	t	typeref:struct:_INMVg_specific_counters
INMVlan_counters	sflowtool.h	/^} INMVlan_counters;$/;"	t	typeref:struct:_INMVlan_counters
INMWan_counters	sflowtool.h	/^} INMWan_counters;$/;"	t	typeref:struct:_INMWan_counters
INM_DATA_PAD	sflowtool.h	430;"	d
INM_DEFAULT_COLLECTOR_PORT	sflowtool.h	30;"	d
INM_DEFAULT_DATAGRAM_SIZE	sflowtool.h	428;"	d
INM_DEFAULT_HEADER_SIZE	sflowtool.h	29;"	d
INM_DEFAULT_SAMPLING_RATE	sflowtool.h	31;"	d
INM_MAX_DATAGRAM_SIZE	sflowtool.h	426;"	d
INM_MAX_HEADER_SIZE	sflowtool.h	28;"	d
INM_MIN_DATAGRAM_SIZE	sflowtool.h	427;"	d
INSTALL	Makefile	/^INSTALL = \/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
IPX_HDR_LEN	sflowtool.c	722;"	d	file:
IPX_MAX_DATA	sflowtool.c	723;"	d	file:
IP_to_a	sflowtool.c	/^char *IP_to_a(uint32_t ipaddr, char *buf)$/;"	f	signature:(uint32_t ipaddr, char *buf)
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBS	Makefile	/^LIBS = $/;"	m
LINK	Makefile	/^LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@$/;"	m
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/home\/bradomyn\/projects\/sFlow\/sflowtool-3.22\/missing --run makeinfo$/;"	m
MAX_HOSTANDPORT_LEN	sflowtool.c	3721;"	d	file:
MAX_PKT_SIZ	sflowtool.c	3556;"	d	file:
MEMCACHE_CMD_ADD	sflow.h	/^  MEMCACHE_CMD_ADD      = 2,$/;"	e	enum:__anon8
MEMCACHE_CMD_APPEND	sflow.h	/^  MEMCACHE_CMD_APPEND   = 4,$/;"	e	enum:__anon8
MEMCACHE_CMD_CAS	sflow.h	/^  MEMCACHE_CMD_CAS      = 6,$/;"	e	enum:__anon8
MEMCACHE_CMD_GET	sflow.h	/^  MEMCACHE_CMD_GET      = 7,$/;"	e	enum:__anon8
MEMCACHE_CMD_GETS	sflow.h	/^  MEMCACHE_CMD_GETS     = 8,$/;"	e	enum:__anon8
MEMCACHE_CMD_OTHER	sflow.h	/^  MEMCACHE_CMD_OTHER    = 0,$/;"	e	enum:__anon8
MEMCACHE_CMD_PREPEND	sflow.h	/^  MEMCACHE_CMD_PREPEND  = 5,$/;"	e	enum:__anon8
MEMCACHE_CMD_REPLACE	sflow.h	/^  MEMCACHE_CMD_REPLACE  = 3,$/;"	e	enum:__anon8
MEMCACHE_CMD_SET	sflow.h	/^  MEMCACHE_CMD_SET      = 1,$/;"	e	enum:__anon8
MEMCACHE_OP_CLIENT_ERROR	sflow.h	/^  MEMCACHE_OP_CLIENT_ERROR = 3,$/;"	e	enum:SFLMemcache_operation_status
MEMCACHE_OP_DELETED	sflow.h	/^  MEMCACHE_OP_DELETED      = 9,$/;"	e	enum:SFLMemcache_operation_status
MEMCACHE_OP_ERROR	sflow.h	/^  MEMCACHE_OP_ERROR        = 2,$/;"	e	enum:SFLMemcache_operation_status
MEMCACHE_OP_EXISTS	sflow.h	/^  MEMCACHE_OP_EXISTS       = 7,$/;"	e	enum:SFLMemcache_operation_status
MEMCACHE_OP_NOT_FOUND	sflow.h	/^  MEMCACHE_OP_NOT_FOUND    = 8,$/;"	e	enum:SFLMemcache_operation_status
MEMCACHE_OP_NOT_STORED	sflow.h	/^  MEMCACHE_OP_NOT_STORED   = 6,$/;"	e	enum:SFLMemcache_operation_status
MEMCACHE_OP_OK	sflow.h	/^  MEMCACHE_OP_OK           = 1,$/;"	e	enum:SFLMemcache_operation_status
MEMCACHE_OP_SERVER_ERROR	sflow.h	/^  MEMCACHE_OP_SERVER_ERROR = 4,$/;"	e	enum:SFLMemcache_operation_status
MEMCACHE_OP_STORED	sflow.h	/^  MEMCACHE_OP_STORED       = 5,$/;"	e	enum:SFLMemcache_operation_status
MEMCACHE_OP_UNKNOWN	sflow.h	/^  MEMCACHE_OP_UNKNOWN      = 0,$/;"	e	enum:SFLMemcache_operation_status
MEMCACHE_PROT_ASCII	sflow.h	/^  MEMCACHE_PROT_ASCII   = 1,$/;"	e	enum:__anon7
MEMCACHE_PROT_BINARY	sflow.h	/^  MEMCACHE_PROT_BINARY  = 2,$/;"	e	enum:__anon7
MEMCACHE_PROT_OTHER	sflow.h	/^  MEMCACHE_PROT_OTHER   = 0,$/;"	e	enum:__anon7
MKDIR_P	Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
Makefile	Makefile	/^Makefile: $(srcdir)\/Makefile.in $(top_builddir)\/config.status$/;"	t
MyByteSwap16	sflowtool.c	/^static uint16_t MyByteSwap16(uint16_t n) {$/;"	f	file:	signature:(uint16_t n)
MyByteSwap32	sflowtool.c	/^static uint32_t MyByteSwap32(uint32_t n) {$/;"	f	file:	signature:(uint32_t n)
NFFlow5	sflowtool.c	/^} NFFlow5;$/;"	t	typeref:struct:_NFFlow5	file:
NFFlowHdr5	sflowtool.c	/^} NFFlowHdr5;$/;"	t	typeref:struct:_NFFlowHdr5	file:
NFFlowPkt5	sflowtool.c	/^} NFFlowPkt5;$/;"	t	typeref:struct:_NFFlowPkt5	file:
NFFlowSequenceNo	sflowtool.c	/^static int NFFlowSequenceNo = 0;$/;"	v	file:
NFT_8022_SIZ	sflowtool.c	671;"	d	file:
NFT_ETHHDR_SIZ	sflowtool.c	670;"	d	file:
NFT_MAX_8023_LEN	sflowtool.c	672;"	d	file:
NFT_MIN_SIZ	sflowtool.c	674;"	d	file:
NO	sflowtool.c	73;"	d	file:
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
PACKAGE	Makefile	/^PACKAGE = sflowtool$/;"	m
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = $/;"	m
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = $/;"	m
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = $/;"	m
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = $/;"	m
PACKAGE_URL	Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = $/;"	m
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
PCAP_VERSION_MAJOR	sflowtool.c	1080;"	d	file:
PCAP_VERSION_MAJOR	sflowtool.c	1121;"	d	file:
PCAP_VERSION_MINOR	sflowtool.c	1081;"	d	file:
PCAP_VERSION_MINOR	sflowtool.c	1122;"	d	file:
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PRIu64	sflowtool.c	66;"	d	file:
PRIu64	sflowtool.c	68;"	d	file:
PROGRAMS	Makefile	/^PROGRAMS = $(bin_PROGRAMS)$/;"	m
SASAMPLE_EXTENDED_DATA_GATEWAY	sflowtool.c	303;"	d	file:
SASAMPLE_EXTENDED_DATA_MPLS	sflowtool.c	306;"	d	file:
SASAMPLE_EXTENDED_DATA_MPLS_FTN	sflowtool.c	310;"	d	file:
SASAMPLE_EXTENDED_DATA_MPLS_LDP_FEC	sflowtool.c	311;"	d	file:
SASAMPLE_EXTENDED_DATA_MPLS_TUNNEL	sflowtool.c	308;"	d	file:
SASAMPLE_EXTENDED_DATA_MPLS_VC	sflowtool.c	309;"	d	file:
SASAMPLE_EXTENDED_DATA_NAT	sflowtool.c	307;"	d	file:
SASAMPLE_EXTENDED_DATA_ROUTER	sflowtool.c	302;"	d	file:
SASAMPLE_EXTENDED_DATA_SWITCH	sflowtool.c	301;"	d	file:
SASAMPLE_EXTENDED_DATA_URL	sflowtool.c	305;"	d	file:
SASAMPLE_EXTENDED_DATA_USER	sflowtool.c	304;"	d	file:
SASAMPLE_EXTENDED_DATA_VLAN_TUNNEL	sflowtool.c	312;"	d	file:
SA_MAX_EXTENDED_HOST_LEN	sflowtool.c	347;"	d	file:
SA_MAX_EXTENDED_URL_LEN	sflowtool.c	346;"	d	file:
SA_MAX_EXTENDED_USER_LEN	sflowtool.c	337;"	d	file:
SA_MAX_FTN_LEN	sflowtool.c	1865;"	d	file:
SA_MAX_TUNNELNAME_LEN	sflowtool.c	1826;"	d	file:
SA_MAX_VCNAME_LEN	sflowtool.c	1846;"	d	file:
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SFABORT	sflowtool.c	369;"	d	file:
SFABORT	sflowtool.c	371;"	d	file:
SFCommonLogFormat	sflowtool.c	/^} SFCommonLogFormat;$/;"	t	typeref:struct:_SFCommonLogFormat	file:
SFConfig	sflowtool.c	/^} SFConfig;$/;"	t	typeref:struct:_SFConfig	file:
SFForwardingTarget	sflowtool.c	/^} SFForwardingTarget;$/;"	t	typeref:struct:_SFForwardingTarget	file:
SFHTTP_CONNECT	sflow.h	/^  SFHTTP_CONNECT  = 8,$/;"	e	enum:__anon9
SFHTTP_DELETE	sflow.h	/^  SFHTTP_DELETE   = 6,$/;"	e	enum:__anon9
SFHTTP_GET	sflow.h	/^  SFHTTP_GET      = 2,$/;"	e	enum:__anon9
SFHTTP_HEAD	sflow.h	/^  SFHTTP_HEAD     = 3,$/;"	e	enum:__anon9
SFHTTP_OPTIONS	sflow.h	/^  SFHTTP_OPTIONS  = 1,$/;"	e	enum:__anon9
SFHTTP_OTHER	sflow.h	/^  SFHTTP_OTHER    = 0,$/;"	e	enum:__anon9
SFHTTP_POST	sflow.h	/^  SFHTTP_POST     = 4,$/;"	e	enum:__anon9
SFHTTP_PUT	sflow.h	/^  SFHTTP_PUT      = 5,$/;"	e	enum:__anon9
SFHTTP_TRACE	sflow.h	/^  SFHTTP_TRACE    = 7,$/;"	e	enum:__anon9
SFHTTP_method_names	sflowtool.c	/^static const char *SFHTTP_method_names[] = { "-", "OPTIONS", "GET", "HEAD", "POST", "PUT", "DELETE", "TRACE", "CONNECT" };$/;"	v	file:
SFLADDRESSTYPE_IP_V4	sflow.h	/^  SFLADDRESSTYPE_IP_V4 = 1,$/;"	e	enum:SFLAddress_type
SFLADDRESSTYPE_IP_V6	sflow.h	/^  SFLADDRESSTYPE_IP_V6 = 2$/;"	e	enum:SFLAddress_type
SFLADDRESSTYPE_UNDEFINED	sflow.h	/^  SFLADDRESSTYPE_UNDEFINED = 0,$/;"	e	enum:SFLAddress_type
SFLADD_ELEMENT	sflow.h	1234;"	d
SFLAPPResource_counters	sflow.h	/^} SFLAPPResource_counters;$/;"	t	typeref:struct:__anon14
SFLAPP_BAD_REQUEST	sflow.h	/^  SFLAPP_BAD_REQUEST     = 4,$/;"	e	enum:__anon10
SFLAPP_FORBIDDEN	sflow.h	/^  SFLAPP_FORBIDDEN       = 5,$/;"	e	enum:__anon10
SFLAPP_INTERNAL_ERROR	sflow.h	/^  SFLAPP_INTERNAL_ERROR  = 3,$/;"	e	enum:__anon10
SFLAPP_MAX_ACTOR_LEN	sflow.h	541;"	d
SFLAPP_MAX_APPLICATION_LEN	sflow.h	520;"	d
SFLAPP_MAX_ATTRIBUTES_LEN	sflow.h	522;"	d
SFLAPP_MAX_OPERATION_LEN	sflow.h	521;"	d
SFLAPP_MAX_STATUS_LEN	sflow.h	535;"	d
SFLAPP_NOT_FOUND	sflow.h	/^  SFLAPP_NOT_FOUND       = 8,$/;"	e	enum:__anon10
SFLAPP_NOT_IMPLEMENTED	sflow.h	/^  SFLAPP_NOT_IMPLEMENTED = 7,$/;"	e	enum:__anon10
SFLAPP_OTHER	sflow.h	/^  SFLAPP_OTHER           = 1,$/;"	e	enum:__anon10
SFLAPP_SUCCESS	sflow.h	/^  SFLAPP_SUCCESS         = 0,$/;"	e	enum:__anon10
SFLAPP_TIMEOUT	sflow.h	/^  SFLAPP_TIMEOUT         = 2,$/;"	e	enum:__anon10
SFLAPP_TOO_LARGE	sflow.h	/^  SFLAPP_TOO_LARGE       = 6,$/;"	e	enum:__anon10
SFLAPP_UNAUTHORIZED	sflow.h	/^  SFLAPP_UNAUTHORIZED    = 10,$/;"	e	enum:__anon10
SFLAPP_UNAVAILABLE	sflow.h	/^  SFLAPP_UNAVAILABLE     = 9,$/;"	e	enum:__anon10
SFLAPP_counters	sflow.h	/^} SFLAPP_counters;$/;"	t	typeref:struct:_SFLAPP_counters
SFLAdaptor	sflow.h	/^} SFLAdaptor;$/;"	t	typeref:struct:_SFLAdaptor
SFLAdaptorList	sflow.h	/^} SFLAdaptorList;$/;"	t	typeref:struct:_SFLAdaptorList
SFLAddress	sflow.h	/^} SFLAddress;$/;"	t	typeref:struct:_SFLAddress
SFLAddress_type	sflow.h	/^enum SFLAddress_type {$/;"	g
SFLAddress_value	sflow.h	/^} SFLAddress_value;$/;"	t	typeref:union:_SFLAddress_value
SFLCOUNTERS_80211	sflow.h	/^  SFLCOUNTERS_80211        = 6,$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_ADAPTORS	sflow.h	/^  SFLCOUNTERS_ADAPTORS     = 2001, \/* host adaptors *\/$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_APP	sflow.h	/^  SFLCOUNTERS_APP          =  2202,$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_APP_RESOURCE	sflow.h	/^  SFLCOUNTERS_APP_RESOURCE =  2203,$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_ETHERNET	sflow.h	/^  SFLCOUNTERS_ETHERNET     = 2,$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_GENERIC	sflow.h	/^  SFLCOUNTERS_GENERIC      = 1,$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_HOST_CPU	sflow.h	/^  SFLCOUNTERS_HOST_CPU     = 2003, \/* host cpu  *\/$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_HOST_DSK	sflow.h	/^  SFLCOUNTERS_HOST_DSK     = 2005, \/* host storage I\/O  *\/$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_HOST_HID	sflow.h	/^  SFLCOUNTERS_HOST_HID     = 2000, \/* host id *\/$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_HOST_MEM	sflow.h	/^  SFLCOUNTERS_HOST_MEM     = 2004, \/* host memory  *\/$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_HOST_NIO	sflow.h	/^  SFLCOUNTERS_HOST_NIO     = 2006, \/* host network I\/O *\/$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_HOST_PAR	sflow.h	/^  SFLCOUNTERS_HOST_PAR     = 2002, \/* host parent *\/$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_HOST_VRT_CPU	sflow.h	/^  SFLCOUNTERS_HOST_VRT_CPU  = 2101, \/* host virt cpu *\/$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_HOST_VRT_DSK	sflow.h	/^  SFLCOUNTERS_HOST_VRT_DSK  = 2103, \/* host virt storage *\/$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_HOST_VRT_MEM	sflow.h	/^  SFLCOUNTERS_HOST_VRT_MEM  = 2102, \/* host virt mem *\/$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_HOST_VRT_NIO	sflow.h	/^  SFLCOUNTERS_HOST_VRT_NIO  = 2104, \/* host virt network I\/O *\/$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_HOST_VRT_NODE	sflow.h	/^  SFLCOUNTERS_HOST_VRT_NODE = 2100, \/* host virt node *\/$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_HTTP	sflow.h	/^  SFLCOUNTERS_HTTP          = 2201, \/* http *\/$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_JMX	sflow.h	/^  SFLCOUNTERS_JMX           = 2106, \/* java JMX stats *\/$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_JVM	sflow.h	/^  SFLCOUNTERS_JVM           = 2105, \/* java runtime *\/$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_MEMCACHE	sflow.h	/^  SFLCOUNTERS_MEMCACHE      = 2200, \/* memcached *\/$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_PROCESSOR	sflow.h	/^  SFLCOUNTERS_PROCESSOR    = 1001,$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_RADIO	sflow.h	/^  SFLCOUNTERS_RADIO        = 1002,$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_SAMPLE	sflow.h	/^  SFLCOUNTERS_SAMPLE = 2,          \/* enterprise = 0 : format = 2 *\/$/;"	e	enum:SFL_sample_tag
SFLCOUNTERS_SAMPLE_EXPANDED	sflow.h	/^  SFLCOUNTERS_SAMPLE_EXPANDED = 4  \/* enterprise = 0 : format = 4 *\/$/;"	e	enum:SFL_sample_tag
SFLCOUNTERS_TOKENRING	sflow.h	/^  SFLCOUNTERS_TOKENRING    = 3,$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_VG	sflow.h	/^  SFLCOUNTERS_VG           = 4,$/;"	e	enum:SFLCounters_type_tag
SFLCOUNTERS_VLAN	sflow.h	/^  SFLCOUNTERS_VLAN         = 5,$/;"	e	enum:SFLCounters_type_tag
SFLCipherSuite	sflow.h	/^typedef uint32_t SFLCipherSuite;$/;"	t
SFLCounters_sample	sflow.h	/^} SFLCounters_sample;$/;"	t	typeref:struct:_SFLCounters_sample
SFLCounters_sample_element	sflow.h	/^} SFLCounters_sample_element;$/;"	t	typeref:struct:_SFLCounters_sample_element
SFLCounters_sample_expanded	sflow.h	/^} SFLCounters_sample_expanded;$/;"	t	typeref:struct:_SFLCounters_sample_expanded
SFLCounters_type	sflow.h	/^} SFLCounters_type;$/;"	t	typeref:union:_SFLCounters_type
SFLCounters_type_tag	sflow.h	/^enum SFLCounters_type_tag {$/;"	g
SFLDATAGRAM_VERSION2	sflow.h	/^  SFLDATAGRAM_VERSION2 = 2,$/;"	e	enum:SFLDatagram_version
SFLDATAGRAM_VERSION4	sflow.h	/^  SFLDATAGRAM_VERSION4 = 4,$/;"	e	enum:SFLDatagram_version
SFLDATAGRAM_VERSION5	sflow.h	/^  SFLDATAGRAM_VERSION5 = 5$/;"	e	enum:SFLDatagram_version
SFLDatagram_version	sflow.h	/^enum SFLDatagram_version {$/;"	g
SFLEXTENDED_AS_SEQUENCE	sflow.h	/^  SFLEXTENDED_AS_SEQUENCE = 2  \/* Ordered sequence of ASs *\/$/;"	e	enum:SFLExtended_as_path_segment_type
SFLEXTENDED_AS_SET	sflow.h	/^  SFLEXTENDED_AS_SET = 1,      \/* Unordered set of ASs *\/$/;"	e	enum:SFLExtended_as_path_segment_type
SFLEXTENDED_URL_DST	sflow.h	/^  SFLEXTENDED_URL_DST = 2  \/* URL is associated with destination address *\/$/;"	e	enum:SFLExtended_url_direction
SFLEXTENDED_URL_SRC	sflow.h	/^  SFLEXTENDED_URL_SRC = 1, \/* URL is associated with source address *\/$/;"	e	enum:SFLExtended_url_direction
SFLEthernet_counters	sflow.h	/^} SFLEthernet_counters;$/;"	t	typeref:struct:_SFLEthernet_counters
SFLExtended_aggregation	sflow.h	/^} SFLExtended_aggregation;$/;"	t	typeref:struct:_SFLExtended_aggregation
SFLExtended_as_path_segment	sflow.h	/^} SFLExtended_as_path_segment;$/;"	t	typeref:struct:_SFLExtended_as_path_segment
SFLExtended_as_path_segment_type	sflow.h	/^enum SFLExtended_as_path_segment_type {$/;"	g
SFLExtended_gateway	sflow.h	/^} SFLExtended_gateway;$/;"	t	typeref:struct:_SFLExtended_gateway
SFLExtended_mpls	sflow.h	/^} SFLExtended_mpls;$/;"	t	typeref:struct:_SFLExtended_mpls
SFLExtended_mpls_FTN	sflow.h	/^} SFLExtended_mpls_FTN;$/;"	t	typeref:struct:_SFLExtended_mpls_FTN
SFLExtended_mpls_LDP_FEC	sflow.h	/^} SFLExtended_mpls_LDP_FEC;$/;"	t	typeref:struct:_SFLExtended_mpls_LDP_FEC
SFLExtended_mpls_tunnel	sflow.h	/^} SFLExtended_mpls_tunnel;$/;"	t	typeref:struct:_SFLExtended_mpls_tunnel
SFLExtended_mpls_vc	sflow.h	/^} SFLExtended_mpls_vc;$/;"	t	typeref:struct:_SFLExtended_mpls_vc
SFLExtended_nat	sflow.h	/^} SFLExtended_nat;$/;"	t	typeref:struct:_SFLExtended_nat
SFLExtended_router	sflow.h	/^} SFLExtended_router;$/;"	t	typeref:struct:_SFLExtended_router
SFLExtended_socket_ipv4	sflow.h	/^} SFLExtended_socket_ipv4;$/;"	t	typeref:struct:_SFLExtended_socket_ipv4
SFLExtended_socket_ipv6	sflow.h	/^} SFLExtended_socket_ipv6;$/;"	t	typeref:struct:_SFLExtended_socket_ipv6
SFLExtended_switch	sflow.h	/^} SFLExtended_switch;$/;"	t	typeref:struct:_SFLExtended_switch
SFLExtended_url	sflow.h	/^} SFLExtended_url;$/;"	t	typeref:struct:_SFLExtended_url
SFLExtended_url_direction	sflow.h	/^enum SFLExtended_url_direction {$/;"	g
SFLExtended_user	sflow.h	/^} SFLExtended_user;$/;"	t	typeref:struct:_SFLExtended_user
SFLExtended_vlan_tunnel	sflow.h	/^} SFLExtended_vlan_tunnel;$/;"	t	typeref:struct:_SFLExtended_vlan_tunnel
SFLExtended_wifi_payload	sflow.h	/^} SFLExtended_wifi_payload;$/;"	t	typeref:struct:_SFLExtended_wifi_payload
SFLExtended_wifi_rx	sflow.h	/^} SFLExtended_wifi_rx;$/;"	t	typeref:struct:_SFLExtended_wifi_rx
SFLExtended_wifi_tx	sflow.h	/^} SFLExtended_wifi_tx;$/;"	t	typeref:struct:_SFLExtended_wifi_tx
SFLFLOW_APP	sflow.h	/^  SFLFLOW_APP              = 2202, \/* transaction sample *\/$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_APP_ACTOR_INIT	sflow.h	/^  SFLFLOW_APP_ACTOR_INIT   = 2204, \/* initiator *\/$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_APP_ACTOR_TGT	sflow.h	/^  SFLFLOW_APP_ACTOR_TGT    = 2205, \/* target *\/$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_APP_CTXT	sflow.h	/^  SFLFLOW_APP_CTXT         = 2203, \/* enclosing server context *\/$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_ETHERNET	sflow.h	/^  SFLFLOW_ETHERNET  = 2,      \/* MAC layer information *\/$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_EX_80211_PAYLOAD	sflow.h	/^  SFLFLOW_EX_80211_PAYLOAD = 1013,$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_EX_80211_RX	sflow.h	/^  SFLFLOW_EX_80211_RX      = 1014,$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_EX_80211_TX	sflow.h	/^  SFLFLOW_EX_80211_TX      = 1015,$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_EX_AGGREGATION	sflow.h	/^  SFLFLOW_EX_AGGREGATION   = 1016,$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_EX_GATEWAY	sflow.h	/^  SFLFLOW_EX_GATEWAY   = 1003,      \/* Extended gateway router information *\/$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_EX_MPLS	sflow.h	/^  SFLFLOW_EX_MPLS      = 1006,      \/* Extended MPLS information *\/$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_EX_MPLS_FTN	sflow.h	/^  SFLFLOW_EX_MPLS_FTN      = 1010,$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_EX_MPLS_LDP_FEC	sflow.h	/^  SFLFLOW_EX_MPLS_LDP_FEC  = 1011,$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_EX_MPLS_TUNNEL	sflow.h	/^  SFLFLOW_EX_MPLS_TUNNEL   = 1008,   \/* additional MPLS information *\/$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_EX_MPLS_VC	sflow.h	/^  SFLFLOW_EX_MPLS_VC       = 1009,$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_EX_NAT	sflow.h	/^  SFLFLOW_EX_NAT       = 1007,      \/* Extended NAT information *\/$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_EX_ROUTER	sflow.h	/^  SFLFLOW_EX_ROUTER    = 1002,      \/* Extended router information *\/$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_EX_SOCKET4	sflow.h	/^  SFLFLOW_EX_SOCKET4       = 2100,$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_EX_SOCKET6	sflow.h	/^  SFLFLOW_EX_SOCKET6       = 2101,$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_EX_SWITCH	sflow.h	/^  SFLFLOW_EX_SWITCH    = 1001,      \/* Extended switch information *\/$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_EX_URL	sflow.h	/^  SFLFLOW_EX_URL       = 1005,      \/* Extended URL information *\/$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_EX_USER	sflow.h	/^  SFLFLOW_EX_USER      = 1004,      \/* Extended TACAS\/RADIUS user information *\/$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_EX_VLAN_TUNNEL	sflow.h	/^  SFLFLOW_EX_VLAN_TUNNEL   = 1012,   \/* VLAN stack *\/$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_HEADER	sflow.h	/^  SFLFLOW_HEADER    = 1,      \/* Packet headers are sampled *\/$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_HTTP	sflow.h	/^  SFLFLOW_HTTP             = 2201,$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_HTTP2	sflow.h	/^  SFLFLOW_HTTP2            = 2206,$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_IPV4	sflow.h	/^  SFLFLOW_IPV4      = 3,      \/* IP version 4 data *\/$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_IPV6	sflow.h	/^  SFLFLOW_IPV6      = 4,      \/* IP version 6 data *\/$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_MEMCACHE	sflow.h	/^  SFLFLOW_MEMCACHE         = 2200,$/;"	e	enum:SFLFlow_type_tag
SFLFLOW_SAMPLE	sflow.h	/^  SFLFLOW_SAMPLE = 1,              \/* enterprise = 0 : format = 1 *\/$/;"	e	enum:SFL_sample_tag
SFLFLOW_SAMPLE_EXPANDED	sflow.h	/^  SFLFLOW_SAMPLE_EXPANDED = 3,     \/* enterprise = 0 : format = 3 *\/$/;"	e	enum:SFL_sample_tag
SFLFMT_CLF	sflowtool.c	/^typedef enum { SFLFMT_FULL=0, SFLFMT_PCAP, SFLFMT_LINE, SFLFMT_NETFLOW, SFLFMT_FWD, SFLFMT_CLF } EnumSFLFormat;$/;"	e	enum:__anon15	file:
SFLFMT_CLF_MAX_LINE	sflowtool.c	212;"	d	file:
SFLFMT_FULL	sflowtool.c	/^typedef enum { SFLFMT_FULL=0, SFLFMT_PCAP, SFLFMT_LINE, SFLFMT_NETFLOW, SFLFMT_FWD, SFLFMT_CLF } EnumSFLFormat;$/;"	e	enum:__anon15	file:
SFLFMT_FWD	sflowtool.c	/^typedef enum { SFLFMT_FULL=0, SFLFMT_PCAP, SFLFMT_LINE, SFLFMT_NETFLOW, SFLFMT_FWD, SFLFMT_CLF } EnumSFLFormat;$/;"	e	enum:__anon15	file:
SFLFMT_LINE	sflowtool.c	/^typedef enum { SFLFMT_FULL=0, SFLFMT_PCAP, SFLFMT_LINE, SFLFMT_NETFLOW, SFLFMT_FWD, SFLFMT_CLF } EnumSFLFormat;$/;"	e	enum:__anon15	file:
SFLFMT_NETFLOW	sflowtool.c	/^typedef enum { SFLFMT_FULL=0, SFLFMT_PCAP, SFLFMT_LINE, SFLFMT_NETFLOW, SFLFMT_FWD, SFLFMT_CLF } EnumSFLFormat;$/;"	e	enum:__anon15	file:
SFLFMT_PCAP	sflowtool.c	/^typedef enum { SFLFMT_FULL=0, SFLFMT_PCAP, SFLFMT_LINE, SFLFMT_NETFLOW, SFLFMT_FWD, SFLFMT_CLF } EnumSFLFormat;$/;"	e	enum:__anon15	file:
SFLFlow_Pdu	sflow.h	/^} SFLFlow_Pdu;$/;"	t	typeref:struct:_SFLFlow_Pdu
SFLFlow_sample	sflow.h	/^} SFLFlow_sample;$/;"	t	typeref:struct:_SFLFlow_sample
SFLFlow_sample_element	sflow.h	/^} SFLFlow_sample_element;$/;"	t	typeref:struct:_SFLFlow_sample_element
SFLFlow_sample_expanded	sflow.h	/^} SFLFlow_sample_expanded;$/;"	t	typeref:struct:_SFLFlow_sample_expanded
SFLFlow_type	sflow.h	/^} SFLFlow_type;$/;"	t	typeref:union:_SFLFlow_type
SFLFlow_type_tag	sflow.h	/^enum SFLFlow_type_tag { $/;"	g
SFLHEADER_AAL5	sflow.h	/^  SFLHEADER_AAL5                 = 9,$/;"	e	enum:SFLHeader_protocol
SFLHEADER_AAL5_IP	sflow.h	/^  SFLHEADER_AAL5_IP              = 10, \/* e.g. Cisco AAL5 mux *\/$/;"	e	enum:SFLHeader_protocol
SFLHEADER_ETHERNET_ISO8023	sflow.h	/^  SFLHEADER_ETHERNET_ISO8023     = 1,$/;"	e	enum:SFLHeader_protocol
SFLHEADER_FDDI	sflow.h	/^  SFLHEADER_FDDI                 = 4,$/;"	e	enum:SFLHeader_protocol
SFLHEADER_FRAME_RELAY	sflow.h	/^  SFLHEADER_FRAME_RELAY          = 5,$/;"	e	enum:SFLHeader_protocol
SFLHEADER_IEEE80211MAC	sflow.h	/^  SFLHEADER_IEEE80211MAC         = 15,$/;"	e	enum:SFLHeader_protocol
SFLHEADER_IEEE80211_AMPDU	sflow.h	/^  SFLHEADER_IEEE80211_AMPDU      = 16,$/;"	e	enum:SFLHeader_protocol
SFLHEADER_IEEE80211_AMSDU_SUBFRAME	sflow.h	/^  SFLHEADER_IEEE80211_AMSDU_SUBFRAME = 17$/;"	e	enum:SFLHeader_protocol
SFLHEADER_IPv4	sflow.h	/^  SFLHEADER_IPv4                 = 11,$/;"	e	enum:SFLHeader_protocol
SFLHEADER_IPv6	sflow.h	/^  SFLHEADER_IPv6                 = 12,$/;"	e	enum:SFLHeader_protocol
SFLHEADER_ISO88024_TOKENBUS	sflow.h	/^  SFLHEADER_ISO88024_TOKENBUS    = 2,$/;"	e	enum:SFLHeader_protocol
SFLHEADER_ISO88025_TOKENRING	sflow.h	/^  SFLHEADER_ISO88025_TOKENRING   = 3,$/;"	e	enum:SFLHeader_protocol
SFLHEADER_MPLS	sflow.h	/^  SFLHEADER_MPLS                 = 13,$/;"	e	enum:SFLHeader_protocol
SFLHEADER_POS	sflow.h	/^  SFLHEADER_POS                  = 14,$/;"	e	enum:SFLHeader_protocol
SFLHEADER_PPP	sflow.h	/^  SFLHEADER_PPP                  = 7,$/;"	e	enum:SFLHeader_protocol
SFLHEADER_SMDS	sflow.h	/^  SFLHEADER_SMDS                 = 8,$/;"	e	enum:SFLHeader_protocol
SFLHEADER_X25	sflow.h	/^  SFLHEADER_X25                  = 6,$/;"	e	enum:SFLHeader_protocol
SFLHTTP_counters	sflow.h	/^} SFLHTTP_counters;$/;"	t	typeref:struct:_SFLHTTP_counters
SFLHTTP_method	sflow.h	/^} SFLHTTP_method;$/;"	t	typeref:enum:__anon9
SFLHeader_protocol	sflow.h	/^enum SFLHeader_protocol {$/;"	g
SFLHostId	sflow.h	/^} SFLHostId;$/;"	t	typeref:struct:_SFLHostId
SFLHost_cpu_counters	sflow.h	/^} SFLHost_cpu_counters;$/;"	t	typeref:struct:_SFLHost_cpu_counters
SFLHost_dsk_counters	sflow.h	/^} SFLHost_dsk_counters;$/;"	t	typeref:struct:_SFLHost_dsk_counters
SFLHost_mem_counters	sflow.h	/^} SFLHost_mem_counters;$/;"	t	typeref:struct:_SFLHost_mem_counters
SFLHost_nio_counters	sflow.h	/^} SFLHost_nio_counters;$/;"	t	typeref:struct:_SFLHost_nio_counters
SFLHost_parent	sflow.h	/^} SFLHost_parent;$/;"	t	typeref:struct:_SFLHost_parent
SFLHost_vrt_cpu_counters	sflow.h	/^} SFLHost_vrt_cpu_counters;$/;"	t	typeref:struct:_SFLHost_vrt_cpu_counters
SFLHost_vrt_dsk_counters	sflow.h	/^} SFLHost_vrt_dsk_counters;$/;"	t	typeref:struct:_SFLHost_vrt_dsk_counters
SFLHost_vrt_mem_counters	sflow.h	/^} SFLHost_vrt_mem_counters;$/;"	t	typeref:struct:_SFLHost_vrt_mem_counters
SFLHost_vrt_nio_counters	sflow.h	/^} SFLHost_vrt_nio_counters;$/;"	t	typeref:struct:_SFLHost_vrt_nio_counters
SFLHost_vrt_node_counters	sflow.h	/^} SFLHost_vrt_node_counters;$/;"	t	typeref:struct:_SFLHost_vrt_node_counters
SFLIPv4	sflow.h	/^} SFLIPv4;$/;"	t	typeref:struct:__anon3
SFLIPv6	sflow.h	/^} SFLIPv6;$/;"	t	typeref:struct:__anon4
SFLIf_counters	sflow.h	/^} SFLIf_counters;$/;"	t	typeref:struct:_SFLIf_counters
SFLJMX_counters	sflow.h	/^} SFLJMX_counters;$/;"	t	typeref:struct:_SFLJMX_counters
SFLJVM_ID	sflow.h	/^} SFLJVM_ID;$/;"	t	typeref:struct:_SFLJVM_ID
SFLJVM_MAX_VENDOR_LEN	sflow.h	1117;"	d
SFLJVM_MAX_VERSION_LEN	sflow.h	1118;"	d
SFLJVM_MAX_VMNAME_LEN	sflow.h	1116;"	d
SFLLabelStack	sflow.h	/^} SFLLabelStack;$/;"	t	typeref:struct:_SFLLabelStack
SFLMT_alpha	sflow.h	/^  SFLMT_alpha   = 6,$/;"	e	enum:SFLMachine_type
SFLMT_arm	sflow.h	/^  SFLMT_arm     = 10,$/;"	e	enum:SFLMachine_type
SFLMT_hppa	sflow.h	/^  SFLMT_hppa    = 11,$/;"	e	enum:SFLMachine_type
SFLMT_ia64	sflow.h	/^  SFLMT_ia64    = 4,$/;"	e	enum:SFLMachine_type
SFLMT_m68k	sflow.h	/^  SFLMT_m68k    = 8,$/;"	e	enum:SFLMachine_type
SFLMT_mips	sflow.h	/^  SFLMT_mips    = 9,$/;"	e	enum:SFLMachine_type
SFLMT_other	sflow.h	/^  SFLMT_other   = 1,$/;"	e	enum:SFLMachine_type
SFLMT_powerpc	sflow.h	/^  SFLMT_powerpc = 7,$/;"	e	enum:SFLMachine_type
SFLMT_s390	sflow.h	/^  SFLMT_s390    = 12$/;"	e	enum:SFLMachine_type
SFLMT_sparc	sflow.h	/^  SFLMT_sparc   = 5,$/;"	e	enum:SFLMachine_type
SFLMT_unknown	sflow.h	/^  SFLMT_unknown = 0,$/;"	e	enum:SFLMachine_type
SFLMT_x86	sflow.h	/^  SFLMT_x86     = 2,$/;"	e	enum:SFLMachine_type
SFLMT_x86_64	sflow.h	/^  SFLMT_x86_64  = 3,$/;"	e	enum:SFLMachine_type
SFLMacAddress	sflow.h	/^} SFLMacAddress;$/;"	t	typeref:struct:_SFLMacAddress
SFLMachine_type	sflow.h	/^enum SFLMachine_type {$/;"	g
SFLMemcache_cmd	sflow.h	/^} SFLMemcache_cmd;$/;"	t	typeref:enum:__anon8
SFLMemcache_counters	sflow.h	/^} SFLMemcache_counters;$/;"	t	typeref:struct:_SFLMemcache_counters
SFLMemcache_operation_status	sflow.h	/^enum SFLMemcache_operation_status {$/;"	g
SFLMemcache_prot	sflow.h	/^} SFLMemcache_prot;$/;"	t	typeref:enum:__anon7
SFLOS_aix	sflow.h	/^  SFLOS_aix       = 6,$/;"	e	enum:SFLOS_name
SFLOS_darwin	sflow.h	/^  SFLOS_darwin    = 4,$/;"	e	enum:SFLOS_name
SFLOS_dragonfly	sflow.h	/^  SFLOS_dragonfly = 7,$/;"	e	enum:SFLOS_name
SFLOS_freebsd	sflow.h	/^  SFLOS_freebsd   = 8,$/;"	e	enum:SFLOS_name
SFLOS_hpux	sflow.h	/^  SFLOS_hpux      = 5,$/;"	e	enum:SFLOS_name
SFLOS_linux	sflow.h	/^  SFLOS_linux     = 2,$/;"	e	enum:SFLOS_name
SFLOS_name	sflow.h	/^enum SFLOS_name {$/;"	g
SFLOS_netbsd	sflow.h	/^  SFLOS_netbsd    = 9,$/;"	e	enum:SFLOS_name
SFLOS_openbsd	sflow.h	/^  SFLOS_openbsd   = 10,$/;"	e	enum:SFLOS_name
SFLOS_osf	sflow.h	/^  SFLOS_osf       = 11,$/;"	e	enum:SFLOS_name
SFLOS_other	sflow.h	/^  SFLOS_other     = 1,$/;"	e	enum:SFLOS_name
SFLOS_solaris	sflow.h	/^  SFLOS_solaris   = 12$/;"	e	enum:SFLOS_name
SFLOS_unknown	sflow.h	/^  SFLOS_unknown   = 0,$/;"	e	enum:SFLOS_name
SFLOS_windows	sflow.h	/^  SFLOS_windows   = 3,$/;"	e	enum:SFLOS_name
SFLOWTOOL_H	sflowtool.h	5;"	d
SFLOW_H	sflow.h	9;"	d
SFLProcessor_counters	sflow.h	/^} SFLProcessor_counters;$/;"	t	typeref:struct:_SFLProcessor_counters
SFLRadio_counters	sflow.h	/^} SFLRadio_counters;$/;"	t	typeref:struct:_SFLRadio_counters
SFLSample_datagram_hdr	sflow.h	/^} SFLSample_datagram_hdr;$/;"	t	typeref:struct:_SFLSample_datagram_hdr
SFLSampled_APP	sflow.h	/^} SFLSampled_APP;$/;"	t	typeref:struct:__anon12
SFLSampled_APP_ACTOR	sflow.h	/^} SFLSampled_APP_ACTOR;$/;"	t	typeref:struct:__anon13
SFLSampled_APP_CTXT	sflow.h	/^} SFLSampled_APP_CTXT;$/;"	t	typeref:struct:__anon11
SFLSampled_ethernet	sflow.h	/^} SFLSampled_ethernet;$/;"	t	typeref:struct:_SFLSampled_ethernet
SFLSampled_header	sflow.h	/^} SFLSampled_header;$/;"	t	typeref:struct:_SFLSampled_header
SFLSampled_http	sflow.h	/^} SFLSampled_http;$/;"	t	typeref:struct:_SFLSampled_http
SFLSampled_ipv4	sflow.h	/^} SFLSampled_ipv4;$/;"	t	typeref:struct:_SFLSampled_ipv4
SFLSampled_ipv6	sflow.h	/^} SFLSampled_ipv6;$/;"	t	typeref:struct:_SFLSampled_ipv6
SFLSampled_memcache	sflow.h	/^} SFLSampled_memcache;$/;"	t	typeref:struct:_SFLSampled_memcache
SFLString	sflow.h	/^} SFLString;$/;"	t	typeref:struct:_SFLString
SFLTokenring_counters	sflow.h	/^} SFLTokenring_counters;$/;"	t	typeref:struct:_SFLTokenring_counters
SFLVg_counters	sflow.h	/^} SFLVg_counters;$/;"	t	typeref:struct:_SFLVg_counters
SFLVirDomainState	sflow.h	/^enum SFLVirDomainState {$/;"	g
SFLVlanStack	sflow.h	/^typedef SFLLabelStack SFLVlanStack;$/;"	t
SFLVlan_counters	sflow.h	/^} SFLVlan_counters;$/;"	t	typeref:struct:_SFLVlan_counters
SFLWifi_counters	sflow.h	/^} SFLWifi_counters;$/;"	t	typeref:struct:_SFLWifi_counters
SFL_APP_STATUS_names	sflow.h	/^  static const char *SFL_APP_STATUS_names[] = { "SUCCESS",$/;"	v
SFL_DATA_PAD	sflow.h	1262;"	d
SFL_DEFAULT_COLLECTOR_PORT	sflow.h	42;"	d
SFL_DEFAULT_DATAGRAM_SIZE	sflow.h	1260;"	d
SFL_DEFAULT_HEADER_SIZE	sflow.h	41;"	d
SFL_DEFAULT_SAMPLING_RATE	sflow.h	43;"	d
SFL_IEEE80211_version	sflow.h	/^} SFL_IEEE80211_version;$/;"	t	typeref:enum:__anon6
SFL_MAX_DATAGRAM_SIZE	sflow.h	1258;"	d
SFL_MAX_HOSTNAME_LEN	sflow.h	882;"	d
SFL_MAX_HTTP_AUTHUSER	sflow.h	466;"	d
SFL_MAX_HTTP_HOST	sflow.h	462;"	d
SFL_MAX_HTTP_MIMETYPE	sflow.h	467;"	d
SFL_MAX_HTTP_REFERRER	sflow.h	463;"	d
SFL_MAX_HTTP_URI	sflow.h	461;"	d
SFL_MAX_HTTP_USERAGENT	sflow.h	464;"	d
SFL_MAX_HTTP_XFF	sflow.h	465;"	d
SFL_MAX_MEMCACHE_KEY	sflow.h	437;"	d
SFL_MAX_OSRELEASE_LEN	sflow.h	883;"	d
SFL_MAX_SSID_LEN	sflow.h	323;"	d
SFL_MIN_DATAGRAM_SIZE	sflow.h	1259;"	d
SFL_VIR_DOMAIN_BLOCKED	sflow.h	/^     SFL_VIR_DOMAIN_BLOCKED = 2, \/* the domain is blocked on resource *\/$/;"	e	enum:SFLVirDomainState
SFL_VIR_DOMAIN_CRASHED	sflow.h	/^     SFL_VIR_DOMAIN_CRASHED = 6  \/* the domain is crashed *\/$/;"	e	enum:SFLVirDomainState
SFL_VIR_DOMAIN_NOSTATE	sflow.h	/^     SFL_VIR_DOMAIN_NOSTATE = 0, \/* no state *\/$/;"	e	enum:SFLVirDomainState
SFL_VIR_DOMAIN_PAUSED	sflow.h	/^     SFL_VIR_DOMAIN_PAUSED  = 3, \/* the domain is paused by user *\/$/;"	e	enum:SFLVirDomainState
SFL_VIR_DOMAIN_RUNNING	sflow.h	/^     SFL_VIR_DOMAIN_RUNNING = 1, \/* the domain is running *\/$/;"	e	enum:SFLVirDomainState
SFL_VIR_DOMAIN_SHUTDOWN	sflow.h	/^     SFL_VIR_DOMAIN_SHUTDOWN= 4, \/* the domain is being shut down *\/$/;"	e	enum:SFLVirDomainState
SFL_VIR_DOMAIN_SHUTOFF	sflow.h	/^     SFL_VIR_DOMAIN_SHUTOFF = 5, \/* the domain is shut off *\/$/;"	e	enum:SFLVirDomainState
SFL_sample_tag	sflow.h	/^enum SFL_sample_tag {$/;"	g
SFSample	sflowtool.c	/^} SFSample;$/;"	t	typeref:struct:_SFSample	file:
SF_ABORT_DECODE_ERROR	sflowtool.c	375;"	d	file:
SF_ABORT_EOS	sflowtool.c	374;"	d	file:
SF_ABORT_LENGTH_ERROR	sflowtool.c	376;"	d	file:
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SOURCES	Makefile	/^SOURCES = $(sflowtool_SOURCES)$/;"	m
SPOOFSOURCE	sflowtool.c	40;"	d	file:
SPOOFSOURCE_SENDPACKET_SIZE	sflowtool.c	121;"	d	file:
STRIP	Makefile	/^STRIP = $/;"	m
TAGS	Makefile	/^TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \\$/;"	t
TCPDUMP_MAGIC	sflowtool.c	1078;"	d	file:
URLEncode	sflowtool.c	/^char *URLEncode(char *in, char *out, int outlen)$/;"	f	signature:(char *in, char *out, int outlen)
VERSION	Makefile	/^VERSION = 3.22$/;"	m
WIFI_MIN_HDR_SIZ	sflowtool.c	798;"	d	file:
XDRSIZ_JMX_COUNTERS	sflow.h	1142;"	d
XDRSIZ_SFLEXTENDED_SOCKET4	sflow.h	392;"	d
XDRSIZ_SFLEXTENDED_SOCKET6	sflow.h	404;"	d
YES	sflowtool.c	72;"	d	file:
_INMAddress	sflowtool.h	/^typedef struct _INMAddress {$/;"	s
_INMAddress::address	sflowtool.h	/^  INMAddress_value address;$/;"	m	struct:_INMAddress	access:public
_INMAddress::type	sflowtool.h	/^  uint32_t type;           \/* enum INMAddress_type *\/$/;"	m	struct:_INMAddress	access:public
_INMAddress_value	sflowtool.h	/^typedef union _INMAddress_value {$/;"	u
_INMAddress_value::ip_v4	sflowtool.h	/^  SFLIPv4 ip_v4;$/;"	m	union:_INMAddress_value	access:public
_INMAddress_value::ip_v6	sflowtool.h	/^  SFLIPv6 ip_v6;$/;"	m	union:_INMAddress_value	access:public
_INMCounters_sample	sflowtool.h	/^typedef struct _INMCounters_sample {$/;"	s
_INMCounters_sample::counters	sflowtool.h	/^  INMCounters_type counters;    \/* Counter set for this interface type *\/$/;"	m	struct:_INMCounters_sample	access:public
_INMCounters_sample::counters_type_tag	sflowtool.h	/^  uint32_t counters_type_tag;  \/* Enum INMCounters_version *\/$/;"	m	struct:_INMCounters_sample	access:public
_INMCounters_sample::hdr	sflowtool.h	/^  INMCounters_sample_hdr hdr;$/;"	m	struct:_INMCounters_sample	access:public
_INMCounters_sample_hdr	sflowtool.h	/^typedef struct _INMCounters_sample_hdr {$/;"	s
_INMCounters_sample_hdr::sampling_interval	sflowtool.h	/^  uint32_t sampling_interval;  \/* fsCounterSamplingInterval *\/$/;"	m	struct:_INMCounters_sample_hdr	access:public
_INMCounters_sample_hdr::sequence_number	sflowtool.h	/^  uint32_t sequence_number;    \/* Incremented with each counters sample$/;"	m	struct:_INMCounters_sample_hdr	access:public
_INMCounters_sample_hdr::source_id	sflowtool.h	/^  uint32_t source_id;          \/* fsSourceId *\/$/;"	m	struct:_INMCounters_sample_hdr	access:public
_INMCounters_type	sflowtool.h	/^typedef union _INMCounters_type {$/;"	u
_INMCounters_type::ethernet	sflowtool.h	/^  INMEthernet_counters ethernet;$/;"	m	union:_INMCounters_type	access:public
_INMCounters_type::fddi	sflowtool.h	/^  INMFddi_counters fddi;$/;"	m	union:_INMCounters_type	access:public
_INMCounters_type::generic	sflowtool.h	/^  INMIf_counters generic;$/;"	m	union:_INMCounters_type	access:public
_INMCounters_type::tokenring	sflowtool.h	/^  INMTokenring_counters tokenring;$/;"	m	union:_INMCounters_type	access:public
_INMCounters_type::vg	sflowtool.h	/^  INMVg_counters vg;$/;"	m	union:_INMCounters_type	access:public
_INMCounters_type::vlan	sflowtool.h	/^  INMVlan_counters vlan;$/;"	m	union:_INMCounters_type	access:public
_INMCounters_type::wan	sflowtool.h	/^  INMWan_counters wan;$/;"	m	union:_INMCounters_type	access:public
_INMEthernet_counters	sflowtool.h	/^typedef struct _INMEthernet_counters {$/;"	s
_INMEthernet_counters::ethernet	sflowtool.h	/^  INMEthernet_specific_counters ethernet;$/;"	m	struct:_INMEthernet_counters	access:public
_INMEthernet_counters::generic	sflowtool.h	/^  INMIf_counters generic;$/;"	m	struct:_INMEthernet_counters	access:public
_INMEthernet_specific_counters	sflowtool.h	/^typedef struct _INMEthernet_specific_counters {$/;"	s
_INMEthernet_specific_counters::dot3StatsAlignmentErrors	sflowtool.h	/^  uint32_t dot3StatsAlignmentErrors;$/;"	m	struct:_INMEthernet_specific_counters	access:public
_INMEthernet_specific_counters::dot3StatsCarrierSenseErrors	sflowtool.h	/^  uint32_t dot3StatsCarrierSenseErrors;$/;"	m	struct:_INMEthernet_specific_counters	access:public
_INMEthernet_specific_counters::dot3StatsDeferredTransmissions	sflowtool.h	/^  uint32_t dot3StatsDeferredTransmissions;$/;"	m	struct:_INMEthernet_specific_counters	access:public
_INMEthernet_specific_counters::dot3StatsExcessiveCollisions	sflowtool.h	/^  uint32_t dot3StatsExcessiveCollisions;$/;"	m	struct:_INMEthernet_specific_counters	access:public
_INMEthernet_specific_counters::dot3StatsFCSErrors	sflowtool.h	/^  uint32_t dot3StatsFCSErrors;$/;"	m	struct:_INMEthernet_specific_counters	access:public
_INMEthernet_specific_counters::dot3StatsFrameTooLongs	sflowtool.h	/^  uint32_t dot3StatsFrameTooLongs;$/;"	m	struct:_INMEthernet_specific_counters	access:public
_INMEthernet_specific_counters::dot3StatsInternalMacReceiveErrors	sflowtool.h	/^  uint32_t dot3StatsInternalMacReceiveErrors;$/;"	m	struct:_INMEthernet_specific_counters	access:public
_INMEthernet_specific_counters::dot3StatsInternalMacTransmitErrors	sflowtool.h	/^  uint32_t dot3StatsInternalMacTransmitErrors;$/;"	m	struct:_INMEthernet_specific_counters	access:public
_INMEthernet_specific_counters::dot3StatsLateCollisions	sflowtool.h	/^  uint32_t dot3StatsLateCollisions;$/;"	m	struct:_INMEthernet_specific_counters	access:public
_INMEthernet_specific_counters::dot3StatsMultipleCollisionFrames	sflowtool.h	/^  uint32_t dot3StatsMultipleCollisionFrames;$/;"	m	struct:_INMEthernet_specific_counters	access:public
_INMEthernet_specific_counters::dot3StatsSQETestErrors	sflowtool.h	/^  uint32_t dot3StatsSQETestErrors;$/;"	m	struct:_INMEthernet_specific_counters	access:public
_INMEthernet_specific_counters::dot3StatsSingleCollisionFrames	sflowtool.h	/^  uint32_t dot3StatsSingleCollisionFrames;$/;"	m	struct:_INMEthernet_specific_counters	access:public
_INMEthernet_specific_counters::dot3StatsSymbolErrors	sflowtool.h	/^  uint32_t dot3StatsSymbolErrors;$/;"	m	struct:_INMEthernet_specific_counters	access:public
_INMExtended_as_path_segment	sflowtool.h	/^typedef struct _INMExtended_as_path_segment {$/;"	s
_INMExtended_as_path_segment::__anon1::seq	sflowtool.h	/^    uint32_t *seq;$/;"	m	union:_INMExtended_as_path_segment::__anon1	access:public
_INMExtended_as_path_segment::__anon1::set	sflowtool.h	/^    uint32_t *set;$/;"	m	union:_INMExtended_as_path_segment::__anon1	access:public
_INMExtended_as_path_segment::as	sflowtool.h	/^  } as;$/;"	m	struct:_INMExtended_as_path_segment	typeref:union:_INMExtended_as_path_segment::__anon1	access:public
_INMExtended_as_path_segment::length	sflowtool.h	/^  uint32_t length; \/* number of AS numbers in set\/sequence *\/$/;"	m	struct:_INMExtended_as_path_segment	access:public
_INMExtended_as_path_segment::type	sflowtool.h	/^  uint32_t type;   \/* enum INMExtended_as_path_segment_type *\/$/;"	m	struct:_INMExtended_as_path_segment	access:public
_INMExtended_gateway_v2	sflowtool.h	/^typedef struct _INMExtended_gateway_v2 {$/;"	s
_INMExtended_gateway_v2::as	sflowtool.h	/^  uint32_t as;                             \/* AS number for this gateway *\/$/;"	m	struct:_INMExtended_gateway_v2	access:public
_INMExtended_gateway_v2::dst_as_path	sflowtool.h	/^  uint32_t *dst_as_path;$/;"	m	struct:_INMExtended_gateway_v2	access:public
_INMExtended_gateway_v2::dst_as_path_length	sflowtool.h	/^  uint32_t dst_as_path_length;             \/* number of AS numbers in path *\/$/;"	m	struct:_INMExtended_gateway_v2	access:public
_INMExtended_gateway_v2::src_as	sflowtool.h	/^  uint32_t src_as;                         \/* AS number of source (origin) *\/$/;"	m	struct:_INMExtended_gateway_v2	access:public
_INMExtended_gateway_v2::src_peer_as	sflowtool.h	/^  uint32_t src_peer_as;                    \/* AS number of source peer *\/$/;"	m	struct:_INMExtended_gateway_v2	access:public
_INMExtended_gateway_v4	sflowtool.h	/^typedef struct _INMExtended_gateway_v4 {$/;"	s
_INMExtended_gateway_v4::as	sflowtool.h	/^  uint32_t as;                             \/* AS number for this gateway *\/$/;"	m	struct:_INMExtended_gateway_v4	access:public
_INMExtended_gateway_v4::communities	sflowtool.h	/^  uint32_t *communities;                   \/* set of communities *\/$/;"	m	struct:_INMExtended_gateway_v4	access:public
_INMExtended_gateway_v4::communities_length	sflowtool.h	/^  uint32_t communities_length;             \/* number of communities *\/$/;"	m	struct:_INMExtended_gateway_v4	access:public
_INMExtended_gateway_v4::dst_as_path	sflowtool.h	/^  INMExtended_as_path_segment *dst_as_path; \/* list of seqs or sets *\/$/;"	m	struct:_INMExtended_gateway_v4	access:public
_INMExtended_gateway_v4::dst_as_path_segments	sflowtool.h	/^  uint32_t dst_as_path_segments;           \/* number of segments in path *\/$/;"	m	struct:_INMExtended_gateway_v4	access:public
_INMExtended_gateway_v4::localpref	sflowtool.h	/^  uint32_t localpref;                      \/* LocalPref associated with this route *\/$/;"	m	struct:_INMExtended_gateway_v4	access:public
_INMExtended_gateway_v4::src_as	sflowtool.h	/^  uint32_t src_as;                         \/* AS number of source (origin) *\/$/;"	m	struct:_INMExtended_gateway_v4	access:public
_INMExtended_gateway_v4::src_peer_as	sflowtool.h	/^  uint32_t src_peer_as;                    \/* AS number of source peer *\/$/;"	m	struct:_INMExtended_gateway_v4	access:public
_INMExtended_router	sflowtool.h	/^typedef struct _INMExtended_router {$/;"	s
_INMExtended_router::dst_mask	sflowtool.h	/^  uint32_t dst_mask;               \/* Destination address prefix mask bits *\/$/;"	m	struct:_INMExtended_router	access:public
_INMExtended_router::nexthop	sflowtool.h	/^  INMAddress nexthop;               \/* IP address of next hop router *\/$/;"	m	struct:_INMExtended_router	access:public
_INMExtended_router::src_mask	sflowtool.h	/^  uint32_t src_mask;               \/* Source address prefix mask bits *\/$/;"	m	struct:_INMExtended_router	access:public
_INMExtended_switch	sflowtool.h	/^typedef struct _INMExtended_switch {$/;"	s
_INMExtended_switch::dst_priority	sflowtool.h	/^  uint32_t dst_priority;   \/* The 802.1p priority *\/$/;"	m	struct:_INMExtended_switch	access:public
_INMExtended_switch::dst_vlan	sflowtool.h	/^  uint32_t dst_vlan;       \/* The 802.1Q VLAN id of outgoing frame *\/$/;"	m	struct:_INMExtended_switch	access:public
_INMExtended_switch::src_priority	sflowtool.h	/^  uint32_t src_priority;   \/* The 802.1p priority *\/$/;"	m	struct:_INMExtended_switch	access:public
_INMExtended_switch::src_vlan	sflowtool.h	/^  uint32_t src_vlan;       \/* The 802.1Q VLAN id of incomming frame *\/$/;"	m	struct:_INMExtended_switch	access:public
_INMExtended_url	sflowtool.h	/^typedef struct _INMExtended_url {$/;"	s
_INMExtended_url::direction	sflowtool.h	/^  uint32_t direction; \/* enum INMExtended_url_direction *\/$/;"	m	struct:_INMExtended_url	access:public
_INMExtended_url::url	sflowtool.h	/^  char *url;$/;"	m	struct:_INMExtended_url	access:public
_INMExtended_url::url_len	sflowtool.h	/^  uint32_t url_len;$/;"	m	struct:_INMExtended_url	access:public
_INMExtended_user	sflowtool.h	/^typedef struct _INMExtended_user {$/;"	s
_INMExtended_user::dst_user	sflowtool.h	/^  char *dst_user;$/;"	m	struct:_INMExtended_user	access:public
_INMExtended_user::dst_user_len	sflowtool.h	/^  uint32_t dst_user_len;$/;"	m	struct:_INMExtended_user	access:public
_INMExtended_user::src_user	sflowtool.h	/^  char *src_user;$/;"	m	struct:_INMExtended_user	access:public
_INMExtended_user::src_user_len	sflowtool.h	/^  uint32_t src_user_len;$/;"	m	struct:_INMExtended_user	access:public
_INMFddi_counters	sflowtool.h	/^typedef struct _INMFddi_counters {$/;"	s
_INMFddi_counters::generic	sflowtool.h	/^  INMIf_counters generic;$/;"	m	struct:_INMFddi_counters	access:public
_INMFlow_sample	sflowtool.h	/^typedef struct _INMFlow_sample {$/;"	s
_INMFlow_sample::__anon2::v2	sflowtool.h	/^    INMExtended_gateway_v2 v2;  \/* make the version explicit so that there is *\/$/;"	m	union:_INMFlow_sample::__anon2	access:public
_INMFlow_sample::__anon2::v4	sflowtool.h	/^    INMExtended_gateway_v4 v4;  \/* less danger of mistakes when upgrading code *\/$/;"	m	union:_INMFlow_sample::__anon2	access:public
_INMFlow_sample::drops	sflowtool.h	/^  uint32_t drops;                \/* Number of times a packet was dropped due to$/;"	m	struct:_INMFlow_sample	access:public
_INMFlow_sample::gateway	sflowtool.h	/^  } gateway;$/;"	m	struct:_INMFlow_sample	typeref:union:_INMFlow_sample::__anon2	access:public
_INMFlow_sample::gotGateway	sflowtool.h	/^  int gotGateway;$/;"	m	struct:_INMFlow_sample	access:public
_INMFlow_sample::gotRouter	sflowtool.h	/^  int gotRouter;$/;"	m	struct:_INMFlow_sample	access:public
_INMFlow_sample::gotSwitch	sflowtool.h	/^  int gotSwitch;$/;"	m	struct:_INMFlow_sample	access:public
_INMFlow_sample::gotUrl	sflowtool.h	/^  int gotUrl;$/;"	m	struct:_INMFlow_sample	access:public
_INMFlow_sample::gotUser	sflowtool.h	/^  int gotUser;$/;"	m	struct:_INMFlow_sample	access:public
_INMFlow_sample::input	sflowtool.h	/^  uint32_t input;                \/* SNMP ifIndex of input interface.$/;"	m	struct:_INMFlow_sample	access:public
_INMFlow_sample::output	sflowtool.h	/^  uint32_t output;               \/* SNMP ifIndex of output interface,$/;"	m	struct:_INMFlow_sample	access:public
_INMFlow_sample::packet_data	sflowtool.h	/^  INMPacket_data_type packet_data; \/* Information about sampled packet *\/$/;"	m	struct:_INMFlow_sample	access:public
_INMFlow_sample::packet_data_tag	sflowtool.h	/^  uint32_t packet_data_tag;       \/* enum INMPacket_information_type *\/$/;"	m	struct:_INMFlow_sample	access:public
_INMFlow_sample::router	sflowtool.h	/^  INMExtended_router router;$/;"	m	struct:_INMFlow_sample	access:public
_INMFlow_sample::sample_pool	sflowtool.h	/^  uint32_t sample_pool;          \/* Total number of packets that could have been$/;"	m	struct:_INMFlow_sample	access:public
_INMFlow_sample::sampling_rate	sflowtool.h	/^  uint32_t sampling_rate;        \/* fsPacketSamplingRate *\/$/;"	m	struct:_INMFlow_sample	access:public
_INMFlow_sample::sequence_number	sflowtool.h	/^  uint32_t sequence_number;      \/* Incremented with each flow sample$/;"	m	struct:_INMFlow_sample	access:public
_INMFlow_sample::source_id	sflowtool.h	/^  uint32_t source_id;            \/* fsSourceId *\/$/;"	m	struct:_INMFlow_sample	access:public
_INMFlow_sample::switchDevice	sflowtool.h	/^  INMExtended_switch switchDevice;$/;"	m	struct:_INMFlow_sample	access:public
_INMFlow_sample::url	sflowtool.h	/^  INMExtended_url url;$/;"	m	struct:_INMFlow_sample	access:public
_INMFlow_sample::user	sflowtool.h	/^  INMExtended_user user;$/;"	m	struct:_INMFlow_sample	access:public
_INMIf_counters	sflowtool.h	/^typedef struct _INMIf_counters {$/;"	s
_INMIf_counters::ifDirection	sflowtool.h	/^  uint32_t ifDirection;        \/* Derived from MAU MIB (RFC 2239)$/;"	m	struct:_INMIf_counters	access:public
_INMIf_counters::ifInBroadcastPkts	sflowtool.h	/^  uint32_t ifInBroadcastPkts;$/;"	m	struct:_INMIf_counters	access:public
_INMIf_counters::ifInDiscards	sflowtool.h	/^  uint32_t ifInDiscards;$/;"	m	struct:_INMIf_counters	access:public
_INMIf_counters::ifInErrors	sflowtool.h	/^  uint32_t ifInErrors;$/;"	m	struct:_INMIf_counters	access:public
_INMIf_counters::ifInMulticastPkts	sflowtool.h	/^  uint32_t ifInMulticastPkts;$/;"	m	struct:_INMIf_counters	access:public
_INMIf_counters::ifInOctets	sflowtool.h	/^  uint64_t ifInOctets;$/;"	m	struct:_INMIf_counters	access:public
_INMIf_counters::ifInUcastPkts	sflowtool.h	/^  uint32_t ifInUcastPkts;$/;"	m	struct:_INMIf_counters	access:public
_INMIf_counters::ifInUnknownProtos	sflowtool.h	/^  uint32_t ifInUnknownProtos;$/;"	m	struct:_INMIf_counters	access:public
_INMIf_counters::ifIndex	sflowtool.h	/^  uint32_t ifIndex;$/;"	m	struct:_INMIf_counters	access:public
_INMIf_counters::ifOutBroadcastPkts	sflowtool.h	/^  uint32_t ifOutBroadcastPkts;$/;"	m	struct:_INMIf_counters	access:public
_INMIf_counters::ifOutDiscards	sflowtool.h	/^  uint32_t ifOutDiscards;$/;"	m	struct:_INMIf_counters	access:public
_INMIf_counters::ifOutErrors	sflowtool.h	/^  uint32_t ifOutErrors;$/;"	m	struct:_INMIf_counters	access:public
_INMIf_counters::ifOutMulticastPkts	sflowtool.h	/^  uint32_t ifOutMulticastPkts;$/;"	m	struct:_INMIf_counters	access:public
_INMIf_counters::ifOutOctets	sflowtool.h	/^  uint64_t ifOutOctets;$/;"	m	struct:_INMIf_counters	access:public
_INMIf_counters::ifOutUcastPkts	sflowtool.h	/^  uint32_t ifOutUcastPkts;$/;"	m	struct:_INMIf_counters	access:public
_INMIf_counters::ifPromiscuousMode	sflowtool.h	/^  uint32_t ifPromiscuousMode;$/;"	m	struct:_INMIf_counters	access:public
_INMIf_counters::ifSpeed	sflowtool.h	/^  uint64_t ifSpeed;$/;"	m	struct:_INMIf_counters	access:public
_INMIf_counters::ifStatus	sflowtool.h	/^  uint32_t ifStatus;           \/* bit field with the following bits assigned:$/;"	m	struct:_INMIf_counters	access:public
_INMIf_counters::ifType	sflowtool.h	/^  uint32_t ifType;$/;"	m	struct:_INMIf_counters	access:public
_INMPacket_data_type	sflowtool.h	/^typedef union _INMPacket_data_type {$/;"	u
_INMPacket_data_type::header	sflowtool.h	/^  INMSampled_header header;$/;"	m	union:_INMPacket_data_type	access:public
_INMPacket_data_type::ipv4	sflowtool.h	/^  INMSampled_ipv4 ipv4;$/;"	m	union:_INMPacket_data_type	access:public
_INMPacket_data_type::ipv6	sflowtool.h	/^  INMSampled_ipv6 ipv6;$/;"	m	union:_INMPacket_data_type	access:public
_INMSample_datagram_hdr	sflowtool.h	/^typedef struct _INMSample_datagram_hdr {$/;"	s
_INMSample_datagram_hdr::agent_address	sflowtool.h	/^  INMAddress agent_address;        \/* IP address of sampling agent *\/$/;"	m	struct:_INMSample_datagram_hdr	access:public
_INMSample_datagram_hdr::datagram_version	sflowtool.h	/^  uint32_t datagram_version;      \/* (enum INMDatagram_version) = VERSION4 *\/$/;"	m	struct:_INMSample_datagram_hdr	access:public
_INMSample_datagram_hdr::num_samples	sflowtool.h	/^  uint32_t num_samples;           \/* Number of flow and counters samples to follow *\/$/;"	m	struct:_INMSample_datagram_hdr	access:public
_INMSample_datagram_hdr::sequence_number	sflowtool.h	/^  uint32_t sequence_number;       \/* Incremented with each sample datagram$/;"	m	struct:_INMSample_datagram_hdr	access:public
_INMSample_datagram_hdr::uptime	sflowtool.h	/^  uint32_t uptime;                \/* Current time (in milliseconds since device$/;"	m	struct:_INMSample_datagram_hdr	access:public
_INMSample_type	sflowtool.h	/^typedef union _INMSample_type {$/;"	u
_INMSample_type::counterssample	sflowtool.h	/^  INMCounters_sample counterssample;$/;"	m	union:_INMSample_type	access:public
_INMSample_type::flowsample	sflowtool.h	/^  INMFlow_sample flowsample;$/;"	m	union:_INMSample_type	access:public
_INMSampled_header	sflowtool.h	/^typedef struct _INMSampled_header {$/;"	s
_INMSampled_header::frame_length	sflowtool.h	/^  uint32_t frame_length;               \/* Original length of packet before sampling *\/$/;"	m	struct:_INMSampled_header	access:public
_INMSampled_header::header	sflowtool.h	/^  uint8_t header[INM_MAX_HEADER_SIZE]; \/* Header bytes *\/$/;"	m	struct:_INMSampled_header	access:public
_INMSampled_header::header_length	sflowtool.h	/^  uint32_t header_length;              \/* length of sampled header bytes to follow *\/$/;"	m	struct:_INMSampled_header	access:public
_INMSampled_header::header_protocol	sflowtool.h	/^  uint32_t header_protocol;            \/* (enum INMHeader_protocol) *\/$/;"	m	struct:_INMSampled_header	access:public
_INMSampled_ipv4	sflowtool.h	/^typedef struct _INMSampled_ipv4 {$/;"	s
_INMSampled_ipv4::dst_ip	sflowtool.h	/^  SFLIPv4 dst_ip; \/* Destination IP Address *\/$/;"	m	struct:_INMSampled_ipv4	access:public
_INMSampled_ipv4::dst_port	sflowtool.h	/^  uint32_t dst_port;    \/* TCP\/UDP destination port number or equivalent *\/$/;"	m	struct:_INMSampled_ipv4	access:public
_INMSampled_ipv4::length	sflowtool.h	/^  uint32_t length;      \/* The length of the IP packet$/;"	m	struct:_INMSampled_ipv4	access:public
_INMSampled_ipv4::protocol	sflowtool.h	/^  uint32_t protocol;    \/* IP Protocol type (for example, TCP = 6, UDP = 17) *\/$/;"	m	struct:_INMSampled_ipv4	access:public
_INMSampled_ipv4::src_ip	sflowtool.h	/^  SFLIPv4 src_ip; \/* Source IP Address *\/$/;"	m	struct:_INMSampled_ipv4	access:public
_INMSampled_ipv4::src_port	sflowtool.h	/^  uint32_t src_port;    \/* TCP\/UDP source port number or equivalent *\/$/;"	m	struct:_INMSampled_ipv4	access:public
_INMSampled_ipv4::tcp_flags	sflowtool.h	/^  uint32_t tcp_flags;   \/* TCP flags *\/$/;"	m	struct:_INMSampled_ipv4	access:public
_INMSampled_ipv4::tos	sflowtool.h	/^  uint32_t tos;         \/* IP type of service *\/$/;"	m	struct:_INMSampled_ipv4	access:public
_INMSampled_ipv6	sflowtool.h	/^typedef struct _INMSampled_ipv6 {$/;"	s
_INMSampled_ipv6::dst_ip	sflowtool.h	/^  SFLIPv6 dst_ip; \/* Destination IP Address *\/$/;"	m	struct:_INMSampled_ipv6	access:public
_INMSampled_ipv6::dst_port	sflowtool.h	/^  uint32_t dst_port;     \/* TCP\/UDP destination port number or equivalent *\/$/;"	m	struct:_INMSampled_ipv6	access:public
_INMSampled_ipv6::length	sflowtool.h	/^  uint32_t length;       \/* The length of the IP packet$/;"	m	struct:_INMSampled_ipv6	access:public
_INMSampled_ipv6::protocol	sflowtool.h	/^  uint32_t protocol;     \/* IP Protocol type (for example, TCP = 6, UDP = 17) *\/$/;"	m	struct:_INMSampled_ipv6	access:public
_INMSampled_ipv6::src_ip	sflowtool.h	/^  SFLIPv6 src_ip; \/* Source IP Address *\/$/;"	m	struct:_INMSampled_ipv6	access:public
_INMSampled_ipv6::src_port	sflowtool.h	/^  uint32_t src_port;     \/* TCP\/UDP source port number or equivalent *\/$/;"	m	struct:_INMSampled_ipv6	access:public
_INMSampled_ipv6::tcp_flags	sflowtool.h	/^  uint32_t tcp_flags;    \/* TCP flags *\/$/;"	m	struct:_INMSampled_ipv6	access:public
_INMSampled_ipv6::tos	sflowtool.h	/^  uint32_t tos;          \/* IP type of service *\/$/;"	m	struct:_INMSampled_ipv6	access:public
_INMTokenring_counters	sflowtool.h	/^typedef struct _INMTokenring_counters {$/;"	s
_INMTokenring_counters::generic	sflowtool.h	/^  INMIf_counters generic;$/;"	m	struct:_INMTokenring_counters	access:public
_INMTokenring_counters::tokenring	sflowtool.h	/^  INMTokenring_specific_counters tokenring;$/;"	m	struct:_INMTokenring_counters	access:public
_INMTokenring_specific_counters	sflowtool.h	/^typedef struct _INMTokenring_specific_counters {$/;"	s
_INMTokenring_specific_counters::dot5StatsACErrors	sflowtool.h	/^  uint32_t dot5StatsACErrors;$/;"	m	struct:_INMTokenring_specific_counters	access:public
_INMTokenring_specific_counters::dot5StatsAbortTransErrors	sflowtool.h	/^  uint32_t dot5StatsAbortTransErrors;$/;"	m	struct:_INMTokenring_specific_counters	access:public
_INMTokenring_specific_counters::dot5StatsBurstErrors	sflowtool.h	/^  uint32_t dot5StatsBurstErrors;$/;"	m	struct:_INMTokenring_specific_counters	access:public
_INMTokenring_specific_counters::dot5StatsFrameCopiedErrors	sflowtool.h	/^  uint32_t dot5StatsFrameCopiedErrors;$/;"	m	struct:_INMTokenring_specific_counters	access:public
_INMTokenring_specific_counters::dot5StatsFreqErrors	sflowtool.h	/^  uint32_t dot5StatsFreqErrors;$/;"	m	struct:_INMTokenring_specific_counters	access:public
_INMTokenring_specific_counters::dot5StatsHardErrors	sflowtool.h	/^  uint32_t dot5StatsHardErrors;$/;"	m	struct:_INMTokenring_specific_counters	access:public
_INMTokenring_specific_counters::dot5StatsInternalErrors	sflowtool.h	/^  uint32_t dot5StatsInternalErrors;$/;"	m	struct:_INMTokenring_specific_counters	access:public
_INMTokenring_specific_counters::dot5StatsLineErrors	sflowtool.h	/^  uint32_t dot5StatsLineErrors;$/;"	m	struct:_INMTokenring_specific_counters	access:public
_INMTokenring_specific_counters::dot5StatsLobeWires	sflowtool.h	/^  uint32_t dot5StatsLobeWires;$/;"	m	struct:_INMTokenring_specific_counters	access:public
_INMTokenring_specific_counters::dot5StatsLostFrameErrors	sflowtool.h	/^  uint32_t dot5StatsLostFrameErrors;$/;"	m	struct:_INMTokenring_specific_counters	access:public
_INMTokenring_specific_counters::dot5StatsReceiveCongestions	sflowtool.h	/^  uint32_t dot5StatsReceiveCongestions;$/;"	m	struct:_INMTokenring_specific_counters	access:public
_INMTokenring_specific_counters::dot5StatsRecoverys	sflowtool.h	/^  uint32_t dot5StatsRecoverys;$/;"	m	struct:_INMTokenring_specific_counters	access:public
_INMTokenring_specific_counters::dot5StatsRemoves	sflowtool.h	/^  uint32_t dot5StatsRemoves;$/;"	m	struct:_INMTokenring_specific_counters	access:public
_INMTokenring_specific_counters::dot5StatsSignalLoss	sflowtool.h	/^  uint32_t dot5StatsSignalLoss;$/;"	m	struct:_INMTokenring_specific_counters	access:public
_INMTokenring_specific_counters::dot5StatsSingles	sflowtool.h	/^  uint32_t dot5StatsSingles;$/;"	m	struct:_INMTokenring_specific_counters	access:public
_INMTokenring_specific_counters::dot5StatsSoftErrors	sflowtool.h	/^  uint32_t dot5StatsSoftErrors;$/;"	m	struct:_INMTokenring_specific_counters	access:public
_INMTokenring_specific_counters::dot5StatsTokenErrors	sflowtool.h	/^  uint32_t dot5StatsTokenErrors;$/;"	m	struct:_INMTokenring_specific_counters	access:public
_INMTokenring_specific_counters::dot5StatsTransmitBeacons	sflowtool.h	/^  uint32_t dot5StatsTransmitBeacons;$/;"	m	struct:_INMTokenring_specific_counters	access:public
_INMVg_counters	sflowtool.h	/^typedef struct _INMVg_counters {$/;"	s
_INMVg_counters::generic	sflowtool.h	/^  INMIf_counters generic;$/;"	m	struct:_INMVg_counters	access:public
_INMVg_counters::vg	sflowtool.h	/^  INMVg_specific_counters vg;$/;"	m	struct:_INMVg_counters	access:public
_INMVg_specific_counters	sflowtool.h	/^typedef struct _INMVg_specific_counters {$/;"	s
_INMVg_specific_counters::dot12HCInHighPriorityOctets	sflowtool.h	/^  uint64_t dot12HCInHighPriorityOctets;$/;"	m	struct:_INMVg_specific_counters	access:public
_INMVg_specific_counters::dot12HCInNormPriorityOctets	sflowtool.h	/^  uint64_t dot12HCInNormPriorityOctets;$/;"	m	struct:_INMVg_specific_counters	access:public
_INMVg_specific_counters::dot12HCOutHighPriorityOctets	sflowtool.h	/^  uint64_t dot12HCOutHighPriorityOctets;$/;"	m	struct:_INMVg_specific_counters	access:public
_INMVg_specific_counters::dot12InDataErrors	sflowtool.h	/^  uint32_t dot12InDataErrors;$/;"	m	struct:_INMVg_specific_counters	access:public
_INMVg_specific_counters::dot12InHighPriorityFrames	sflowtool.h	/^  uint32_t dot12InHighPriorityFrames;$/;"	m	struct:_INMVg_specific_counters	access:public
_INMVg_specific_counters::dot12InHighPriorityOctets	sflowtool.h	/^  uint64_t dot12InHighPriorityOctets;$/;"	m	struct:_INMVg_specific_counters	access:public
_INMVg_specific_counters::dot12InIPMErrors	sflowtool.h	/^  uint32_t dot12InIPMErrors;$/;"	m	struct:_INMVg_specific_counters	access:public
_INMVg_specific_counters::dot12InNormPriorityFrames	sflowtool.h	/^  uint32_t dot12InNormPriorityFrames;$/;"	m	struct:_INMVg_specific_counters	access:public
_INMVg_specific_counters::dot12InNormPriorityOctets	sflowtool.h	/^  uint64_t dot12InNormPriorityOctets;$/;"	m	struct:_INMVg_specific_counters	access:public
_INMVg_specific_counters::dot12InNullAddressedFrames	sflowtool.h	/^  uint32_t dot12InNullAddressedFrames;$/;"	m	struct:_INMVg_specific_counters	access:public
_INMVg_specific_counters::dot12InOversizeFrameErrors	sflowtool.h	/^  uint32_t dot12InOversizeFrameErrors;$/;"	m	struct:_INMVg_specific_counters	access:public
_INMVg_specific_counters::dot12OutHighPriorityFrames	sflowtool.h	/^  uint32_t dot12OutHighPriorityFrames;$/;"	m	struct:_INMVg_specific_counters	access:public
_INMVg_specific_counters::dot12OutHighPriorityOctets	sflowtool.h	/^  uint64_t dot12OutHighPriorityOctets;$/;"	m	struct:_INMVg_specific_counters	access:public
_INMVg_specific_counters::dot12TransitionIntoTrainings	sflowtool.h	/^  uint32_t dot12TransitionIntoTrainings;$/;"	m	struct:_INMVg_specific_counters	access:public
_INMVlan_counters	sflowtool.h	/^typedef struct _INMVlan_counters {$/;"	s
_INMVlan_counters::broadcastPkts	sflowtool.h	/^  uint32_t broadcastPkts;$/;"	m	struct:_INMVlan_counters	access:public
_INMVlan_counters::discards	sflowtool.h	/^  uint32_t discards;$/;"	m	struct:_INMVlan_counters	access:public
_INMVlan_counters::multicastPkts	sflowtool.h	/^  uint32_t multicastPkts;$/;"	m	struct:_INMVlan_counters	access:public
_INMVlan_counters::octets	sflowtool.h	/^  uint64_t octets;$/;"	m	struct:_INMVlan_counters	access:public
_INMVlan_counters::ucastPkts	sflowtool.h	/^  uint32_t ucastPkts;$/;"	m	struct:_INMVlan_counters	access:public
_INMVlan_counters::vlan_id	sflowtool.h	/^  uint32_t vlan_id;$/;"	m	struct:_INMVlan_counters	access:public
_INMWan_counters	sflowtool.h	/^typedef struct _INMWan_counters {$/;"	s
_INMWan_counters::generic	sflowtool.h	/^  INMIf_counters generic;$/;"	m	struct:_INMWan_counters	access:public
_NFFlow5	sflowtool.c	/^typedef struct _NFFlow5 {$/;"	s	file:
_NFFlow5::bytes	sflowtool.c	/^  uint32_t bytes;$/;"	m	struct:_NFFlow5	file:	access:public
_NFFlow5::dstAS	sflowtool.c	/^  uint16_t dstAS;$/;"	m	struct:_NFFlow5	file:	access:public
_NFFlow5::dstIP	sflowtool.c	/^  uint32_t dstIP;$/;"	m	struct:_NFFlow5	file:	access:public
_NFFlow5::dstMask	sflowtool.c	/^  uint8_t dstMask;  \/* No. bits *\/$/;"	m	struct:_NFFlow5	file:	access:public
_NFFlow5::dstPort	sflowtool.c	/^  uint16_t dstPort;$/;"	m	struct:_NFFlow5	file:	access:public
_NFFlow5::firstTime	sflowtool.c	/^  uint32_t firstTime;$/;"	m	struct:_NFFlow5	file:	access:public
_NFFlow5::frames	sflowtool.c	/^  uint32_t frames;$/;"	m	struct:_NFFlow5	file:	access:public
_NFFlow5::if_in	sflowtool.c	/^  uint16_t if_in;$/;"	m	struct:_NFFlow5	file:	access:public
_NFFlow5::if_out	sflowtool.c	/^  uint16_t if_out;$/;"	m	struct:_NFFlow5	file:	access:public
_NFFlow5::ipProto	sflowtool.c	/^  uint8_t ipProto;$/;"	m	struct:_NFFlow5	file:	access:public
_NFFlow5::ipTos	sflowtool.c	/^  uint8_t ipTos;$/;"	m	struct:_NFFlow5	file:	access:public
_NFFlow5::lastTime	sflowtool.c	/^  uint32_t lastTime;$/;"	m	struct:_NFFlow5	file:	access:public
_NFFlow5::nextHop	sflowtool.c	/^  uint32_t nextHop;$/;"	m	struct:_NFFlow5	file:	access:public
_NFFlow5::pad1	sflowtool.c	/^  uint8_t pad1;$/;"	m	struct:_NFFlow5	file:	access:public
_NFFlow5::pad2	sflowtool.c	/^  uint16_t pad2;$/;"	m	struct:_NFFlow5	file:	access:public
_NFFlow5::srcAS	sflowtool.c	/^  uint16_t srcAS;$/;"	m	struct:_NFFlow5	file:	access:public
_NFFlow5::srcIP	sflowtool.c	/^  uint32_t srcIP;$/;"	m	struct:_NFFlow5	file:	access:public
_NFFlow5::srcMask	sflowtool.c	/^  uint8_t srcMask;  \/* No. bits *\/$/;"	m	struct:_NFFlow5	file:	access:public
_NFFlow5::srcPort	sflowtool.c	/^  uint16_t srcPort;$/;"	m	struct:_NFFlow5	file:	access:public
_NFFlow5::tcpFlags	sflowtool.c	/^  uint8_t tcpFlags;$/;"	m	struct:_NFFlow5	file:	access:public
_NFFlowHdr5	sflowtool.c	/^typedef struct _NFFlowHdr5 {$/;"	s	file:
_NFFlowHdr5::count	sflowtool.c	/^  uint16_t count;$/;"	m	struct:_NFFlowHdr5	file:	access:public
_NFFlowHdr5::engineId	sflowtool.c	/^  uint8_t engineId;$/;"	m	struct:_NFFlowHdr5	file:	access:public
_NFFlowHdr5::engineType	sflowtool.c	/^  uint8_t engineType;$/;"	m	struct:_NFFlowHdr5	file:	access:public
_NFFlowHdr5::flowSequence	sflowtool.c	/^  uint32_t flowSequence;$/;"	m	struct:_NFFlowHdr5	file:	access:public
_NFFlowHdr5::sampling_interval	sflowtool.c	/^  uint16_t sampling_interval;$/;"	m	struct:_NFFlowHdr5	file:	access:public
_NFFlowHdr5::sysUpTime	sflowtool.c	/^  uint32_t sysUpTime;$/;"	m	struct:_NFFlowHdr5	file:	access:public
_NFFlowHdr5::unixNanoSeconds	sflowtool.c	/^  uint32_t unixNanoSeconds;$/;"	m	struct:_NFFlowHdr5	file:	access:public
_NFFlowHdr5::unixSeconds	sflowtool.c	/^  uint32_t unixSeconds;$/;"	m	struct:_NFFlowHdr5	file:	access:public
_NFFlowHdr5::version	sflowtool.c	/^  uint16_t version;$/;"	m	struct:_NFFlowHdr5	file:	access:public
_NFFlowPkt5	sflowtool.c	/^typedef struct _NFFlowPkt5 {$/;"	s	file:
_NFFlowPkt5::flow	sflowtool.c	/^  NFFlow5 flow; \/* normally an array, but here we always send just 1 at a time *\/$/;"	m	struct:_NFFlowPkt5	file:	access:public
_NFFlowPkt5::hdr	sflowtool.c	/^  NFFlowHdr5 hdr;$/;"	m	struct:_NFFlowPkt5	file:	access:public
_SFCommonLogFormat	sflowtool.c	/^typedef struct _SFCommonLogFormat {$/;"	s	file:
_SFCommonLogFormat::client	sflowtool.c	/^  char client[64];$/;"	m	struct:_SFCommonLogFormat	file:	access:public
_SFCommonLogFormat::http_log	sflowtool.c	/^  char http_log[SFLFMT_CLF_MAX_LINE];$/;"	m	struct:_SFCommonLogFormat	file:	access:public
_SFCommonLogFormat::valid	sflowtool.c	/^  int valid;$/;"	m	struct:_SFCommonLogFormat	file:	access:public
_SFConfig	sflowtool.c	/^typedef struct _SFConfig {$/;"	s	file:
_SFConfig::disableNetFlowScale	sflowtool.c	/^  int disableNetFlowScale;$/;"	m	struct:_SFConfig	file:	access:public
_SFConfig::forwardingTargets	sflowtool.c	/^  SFForwardingTarget *forwardingTargets;$/;"	m	struct:_SFConfig	file:	access:public
_SFConfig::gotVlanFilter	sflowtool.c	/^  int gotVlanFilter;$/;"	m	struct:_SFConfig	file:	access:public
_SFConfig::ipid	sflowtool.c	/^  uint16_t ipid;$/;"	m	struct:_SFConfig	file:	access:public
_SFConfig::listen4	sflowtool.c	/^  int listen4;$/;"	m	struct:_SFConfig	file:	access:public
_SFConfig::listen6	sflowtool.c	/^  int listen6;$/;"	m	struct:_SFConfig	file:	access:public
_SFConfig::listenControlled	sflowtool.c	/^  int listenControlled;$/;"	m	struct:_SFConfig	file:	access:public
_SFConfig::netFlowOutputIP	sflowtool.c	/^  struct in_addr netFlowOutputIP;$/;"	m	struct:_SFConfig	typeref:struct:_SFConfig::in_addr	file:	access:public
_SFConfig::netFlowOutputPort	sflowtool.c	/^  uint16_t netFlowOutputPort;$/;"	m	struct:_SFConfig	file:	access:public
_SFConfig::netFlowOutputSocket	sflowtool.c	/^  int netFlowOutputSocket;$/;"	m	struct:_SFConfig	file:	access:public
_SFConfig::netFlowPeerAS	sflowtool.c	/^  uint16_t netFlowPeerAS;$/;"	m	struct:_SFConfig	file:	access:public
_SFConfig::outputFormat	sflowtool.c	/^  EnumSFLFormat outputFormat;$/;"	m	struct:_SFConfig	file:	access:public
_SFConfig::packetLen	sflowtool.c	/^  uint32_t packetLen;$/;"	m	struct:_SFConfig	file:	access:public
_SFConfig::pcapSwap	sflowtool.c	/^  int pcapSwap;$/;"	m	struct:_SFConfig	file:	access:public
_SFConfig::readPcapFile	sflowtool.c	/^  FILE *readPcapFile;$/;"	m	struct:_SFConfig	file:	access:public
_SFConfig::readPcapFileName	sflowtool.c	/^  char *readPcapFileName;$/;"	m	struct:_SFConfig	file:	access:public
_SFConfig::readPcapHdr	sflowtool.c	/^  struct pcap_file_header readPcapHdr;$/;"	m	struct:_SFConfig	typeref:struct:_SFConfig::pcap_file_header	file:	access:public
_SFConfig::removeContent	sflowtool.c	/^  int removeContent;$/;"	m	struct:_SFConfig	file:	access:public
_SFConfig::sFlowInputPort	sflowtool.c	/^  uint16_t sFlowInputPort;$/;"	m	struct:_SFConfig	file:	access:public
_SFConfig::sendPkt	sflowtool.c	/^  struct mySendPacket sendPkt;$/;"	m	struct:_SFConfig	typeref:struct:_SFConfig::mySendPacket	file:	access:public
_SFConfig::spoofSource	sflowtool.c	/^  int spoofSource;$/;"	m	struct:_SFConfig	file:	access:public
_SFConfig::tcpdumpHdrPad	sflowtool.c	/^  uint32_t tcpdumpHdrPad;$/;"	m	struct:_SFConfig	file:	access:public
_SFConfig::vlanFilter	sflowtool.c	/^  u_char vlanFilter[FILTER_MAX_VLAN + 1];$/;"	m	struct:_SFConfig	file:	access:public
_SFConfig::writePcapFile	sflowtool.c	/^  char *writePcapFile;$/;"	m	struct:_SFConfig	file:	access:public
_SFConfig::zeroPad	sflowtool.c	/^  u_char zeroPad[100];$/;"	m	struct:_SFConfig	file:	access:public
_SFForwardingTarget	sflowtool.c	/^typedef struct _SFForwardingTarget {$/;"	s	file:
_SFForwardingTarget::addr	sflowtool.c	/^  struct sockaddr_in addr;$/;"	m	struct:_SFForwardingTarget	typeref:struct:_SFForwardingTarget::sockaddr_in	file:	access:public
_SFForwardingTarget::host	sflowtool.c	/^  struct in_addr host;$/;"	m	struct:_SFForwardingTarget	typeref:struct:_SFForwardingTarget::in_addr	file:	access:public
_SFForwardingTarget::nxt	sflowtool.c	/^  struct _SFForwardingTarget *nxt;$/;"	m	struct:_SFForwardingTarget	typeref:struct:_SFForwardingTarget::_SFForwardingTarget	file:	access:public
_SFForwardingTarget::port	sflowtool.c	/^  uint32_t port;$/;"	m	struct:_SFForwardingTarget	file:	access:public
_SFForwardingTarget::sock	sflowtool.c	/^  int sock;$/;"	m	struct:_SFForwardingTarget	file:	access:public
_SFLAPP_counters	sflow.h	/^typedef struct _SFLAPP_counters {$/;"	s
_SFLAPP_counters::application	sflow.h	/^  SFLString application;$/;"	m	struct:_SFLAPP_counters	access:public
_SFLAPP_counters::errors_BAD_REQUEST	sflow.h	/^  uint32_t errors_BAD_REQUEST;$/;"	m	struct:_SFLAPP_counters	access:public
_SFLAPP_counters::errors_FORBIDDEN	sflow.h	/^  uint32_t errors_FORBIDDEN;$/;"	m	struct:_SFLAPP_counters	access:public
_SFLAPP_counters::errors_INTERNAL_ERROR	sflow.h	/^  uint32_t errors_INTERNAL_ERROR;$/;"	m	struct:_SFLAPP_counters	access:public
_SFLAPP_counters::errors_NOT_FOUND	sflow.h	/^  uint32_t errors_NOT_FOUND;$/;"	m	struct:_SFLAPP_counters	access:public
_SFLAPP_counters::errors_NOT_IMPLEMENTED	sflow.h	/^  uint32_t errors_NOT_IMPLEMENTED;$/;"	m	struct:_SFLAPP_counters	access:public
_SFLAPP_counters::errors_OTHER	sflow.h	/^  uint32_t errors_OTHER;$/;"	m	struct:_SFLAPP_counters	access:public
_SFLAPP_counters::errors_TIMEOUT	sflow.h	/^  uint32_t errors_TIMEOUT;$/;"	m	struct:_SFLAPP_counters	access:public
_SFLAPP_counters::errors_TOO_LARGE	sflow.h	/^  uint32_t errors_TOO_LARGE;$/;"	m	struct:_SFLAPP_counters	access:public
_SFLAPP_counters::errors_UNAUTHORIZED	sflow.h	/^  uint32_t errors_UNAUTHORIZED;$/;"	m	struct:_SFLAPP_counters	access:public
_SFLAPP_counters::errors_UNAVAILABLE	sflow.h	/^  uint32_t errors_UNAVAILABLE;$/;"	m	struct:_SFLAPP_counters	access:public
_SFLAPP_counters::status_OK	sflow.h	/^  uint32_t status_OK;$/;"	m	struct:_SFLAPP_counters	access:public
_SFLAdaptor	sflow.h	/^typedef struct _SFLAdaptor {$/;"	s
_SFLAdaptor::ifIndex	sflow.h	/^  uint32_t ifIndex;$/;"	m	struct:_SFLAdaptor	access:public
_SFLAdaptor::macs	sflow.h	/^  SFLMacAddress macs[1];$/;"	m	struct:_SFLAdaptor	access:public
_SFLAdaptor::num_macs	sflow.h	/^  uint32_t num_macs;$/;"	m	struct:_SFLAdaptor	access:public
_SFLAdaptorList	sflow.h	/^typedef struct _SFLAdaptorList {$/;"	s
_SFLAdaptorList::adaptors	sflow.h	/^  SFLAdaptor **adaptors;$/;"	m	struct:_SFLAdaptorList	access:public
_SFLAdaptorList::capacity	sflow.h	/^  uint32_t capacity;$/;"	m	struct:_SFLAdaptorList	access:public
_SFLAdaptorList::num_adaptors	sflow.h	/^  uint32_t num_adaptors;$/;"	m	struct:_SFLAdaptorList	access:public
_SFLAddress	sflow.h	/^typedef struct _SFLAddress {$/;"	s
_SFLAddress::address	sflow.h	/^  SFLAddress_value address;$/;"	m	struct:_SFLAddress	access:public
_SFLAddress::type	sflow.h	/^  uint32_t type;           \/* enum SFLAddress_type *\/$/;"	m	struct:_SFLAddress	access:public
_SFLAddress_value	sflow.h	/^typedef union _SFLAddress_value {$/;"	u
_SFLAddress_value::ip_v4	sflow.h	/^    SFLIPv4 ip_v4;$/;"	m	union:_SFLAddress_value	access:public
_SFLAddress_value::ip_v6	sflow.h	/^    SFLIPv6 ip_v6;$/;"	m	union:_SFLAddress_value	access:public
_SFLCounters_sample	sflow.h	/^typedef struct _SFLCounters_sample {$/;"	s
_SFLCounters_sample::elements	sflow.h	/^  SFLCounters_sample_element *elements;$/;"	m	struct:_SFLCounters_sample	access:public
_SFLCounters_sample::num_elements	sflow.h	/^  uint32_t num_elements;$/;"	m	struct:_SFLCounters_sample	access:public
_SFLCounters_sample::sequence_number	sflow.h	/^  uint32_t sequence_number;    \/* Incremented with each counters sample$/;"	m	struct:_SFLCounters_sample	access:public
_SFLCounters_sample::source_id	sflow.h	/^  uint32_t source_id;          \/* fsSourceId *\/$/;"	m	struct:_SFLCounters_sample	access:public
_SFLCounters_sample_element	sflow.h	/^typedef struct _SFLCounters_sample_element {$/;"	s
_SFLCounters_sample_element::counterBlock	sflow.h	/^  SFLCounters_type counterBlock;$/;"	m	struct:_SFLCounters_sample_element	access:public
_SFLCounters_sample_element::length	sflow.h	/^  uint32_t length;$/;"	m	struct:_SFLCounters_sample_element	access:public
_SFLCounters_sample_element::nxt	sflow.h	/^  struct _SFLCounters_sample_element *nxt; \/* linked list *\/$/;"	m	struct:_SFLCounters_sample_element	typeref:struct:_SFLCounters_sample_element::_SFLCounters_sample_element	access:public
_SFLCounters_sample_element::tag	sflow.h	/^  uint32_t tag; \/* SFLCounters_type_tag *\/$/;"	m	struct:_SFLCounters_sample_element	access:public
_SFLCounters_sample_expanded	sflow.h	/^typedef struct _SFLCounters_sample_expanded {$/;"	s
_SFLCounters_sample_expanded::ds_class	sflow.h	/^  uint32_t ds_class;           \/* EXPANDED *\/$/;"	m	struct:_SFLCounters_sample_expanded	access:public
_SFLCounters_sample_expanded::ds_index	sflow.h	/^  uint32_t ds_index;           \/* EXPANDED *\/$/;"	m	struct:_SFLCounters_sample_expanded	access:public
_SFLCounters_sample_expanded::elements	sflow.h	/^  SFLCounters_sample_element *elements;$/;"	m	struct:_SFLCounters_sample_expanded	access:public
_SFLCounters_sample_expanded::num_elements	sflow.h	/^  uint32_t num_elements;$/;"	m	struct:_SFLCounters_sample_expanded	access:public
_SFLCounters_sample_expanded::sequence_number	sflow.h	/^  uint32_t sequence_number;    \/* Incremented with each counters sample$/;"	m	struct:_SFLCounters_sample_expanded	access:public
_SFLCounters_type	sflow.h	/^typedef union _SFLCounters_type {$/;"	u
_SFLCounters_type::adaptors	sflow.h	/^  SFLAdaptorList *adaptors;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::app	sflow.h	/^  SFLAPP_counters app;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::appResource	sflow.h	/^  SFLAPPResource_counters appResource;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::ethernet	sflow.h	/^  SFLEthernet_counters ethernet;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::generic	sflow.h	/^  SFLIf_counters generic;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::hostId	sflow.h	/^  SFLHostId hostId;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::host_cpu	sflow.h	/^  SFLHost_cpu_counters host_cpu;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::host_dsk	sflow.h	/^  SFLHost_dsk_counters host_dsk;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::host_mem	sflow.h	/^  SFLHost_mem_counters host_mem;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::host_nio	sflow.h	/^  SFLHost_nio_counters host_nio;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::host_par	sflow.h	/^  SFLHost_parent host_par;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::host_vrt_cpu	sflow.h	/^  SFLHost_vrt_cpu_counters host_vrt_cpu;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::host_vrt_dsk	sflow.h	/^  SFLHost_vrt_dsk_counters host_vrt_dsk;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::host_vrt_mem	sflow.h	/^  SFLHost_vrt_mem_counters host_vrt_mem;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::host_vrt_nio	sflow.h	/^  SFLHost_vrt_nio_counters host_vrt_nio;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::host_vrt_node	sflow.h	/^  SFLHost_vrt_node_counters host_vrt_node;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::http	sflow.h	/^  SFLHTTP_counters http;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::jmx	sflow.h	/^  SFLJMX_counters jmx;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::jvm	sflow.h	/^  SFLJVM_ID jvm;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::memcache	sflow.h	/^  SFLMemcache_counters memcache;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::processor	sflow.h	/^  SFLProcessor_counters processor;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::radio	sflow.h	/^  SFLRadio_counters radio;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::tokenring	sflow.h	/^  SFLTokenring_counters tokenring;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::vg	sflow.h	/^  SFLVg_counters vg;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::vlan	sflow.h	/^  SFLVlan_counters vlan;$/;"	m	union:_SFLCounters_type	access:public
_SFLCounters_type::wifi	sflow.h	/^  SFLWifi_counters wifi;$/;"	m	union:_SFLCounters_type	access:public
_SFLEthernet_counters	sflow.h	/^typedef struct _SFLEthernet_counters {$/;"	s
_SFLEthernet_counters::dot3StatsAlignmentErrors	sflow.h	/^  uint32_t dot3StatsAlignmentErrors;$/;"	m	struct:_SFLEthernet_counters	access:public
_SFLEthernet_counters::dot3StatsCarrierSenseErrors	sflow.h	/^  uint32_t dot3StatsCarrierSenseErrors;$/;"	m	struct:_SFLEthernet_counters	access:public
_SFLEthernet_counters::dot3StatsDeferredTransmissions	sflow.h	/^  uint32_t dot3StatsDeferredTransmissions;$/;"	m	struct:_SFLEthernet_counters	access:public
_SFLEthernet_counters::dot3StatsExcessiveCollisions	sflow.h	/^  uint32_t dot3StatsExcessiveCollisions;$/;"	m	struct:_SFLEthernet_counters	access:public
_SFLEthernet_counters::dot3StatsFCSErrors	sflow.h	/^  uint32_t dot3StatsFCSErrors;$/;"	m	struct:_SFLEthernet_counters	access:public
_SFLEthernet_counters::dot3StatsFrameTooLongs	sflow.h	/^  uint32_t dot3StatsFrameTooLongs;$/;"	m	struct:_SFLEthernet_counters	access:public
_SFLEthernet_counters::dot3StatsInternalMacReceiveErrors	sflow.h	/^  uint32_t dot3StatsInternalMacReceiveErrors;$/;"	m	struct:_SFLEthernet_counters	access:public
_SFLEthernet_counters::dot3StatsInternalMacTransmitErrors	sflow.h	/^  uint32_t dot3StatsInternalMacTransmitErrors;$/;"	m	struct:_SFLEthernet_counters	access:public
_SFLEthernet_counters::dot3StatsLateCollisions	sflow.h	/^  uint32_t dot3StatsLateCollisions;$/;"	m	struct:_SFLEthernet_counters	access:public
_SFLEthernet_counters::dot3StatsMultipleCollisionFrames	sflow.h	/^  uint32_t dot3StatsMultipleCollisionFrames;$/;"	m	struct:_SFLEthernet_counters	access:public
_SFLEthernet_counters::dot3StatsSQETestErrors	sflow.h	/^  uint32_t dot3StatsSQETestErrors;$/;"	m	struct:_SFLEthernet_counters	access:public
_SFLEthernet_counters::dot3StatsSingleCollisionFrames	sflow.h	/^  uint32_t dot3StatsSingleCollisionFrames;$/;"	m	struct:_SFLEthernet_counters	access:public
_SFLEthernet_counters::dot3StatsSymbolErrors	sflow.h	/^  uint32_t dot3StatsSymbolErrors;$/;"	m	struct:_SFLEthernet_counters	access:public
_SFLExtended_aggregation	sflow.h	/^typedef struct _SFLExtended_aggregation {$/;"	s
_SFLExtended_aggregation::num_pdus	sflow.h	/^  uint32_t num_pdus;$/;"	m	struct:_SFLExtended_aggregation	access:public
_SFLExtended_aggregation::pdus	sflow.h	/^  struct _SFFlow_Pdu *pdus;$/;"	m	struct:_SFLExtended_aggregation	typeref:struct:_SFLExtended_aggregation::_SFFlow_Pdu	access:public
_SFLExtended_as_path_segment	sflow.h	/^typedef struct _SFLExtended_as_path_segment {$/;"	s
_SFLExtended_as_path_segment::__anon5::seq	sflow.h	/^    uint32_t *seq;$/;"	m	union:_SFLExtended_as_path_segment::__anon5	access:public
_SFLExtended_as_path_segment::__anon5::set	sflow.h	/^    uint32_t *set;$/;"	m	union:_SFLExtended_as_path_segment::__anon5	access:public
_SFLExtended_as_path_segment::as	sflow.h	/^  } as;$/;"	m	struct:_SFLExtended_as_path_segment	typeref:union:_SFLExtended_as_path_segment::__anon5	access:public
_SFLExtended_as_path_segment::length	sflow.h	/^  uint32_t length; \/* number of AS numbers in set\/sequence *\/$/;"	m	struct:_SFLExtended_as_path_segment	access:public
_SFLExtended_as_path_segment::type	sflow.h	/^  uint32_t type;   \/* enum SFLExtended_as_path_segment_type *\/$/;"	m	struct:_SFLExtended_as_path_segment	access:public
_SFLExtended_gateway	sflow.h	/^typedef struct _SFLExtended_gateway {$/;"	s
_SFLExtended_gateway::as	sflow.h	/^  uint32_t as;                             \/* AS number for this gateway *\/$/;"	m	struct:_SFLExtended_gateway	access:public
_SFLExtended_gateway::communities	sflow.h	/^  uint32_t *communities;                   \/* set of communities *\/$/;"	m	struct:_SFLExtended_gateway	access:public
_SFLExtended_gateway::communities_length	sflow.h	/^  uint32_t communities_length;             \/* number of communities *\/$/;"	m	struct:_SFLExtended_gateway	access:public
_SFLExtended_gateway::dst_as_path	sflow.h	/^  SFLExtended_as_path_segment *dst_as_path; \/* list of seqs or sets *\/$/;"	m	struct:_SFLExtended_gateway	access:public
_SFLExtended_gateway::dst_as_path_segments	sflow.h	/^  uint32_t dst_as_path_segments;           \/* number of segments in path *\/$/;"	m	struct:_SFLExtended_gateway	access:public
_SFLExtended_gateway::localpref	sflow.h	/^  uint32_t localpref;                      \/* LocalPref associated with this route *\/$/;"	m	struct:_SFLExtended_gateway	access:public
_SFLExtended_gateway::nexthop	sflow.h	/^  SFLAddress nexthop;                       \/* Address of the border router that should$/;"	m	struct:_SFLExtended_gateway	access:public
_SFLExtended_gateway::src_as	sflow.h	/^  uint32_t src_as;                         \/* AS number of source (origin) *\/$/;"	m	struct:_SFLExtended_gateway	access:public
_SFLExtended_gateway::src_peer_as	sflow.h	/^  uint32_t src_peer_as;                    \/* AS number of source peer *\/$/;"	m	struct:_SFLExtended_gateway	access:public
_SFLExtended_mpls	sflow.h	/^typedef struct _SFLExtended_mpls {$/;"	s
_SFLExtended_mpls::in_stack	sflow.h	/^  SFLLabelStack in_stack;$/;"	m	struct:_SFLExtended_mpls	access:public
_SFLExtended_mpls::nextHop	sflow.h	/^  SFLAddress nextHop;        \/* Address of the next hop *\/ $/;"	m	struct:_SFLExtended_mpls	access:public
_SFLExtended_mpls::out_stack	sflow.h	/^  SFLLabelStack out_stack;$/;"	m	struct:_SFLExtended_mpls	access:public
_SFLExtended_mpls_FTN	sflow.h	/^typedef struct _SFLExtended_mpls_FTN {$/;"	s
_SFLExtended_mpls_FTN::mplsFTNDescr	sflow.h	/^   SFLString mplsFTNDescr;$/;"	m	struct:_SFLExtended_mpls_FTN	access:public
_SFLExtended_mpls_FTN::mplsFTNMask	sflow.h	/^   uint32_t mplsFTNMask;$/;"	m	struct:_SFLExtended_mpls_FTN	access:public
_SFLExtended_mpls_LDP_FEC	sflow.h	/^typedef struct _SFLExtended_mpls_LDP_FEC {$/;"	s
_SFLExtended_mpls_LDP_FEC::mplsFecAddrPrefixLength	sflow.h	/^   uint32_t mplsFecAddrPrefixLength;$/;"	m	struct:_SFLExtended_mpls_LDP_FEC	access:public
_SFLExtended_mpls_tunnel	sflow.h	/^typedef struct _SFLExtended_mpls_tunnel {$/;"	s
_SFLExtended_mpls_tunnel::tunnel_cos	sflow.h	/^   uint32_t tunnel_cos;       \/* Tunnel COS value *\/$/;"	m	struct:_SFLExtended_mpls_tunnel	access:public
_SFLExtended_mpls_tunnel::tunnel_id	sflow.h	/^   uint32_t tunnel_id;        \/* Tunnel ID *\/$/;"	m	struct:_SFLExtended_mpls_tunnel	access:public
_SFLExtended_mpls_tunnel::tunnel_lsp_name	sflow.h	/^   SFLString tunnel_lsp_name;  \/* Tunnel name *\/$/;"	m	struct:_SFLExtended_mpls_tunnel	access:public
_SFLExtended_mpls_vc	sflow.h	/^typedef struct _SFLExtended_mpls_vc {$/;"	s
_SFLExtended_mpls_vc::vc_instance_name	sflow.h	/^   SFLString vc_instance_name; \/* VC instance name *\/$/;"	m	struct:_SFLExtended_mpls_vc	access:public
_SFLExtended_mpls_vc::vc_label_cos	sflow.h	/^   uint32_t vc_label_cos;     \/* VC Label COS value *\/$/;"	m	struct:_SFLExtended_mpls_vc	access:public
_SFLExtended_mpls_vc::vll_vc_id	sflow.h	/^   uint32_t vll_vc_id;        \/* VLL\/VC instance ID *\/$/;"	m	struct:_SFLExtended_mpls_vc	access:public
_SFLExtended_nat	sflow.h	/^typedef struct _SFLExtended_nat {$/;"	s
_SFLExtended_nat::dst	sflow.h	/^  SFLAddress dst;    \/* Destination address *\/$/;"	m	struct:_SFLExtended_nat	access:public
_SFLExtended_nat::src	sflow.h	/^  SFLAddress src;    \/* Source address *\/$/;"	m	struct:_SFLExtended_nat	access:public
_SFLExtended_router	sflow.h	/^typedef struct _SFLExtended_router {$/;"	s
_SFLExtended_router::dst_mask	sflow.h	/^  uint32_t dst_mask;               \/* Destination address prefix mask bits *\/$/;"	m	struct:_SFLExtended_router	access:public
_SFLExtended_router::nexthop	sflow.h	/^  SFLAddress nexthop;               \/* IP address of next hop router *\/$/;"	m	struct:_SFLExtended_router	access:public
_SFLExtended_router::src_mask	sflow.h	/^  uint32_t src_mask;               \/* Source address prefix mask bits *\/$/;"	m	struct:_SFLExtended_router	access:public
_SFLExtended_socket_ipv4	sflow.h	/^typedef struct _SFLExtended_socket_ipv4 {$/;"	s
_SFLExtended_socket_ipv4::local_ip	sflow.h	/^   SFLIPv4 local_ip;      \/* local IP address *\/$/;"	m	struct:_SFLExtended_socket_ipv4	access:public
_SFLExtended_socket_ipv4::local_port	sflow.h	/^   uint32_t local_port;   \/* TCP\/UDP local port number or equivalent *\/$/;"	m	struct:_SFLExtended_socket_ipv4	access:public
_SFLExtended_socket_ipv4::protocol	sflow.h	/^   uint32_t protocol;     \/* IP Protocol (e.g. TCP = 6, UDP = 17) *\/$/;"	m	struct:_SFLExtended_socket_ipv4	access:public
_SFLExtended_socket_ipv4::remote_ip	sflow.h	/^   SFLIPv4 remote_ip;     \/* remote IP address *\/$/;"	m	struct:_SFLExtended_socket_ipv4	access:public
_SFLExtended_socket_ipv4::remote_port	sflow.h	/^   uint32_t remote_port;  \/* TCP\/UDP remote port number of equivalent *\/$/;"	m	struct:_SFLExtended_socket_ipv4	access:public
_SFLExtended_socket_ipv6	sflow.h	/^typedef struct _SFLExtended_socket_ipv6 {$/;"	s
_SFLExtended_socket_ipv6::local_ip	sflow.h	/^  SFLIPv6 local_ip;      \/* local IP address *\/$/;"	m	struct:_SFLExtended_socket_ipv6	access:public
_SFLExtended_socket_ipv6::local_port	sflow.h	/^  uint32_t local_port;   \/* TCP\/UDP local port number or equivalent *\/$/;"	m	struct:_SFLExtended_socket_ipv6	access:public
_SFLExtended_socket_ipv6::protocol	sflow.h	/^  uint32_t protocol;     \/* IP Protocol (e.g. TCP = 6, UDP = 17) *\/$/;"	m	struct:_SFLExtended_socket_ipv6	access:public
_SFLExtended_socket_ipv6::remote_ip	sflow.h	/^  SFLIPv6 remote_ip;     \/* remote IP address *\/$/;"	m	struct:_SFLExtended_socket_ipv6	access:public
_SFLExtended_socket_ipv6::remote_port	sflow.h	/^  uint32_t remote_port;  \/* TCP\/UDP remote port number of equivalent *\/$/;"	m	struct:_SFLExtended_socket_ipv6	access:public
_SFLExtended_switch	sflow.h	/^typedef struct _SFLExtended_switch {$/;"	s
_SFLExtended_switch::dst_priority	sflow.h	/^  uint32_t dst_priority;   \/* The 802.1p priority *\/$/;"	m	struct:_SFLExtended_switch	access:public
_SFLExtended_switch::dst_vlan	sflow.h	/^  uint32_t dst_vlan;       \/* The 802.1Q VLAN id of outgoing frame *\/$/;"	m	struct:_SFLExtended_switch	access:public
_SFLExtended_switch::src_priority	sflow.h	/^  uint32_t src_priority;   \/* The 802.1p priority *\/$/;"	m	struct:_SFLExtended_switch	access:public
_SFLExtended_switch::src_vlan	sflow.h	/^  uint32_t src_vlan;       \/* The 802.1Q VLAN id of incomming frame *\/$/;"	m	struct:_SFLExtended_switch	access:public
_SFLExtended_url	sflow.h	/^typedef struct _SFLExtended_url {$/;"	s
_SFLExtended_url::direction	sflow.h	/^  uint32_t direction;   \/* enum SFLExtended_url_direction *\/$/;"	m	struct:_SFLExtended_url	access:public
_SFLExtended_url::host	sflow.h	/^  SFLString host;        \/* The host field from the HTTP header *\/$/;"	m	struct:_SFLExtended_url	access:public
_SFLExtended_url::url	sflow.h	/^  SFLString url;         \/* URL associated with the packet flow.$/;"	m	struct:_SFLExtended_url	access:public
_SFLExtended_user	sflow.h	/^typedef struct _SFLExtended_user {$/;"	s
_SFLExtended_user::dst_charset	sflow.h	/^  uint32_t dst_charset;$/;"	m	struct:_SFLExtended_user	access:public
_SFLExtended_user::dst_user	sflow.h	/^  SFLString dst_user;$/;"	m	struct:_SFLExtended_user	access:public
_SFLExtended_user::src_charset	sflow.h	/^  uint32_t src_charset;  \/* MIBEnum value of character set used to encode a string - See RFC 2978$/;"	m	struct:_SFLExtended_user	access:public
_SFLExtended_user::src_user	sflow.h	/^  SFLString src_user;$/;"	m	struct:_SFLExtended_user	access:public
_SFLExtended_vlan_tunnel	sflow.h	/^typedef struct _SFLExtended_vlan_tunnel { $/;"	s
_SFLExtended_vlan_tunnel::stack	sflow.h	/^  SFLVlanStack stack;  \/* List of stripped 802.1Q TPID\/TCI layers. Each $/;"	m	struct:_SFLExtended_vlan_tunnel	access:public
_SFLExtended_wifi_payload	sflow.h	/^typedef struct _SFLExtended_wifi_payload {$/;"	s
_SFLExtended_wifi_payload::cipherSuite	sflow.h	/^  SFLCipherSuite cipherSuite;$/;"	m	struct:_SFLExtended_wifi_payload	access:public
_SFLExtended_wifi_payload::header	sflow.h	/^  SFLSampled_header header;$/;"	m	struct:_SFLExtended_wifi_payload	access:public
_SFLExtended_wifi_rx	sflow.h	/^typedef struct _SFLExtended_wifi_rx {$/;"	s
_SFLExtended_wifi_rx::bssid	sflow.h	/^  char bssid[6];    \/* BSSID *\/$/;"	m	struct:_SFLExtended_wifi_rx	access:public
_SFLExtended_wifi_rx::channel	sflow.h	/^  uint32_t channel;       \/* channel number *\/$/;"	m	struct:_SFLExtended_wifi_rx	access:public
_SFLExtended_wifi_rx::packet_duration_us	sflow.h	/^  uint32_t packet_duration_us; \/* amount of time that the successfully received pkt occupied RF medium.*\/$/;"	m	struct:_SFLExtended_wifi_rx	access:public
_SFLExtended_wifi_rx::rcpi	sflow.h	/^  uint32_t rcpi;          \/* received channel power, see dot11FrameRprtLastRCPI *\/$/;"	m	struct:_SFLExtended_wifi_rx	access:public
_SFLExtended_wifi_rx::rsni	sflow.h	/^  uint32_t rsni;          \/* received signal to noise ratio, see dot11FrameRprtRSNI *\/$/;"	m	struct:_SFLExtended_wifi_rx	access:public
_SFLExtended_wifi_rx::speed	sflow.h	/^  uint64_t speed;$/;"	m	struct:_SFLExtended_wifi_rx	access:public
_SFLExtended_wifi_rx::ssid	sflow.h	/^  char *ssid;$/;"	m	struct:_SFLExtended_wifi_rx	access:public
_SFLExtended_wifi_rx::ssid_len	sflow.h	/^  uint32_t ssid_len;$/;"	m	struct:_SFLExtended_wifi_rx	access:public
_SFLExtended_wifi_rx::version	sflow.h	/^  SFL_IEEE80211_version version;  \/* version *\/$/;"	m	struct:_SFLExtended_wifi_rx	access:public
_SFLExtended_wifi_tx	sflow.h	/^typedef struct _SFLExtended_wifi_tx {$/;"	s
_SFLExtended_wifi_tx::bssid	sflow.h	/^  char  bssid[6];             \/* BSSID *\/$/;"	m	struct:_SFLExtended_wifi_tx	access:public
_SFLExtended_wifi_tx::channel	sflow.h	/^  uint32_t channel;         \/* channel number *\/$/;"	m	struct:_SFLExtended_wifi_tx	access:public
_SFLExtended_wifi_tx::packet_duration_us	sflow.h	/^  uint32_t packet_duration_us;  \/* amount of time that the successfully$/;"	m	struct:_SFLExtended_wifi_tx	access:public
_SFLExtended_wifi_tx::power_mw	sflow.h	/^  uint32_t power_mw;           \/* transmit power in mW. *\/$/;"	m	struct:_SFLExtended_wifi_tx	access:public
_SFLExtended_wifi_tx::retrans_duration_us	sflow.h	/^  uint32_t retrans_duration_us; \/* amount of time that failed transmission$/;"	m	struct:_SFLExtended_wifi_tx	access:public
_SFLExtended_wifi_tx::speed	sflow.h	/^  uint64_t speed;$/;"	m	struct:_SFLExtended_wifi_tx	access:public
_SFLExtended_wifi_tx::ssid	sflow.h	/^  char *ssid;              \/* SSID string *\/$/;"	m	struct:_SFLExtended_wifi_tx	access:public
_SFLExtended_wifi_tx::ssid_len	sflow.h	/^  uint32_t ssid_len;$/;"	m	struct:_SFLExtended_wifi_tx	access:public
_SFLExtended_wifi_tx::transmissions	sflow.h	/^  uint32_t transmissions;   \/* number of transmissions for sampled$/;"	m	struct:_SFLExtended_wifi_tx	access:public
_SFLExtended_wifi_tx::version	sflow.h	/^  SFL_IEEE80211_version version;    \/* version *\/$/;"	m	struct:_SFLExtended_wifi_tx	access:public
_SFLFlow_Pdu	sflow.h	/^typedef struct _SFLFlow_Pdu {$/;"	s
_SFLFlow_Pdu::elements	sflow.h	/^  SFLFlow_sample_element *elements;$/;"	m	struct:_SFLFlow_Pdu	access:public
_SFLFlow_Pdu::num_elements	sflow.h	/^  uint32_t num_elements;$/;"	m	struct:_SFLFlow_Pdu	access:public
_SFLFlow_Pdu::nxt	sflow.h	/^  struct _SFLFlow_Pdu *nxt;$/;"	m	struct:_SFLFlow_Pdu	typeref:struct:_SFLFlow_Pdu::_SFLFlow_Pdu	access:public
_SFLFlow_sample	sflow.h	/^typedef struct _SFLFlow_sample {$/;"	s
_SFLFlow_sample::drops	sflow.h	/^  uint32_t drops;                \/* Number of times a packet was dropped due to$/;"	m	struct:_SFLFlow_sample	access:public
_SFLFlow_sample::elements	sflow.h	/^  SFLFlow_sample_element *elements;$/;"	m	struct:_SFLFlow_sample	access:public
_SFLFlow_sample::input	sflow.h	/^  uint32_t input;                \/* SNMP ifIndex of input interface.$/;"	m	struct:_SFLFlow_sample	access:public
_SFLFlow_sample::num_elements	sflow.h	/^  uint32_t num_elements;$/;"	m	struct:_SFLFlow_sample	access:public
_SFLFlow_sample::output	sflow.h	/^  uint32_t output;               \/* SNMP ifIndex of output interface,$/;"	m	struct:_SFLFlow_sample	access:public
_SFLFlow_sample::sample_pool	sflow.h	/^  uint32_t sample_pool;          \/* Total number of packets that could have been$/;"	m	struct:_SFLFlow_sample	access:public
_SFLFlow_sample::sampling_rate	sflow.h	/^  uint32_t sampling_rate;        \/* fsPacketSamplingRate *\/$/;"	m	struct:_SFLFlow_sample	access:public
_SFLFlow_sample::sequence_number	sflow.h	/^  uint32_t sequence_number;      \/* Incremented with each flow sample$/;"	m	struct:_SFLFlow_sample	access:public
_SFLFlow_sample::source_id	sflow.h	/^  uint32_t source_id;            \/* fsSourceId *\/$/;"	m	struct:_SFLFlow_sample	access:public
_SFLFlow_sample_element	sflow.h	/^typedef struct _SFLFlow_sample_element {$/;"	s
_SFLFlow_sample_element::flowType	sflow.h	/^  SFLFlow_type flowType;$/;"	m	struct:_SFLFlow_sample_element	access:public
_SFLFlow_sample_element::length	sflow.h	/^  uint32_t length;$/;"	m	struct:_SFLFlow_sample_element	access:public
_SFLFlow_sample_element::nxt	sflow.h	/^  struct _SFLFlow_sample_element *nxt;$/;"	m	struct:_SFLFlow_sample_element	typeref:struct:_SFLFlow_sample_element::_SFLFlow_sample_element	access:public
_SFLFlow_sample_element::tag	sflow.h	/^  uint32_t tag;  \/* SFLFlow_type_tag *\/$/;"	m	struct:_SFLFlow_sample_element	access:public
_SFLFlow_sample_expanded	sflow.h	/^typedef struct _SFLFlow_sample_expanded {$/;"	s
_SFLFlow_sample_expanded::drops	sflow.h	/^  uint32_t drops;                \/* Number of times a packet was dropped due to$/;"	m	struct:_SFLFlow_sample_expanded	access:public
_SFLFlow_sample_expanded::ds_class	sflow.h	/^  uint32_t ds_class;             \/* EXPANDED *\/$/;"	m	struct:_SFLFlow_sample_expanded	access:public
_SFLFlow_sample_expanded::ds_index	sflow.h	/^  uint32_t ds_index;             \/* EXPANDED *\/$/;"	m	struct:_SFLFlow_sample_expanded	access:public
_SFLFlow_sample_expanded::elements	sflow.h	/^  SFLFlow_sample_element *elements;$/;"	m	struct:_SFLFlow_sample_expanded	access:public
_SFLFlow_sample_expanded::input	sflow.h	/^  uint32_t input;                \/* SNMP ifIndex of input interface.$/;"	m	struct:_SFLFlow_sample_expanded	access:public
_SFLFlow_sample_expanded::inputFormat	sflow.h	/^  uint32_t inputFormat;          \/* EXPANDED *\/$/;"	m	struct:_SFLFlow_sample_expanded	access:public
_SFLFlow_sample_expanded::num_elements	sflow.h	/^  uint32_t num_elements;$/;"	m	struct:_SFLFlow_sample_expanded	access:public
_SFLFlow_sample_expanded::output	sflow.h	/^  uint32_t output;               \/* SNMP ifIndex of output interface,$/;"	m	struct:_SFLFlow_sample_expanded	access:public
_SFLFlow_sample_expanded::outputFormat	sflow.h	/^  uint32_t outputFormat;         \/* EXPANDED *\/$/;"	m	struct:_SFLFlow_sample_expanded	access:public
_SFLFlow_sample_expanded::sample_pool	sflow.h	/^  uint32_t sample_pool;          \/* Total number of packets that could have been$/;"	m	struct:_SFLFlow_sample_expanded	access:public
_SFLFlow_sample_expanded::sampling_rate	sflow.h	/^  uint32_t sampling_rate;        \/* fsPacketSamplingRate *\/$/;"	m	struct:_SFLFlow_sample_expanded	access:public
_SFLFlow_sample_expanded::sequence_number	sflow.h	/^  uint32_t sequence_number;      \/* Incremented with each flow sample$/;"	m	struct:_SFLFlow_sample_expanded	access:public
_SFLFlow_type	sflow.h	/^typedef union _SFLFlow_type {$/;"	u
_SFLFlow_type::aggregation	sflow.h	/^  SFLExtended_aggregation aggregation;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::app	sflow.h	/^  SFLSampled_APP app;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::appActor	sflow.h	/^  SFLSampled_APP_ACTOR appActor;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::appCtxt	sflow.h	/^  SFLSampled_APP_CTXT appCtxt;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::ethernet	sflow.h	/^  SFLSampled_ethernet ethernet;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::gateway	sflow.h	/^  SFLExtended_gateway gateway;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::header	sflow.h	/^  SFLSampled_header header;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::http	sflow.h	/^  SFLSampled_http http;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::ipv4	sflow.h	/^  SFLSampled_ipv4 ipv4;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::ipv6	sflow.h	/^  SFLSampled_ipv6 ipv6;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::memcache	sflow.h	/^  SFLSampled_memcache memcache;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::mpls	sflow.h	/^  SFLExtended_mpls mpls;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::mpls_ftn	sflow.h	/^  SFLExtended_mpls_FTN mpls_ftn;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::mpls_ldp_fec	sflow.h	/^  SFLExtended_mpls_LDP_FEC mpls_ldp_fec;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::mpls_tunnel	sflow.h	/^  SFLExtended_mpls_tunnel mpls_tunnel;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::mpls_vc	sflow.h	/^  SFLExtended_mpls_vc mpls_vc;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::nat	sflow.h	/^  SFLExtended_nat nat;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::router	sflow.h	/^  SFLExtended_router router;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::socket4	sflow.h	/^  SFLExtended_socket_ipv4 socket4;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::socket6	sflow.h	/^  SFLExtended_socket_ipv6 socket6;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::sw	sflow.h	/^  SFLExtended_switch sw;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::url	sflow.h	/^  SFLExtended_url url;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::user	sflow.h	/^  SFLExtended_user user;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::vlan_tunnel	sflow.h	/^  SFLExtended_vlan_tunnel vlan_tunnel;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::wifi_payload	sflow.h	/^  SFLExtended_wifi_payload wifi_payload;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::wifi_rx	sflow.h	/^  SFLExtended_wifi_rx wifi_rx;$/;"	m	union:_SFLFlow_type	access:public
_SFLFlow_type::wifi_tx	sflow.h	/^  SFLExtended_wifi_tx wifi_tx;$/;"	m	union:_SFLFlow_type	access:public
_SFLHTTP_counters	sflow.h	/^typedef struct _SFLHTTP_counters {$/;"	s
_SFLHTTP_counters::methd_connect_count	sflow.h	/^  uint32_t methd_connect_count;$/;"	m	struct:_SFLHTTP_counters	access:public
_SFLHTTP_counters::method_delete_count	sflow.h	/^  uint32_t method_delete_count;$/;"	m	struct:_SFLHTTP_counters	access:public
_SFLHTTP_counters::method_get_count	sflow.h	/^  uint32_t method_get_count;$/;"	m	struct:_SFLHTTP_counters	access:public
_SFLHTTP_counters::method_head_count	sflow.h	/^  uint32_t method_head_count;$/;"	m	struct:_SFLHTTP_counters	access:public
_SFLHTTP_counters::method_option_count	sflow.h	/^  uint32_t method_option_count;$/;"	m	struct:_SFLHTTP_counters	access:public
_SFLHTTP_counters::method_other_count	sflow.h	/^  uint32_t method_other_count;$/;"	m	struct:_SFLHTTP_counters	access:public
_SFLHTTP_counters::method_post_count	sflow.h	/^  uint32_t method_post_count;$/;"	m	struct:_SFLHTTP_counters	access:public
_SFLHTTP_counters::method_put_count	sflow.h	/^  uint32_t method_put_count;$/;"	m	struct:_SFLHTTP_counters	access:public
_SFLHTTP_counters::method_trace_count	sflow.h	/^  uint32_t method_trace_count;$/;"	m	struct:_SFLHTTP_counters	access:public
_SFLHTTP_counters::status_1XX_count	sflow.h	/^  uint32_t status_1XX_count;$/;"	m	struct:_SFLHTTP_counters	access:public
_SFLHTTP_counters::status_2XX_count	sflow.h	/^  uint32_t status_2XX_count;$/;"	m	struct:_SFLHTTP_counters	access:public
_SFLHTTP_counters::status_3XX_count	sflow.h	/^  uint32_t status_3XX_count;$/;"	m	struct:_SFLHTTP_counters	access:public
_SFLHTTP_counters::status_4XX_count	sflow.h	/^  uint32_t status_4XX_count;$/;"	m	struct:_SFLHTTP_counters	access:public
_SFLHTTP_counters::status_5XX_count	sflow.h	/^  uint32_t status_5XX_count;$/;"	m	struct:_SFLHTTP_counters	access:public
_SFLHTTP_counters::status_other_count	sflow.h	/^  uint32_t status_other_count;$/;"	m	struct:_SFLHTTP_counters	access:public
_SFLHostId	sflow.h	/^typedef struct _SFLHostId {$/;"	s
_SFLHostId::hostname	sflow.h	/^  SFLString hostname;$/;"	m	struct:_SFLHostId	access:public
_SFLHostId::machine_type	sflow.h	/^  uint32_t machine_type; \/* enum SFLMachine_type *\/$/;"	m	struct:_SFLHostId	access:public
_SFLHostId::os_name	sflow.h	/^  uint32_t os_name;      \/* enum SFLOS_name *\/$/;"	m	struct:_SFLHostId	access:public
_SFLHostId::os_release	sflow.h	/^  SFLString os_release;  \/* max len 32 bytes *\/$/;"	m	struct:_SFLHostId	access:public
_SFLHostId::uuid	sflow.h	/^  u_char uuid[16];$/;"	m	struct:_SFLHostId	access:public
_SFLHost_cpu_counters	sflow.h	/^typedef struct _SFLHost_cpu_counters {$/;"	s
_SFLHost_cpu_counters::contexts	sflow.h	/^  uint32_t contexts;   \/* context switch count *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
_SFLHost_cpu_counters::cpu_idle	sflow.h	/^  uint32_t cpu_idle;   \/* idle time (ms) *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
_SFLHost_cpu_counters::cpu_intr	sflow.h	/^  uint32_t cpu_intr;   \/* time servicing interrupts (ms) *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
_SFLHost_cpu_counters::cpu_nice	sflow.h	/^  uint32_t cpu_nice;   \/* time executing niced processs (ms) *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
_SFLHost_cpu_counters::cpu_num	sflow.h	/^  uint32_t cpu_num;    \/* # CPU cores *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
_SFLHost_cpu_counters::cpu_sintr	sflow.h	/^  uint32_t cpu_sintr;  \/* time servicing softirqs (ms) *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
_SFLHost_cpu_counters::cpu_speed	sflow.h	/^  uint32_t cpu_speed;  \/* speed in MHz of CPU *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
_SFLHost_cpu_counters::cpu_system	sflow.h	/^  uint32_t cpu_system; \/* time executing kernel mode processes (ms) *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
_SFLHost_cpu_counters::cpu_user	sflow.h	/^  uint32_t cpu_user;   \/* time executing in user mode processes (ms) *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
_SFLHost_cpu_counters::cpu_wio	sflow.h	/^  uint32_t cpu_wio;    \/* time waiting for I\/O to complete (ms) *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
_SFLHost_cpu_counters::interrupts	sflow.h	/^  uint32_t interrupts; \/* interrupt count *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
_SFLHost_cpu_counters::load_fifteen	sflow.h	/^  float load_fifteen;  \/* 15 minute load avg. *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
_SFLHost_cpu_counters::load_five	sflow.h	/^  float load_five;     \/* 5 minute load avg. *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
_SFLHost_cpu_counters::load_one	sflow.h	/^  float load_one;      \/* 1 minute load avg. *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
_SFLHost_cpu_counters::proc_run	sflow.h	/^  uint32_t proc_run;   \/* running threads *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
_SFLHost_cpu_counters::proc_total	sflow.h	/^  uint32_t proc_total; \/* total threads *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
_SFLHost_cpu_counters::uptime	sflow.h	/^  uint32_t uptime;     \/* seconds since last reboot *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
_SFLHost_dsk_counters	sflow.h	/^typedef struct _SFLHost_dsk_counters {$/;"	s
_SFLHost_dsk_counters::bytes_read	sflow.h	/^  uint64_t bytes_read;      \/* bytes read *\/$/;"	m	struct:_SFLHost_dsk_counters	access:public
_SFLHost_dsk_counters::bytes_written	sflow.h	/^  uint64_t bytes_written;   \/* bytes written *\/$/;"	m	struct:_SFLHost_dsk_counters	access:public
_SFLHost_dsk_counters::disk_free	sflow.h	/^  uint64_t disk_free;$/;"	m	struct:_SFLHost_dsk_counters	access:public
_SFLHost_dsk_counters::disk_total	sflow.h	/^  uint64_t disk_total;$/;"	m	struct:_SFLHost_dsk_counters	access:public
_SFLHost_dsk_counters::part_max_used	sflow.h	/^  uint32_t part_max_used;   \/* as percent * 100, so 100==1% *\/$/;"	m	struct:_SFLHost_dsk_counters	access:public
_SFLHost_dsk_counters::read_time	sflow.h	/^  uint32_t read_time;       \/* read time (ms) *\/$/;"	m	struct:_SFLHost_dsk_counters	access:public
_SFLHost_dsk_counters::reads	sflow.h	/^  uint32_t reads;           \/* reads issued *\/$/;"	m	struct:_SFLHost_dsk_counters	access:public
_SFLHost_dsk_counters::write_time	sflow.h	/^  uint32_t write_time;      \/* write time (ms) *\/$/;"	m	struct:_SFLHost_dsk_counters	access:public
_SFLHost_dsk_counters::writes	sflow.h	/^  uint32_t writes;          \/* writes completed *\/$/;"	m	struct:_SFLHost_dsk_counters	access:public
_SFLHost_mem_counters	sflow.h	/^typedef struct _SFLHost_mem_counters {$/;"	s
_SFLHost_mem_counters::mem_buffers	sflow.h	/^  uint64_t mem_buffers;  \/* buffers bytes *\/$/;"	m	struct:_SFLHost_mem_counters	access:public
_SFLHost_mem_counters::mem_cached	sflow.h	/^  uint64_t mem_cached;   \/* cached bytes *\/$/;"	m	struct:_SFLHost_mem_counters	access:public
_SFLHost_mem_counters::mem_free	sflow.h	/^  uint64_t mem_free;     \/* free bytes *\/$/;"	m	struct:_SFLHost_mem_counters	access:public
_SFLHost_mem_counters::mem_shared	sflow.h	/^  uint64_t mem_shared;   \/* shared bytes *\/$/;"	m	struct:_SFLHost_mem_counters	access:public
_SFLHost_mem_counters::mem_total	sflow.h	/^  uint64_t mem_total;    \/* total bytes *\/$/;"	m	struct:_SFLHost_mem_counters	access:public
_SFLHost_mem_counters::page_in	sflow.h	/^  uint32_t page_in;      \/* page in count *\/$/;"	m	struct:_SFLHost_mem_counters	access:public
_SFLHost_mem_counters::page_out	sflow.h	/^  uint32_t page_out;     \/* page out count *\/$/;"	m	struct:_SFLHost_mem_counters	access:public
_SFLHost_mem_counters::swap_free	sflow.h	/^  uint64_t swap_free;    \/* swap free bytes *\/$/;"	m	struct:_SFLHost_mem_counters	access:public
_SFLHost_mem_counters::swap_in	sflow.h	/^  uint32_t swap_in;      \/* swap in count *\/$/;"	m	struct:_SFLHost_mem_counters	access:public
_SFLHost_mem_counters::swap_out	sflow.h	/^  uint32_t swap_out;     \/* swap out count *\/$/;"	m	struct:_SFLHost_mem_counters	access:public
_SFLHost_mem_counters::swap_total	sflow.h	/^  uint64_t swap_total;   \/* swap total bytes *\/$/;"	m	struct:_SFLHost_mem_counters	access:public
_SFLHost_nio_counters	sflow.h	/^typedef struct _SFLHost_nio_counters {$/;"	s
_SFLHost_nio_counters::bytes_in	sflow.h	/^  uint64_t bytes_in;$/;"	m	struct:_SFLHost_nio_counters	access:public
_SFLHost_nio_counters::bytes_out	sflow.h	/^  uint64_t bytes_out;$/;"	m	struct:_SFLHost_nio_counters	access:public
_SFLHost_nio_counters::drops_in	sflow.h	/^  uint32_t drops_in;$/;"	m	struct:_SFLHost_nio_counters	access:public
_SFLHost_nio_counters::drops_out	sflow.h	/^  uint32_t drops_out;$/;"	m	struct:_SFLHost_nio_counters	access:public
_SFLHost_nio_counters::errs_in	sflow.h	/^  uint32_t errs_in;$/;"	m	struct:_SFLHost_nio_counters	access:public
_SFLHost_nio_counters::errs_out	sflow.h	/^  uint32_t errs_out;$/;"	m	struct:_SFLHost_nio_counters	access:public
_SFLHost_nio_counters::pkts_in	sflow.h	/^  uint32_t pkts_in;$/;"	m	struct:_SFLHost_nio_counters	access:public
_SFLHost_nio_counters::pkts_out	sflow.h	/^  uint32_t pkts_out;$/;"	m	struct:_SFLHost_nio_counters	access:public
_SFLHost_parent	sflow.h	/^typedef struct _SFLHost_parent {$/;"	s
_SFLHost_parent::dsClass	sflow.h	/^  uint32_t dsClass;       \/* sFlowDataSource class *\/$/;"	m	struct:_SFLHost_parent	access:public
_SFLHost_parent::dsIndex	sflow.h	/^  uint32_t dsIndex;       \/* sFlowDataSource index *\/$/;"	m	struct:_SFLHost_parent	access:public
_SFLHost_vrt_cpu_counters	sflow.h	/^typedef struct _SFLHost_vrt_cpu_counters {$/;"	s
_SFLHost_vrt_cpu_counters::cpuCount	sflow.h	/^   uint32_t cpuCount;    \/* number of virtual CPUs for the domain *\/$/;"	m	struct:_SFLHost_vrt_cpu_counters	access:public
_SFLHost_vrt_cpu_counters::cpuTime	sflow.h	/^   uint32_t cpuTime;     \/* the CPU time used in mS *\/$/;"	m	struct:_SFLHost_vrt_cpu_counters	access:public
_SFLHost_vrt_cpu_counters::state	sflow.h	/^   uint32_t state;       \/* virtDomainState *\/$/;"	m	struct:_SFLHost_vrt_cpu_counters	access:public
_SFLHost_vrt_dsk_counters	sflow.h	/^typedef struct _SFLHost_vrt_dsk_counters {$/;"	s
_SFLHost_vrt_dsk_counters::allocation	sflow.h	/^  uint64_t allocation; \/* current allocation in bytes *\/$/;"	m	struct:_SFLHost_vrt_dsk_counters	access:public
_SFLHost_vrt_dsk_counters::available	sflow.h	/^  uint64_t available;  \/* remaining free bytes *\/$/;"	m	struct:_SFLHost_vrt_dsk_counters	access:public
_SFLHost_vrt_dsk_counters::capacity	sflow.h	/^  uint64_t capacity;   \/* logical size in bytes *\/$/;"	m	struct:_SFLHost_vrt_dsk_counters	access:public
_SFLHost_vrt_dsk_counters::errs	sflow.h	/^  uint32_t errs;        \/* read\/write errors *\/$/;"	m	struct:_SFLHost_vrt_dsk_counters	access:public
_SFLHost_vrt_dsk_counters::rd_bytes	sflow.h	/^  uint64_t rd_bytes;   \/* number of read bytes *\/$/;"	m	struct:_SFLHost_vrt_dsk_counters	access:public
_SFLHost_vrt_dsk_counters::rd_req	sflow.h	/^  uint32_t rd_req;     \/* number of read requests *\/$/;"	m	struct:_SFLHost_vrt_dsk_counters	access:public
_SFLHost_vrt_dsk_counters::wr_bytes	sflow.h	/^  uint64_t wr_bytes;   \/* number of  written bytes *\/$/;"	m	struct:_SFLHost_vrt_dsk_counters	access:public
_SFLHost_vrt_dsk_counters::wr_req	sflow.h	/^  uint32_t wr_req;     \/* number of write requests *\/$/;"	m	struct:_SFLHost_vrt_dsk_counters	access:public
_SFLHost_vrt_mem_counters	sflow.h	/^typedef struct _SFLHost_vrt_mem_counters {$/;"	s
_SFLHost_vrt_mem_counters::maxMemory	sflow.h	/^  uint64_t maxMemory;   \/* memory in bytes allowed *\/$/;"	m	struct:_SFLHost_vrt_mem_counters	access:public
_SFLHost_vrt_mem_counters::memory	sflow.h	/^  uint64_t memory;      \/* memory in bytes used by domain *\/$/;"	m	struct:_SFLHost_vrt_mem_counters	access:public
_SFLHost_vrt_nio_counters	sflow.h	/^typedef struct _SFLHost_vrt_nio_counters {$/;"	s
_SFLHost_vrt_nio_counters::bytes_in	sflow.h	/^  uint64_t bytes_in;$/;"	m	struct:_SFLHost_vrt_nio_counters	access:public
_SFLHost_vrt_nio_counters::bytes_out	sflow.h	/^  uint64_t bytes_out;$/;"	m	struct:_SFLHost_vrt_nio_counters	access:public
_SFLHost_vrt_nio_counters::drops_in	sflow.h	/^  uint32_t drops_in;$/;"	m	struct:_SFLHost_vrt_nio_counters	access:public
_SFLHost_vrt_nio_counters::drops_out	sflow.h	/^  uint32_t drops_out;$/;"	m	struct:_SFLHost_vrt_nio_counters	access:public
_SFLHost_vrt_nio_counters::errs_in	sflow.h	/^  uint32_t errs_in;$/;"	m	struct:_SFLHost_vrt_nio_counters	access:public
_SFLHost_vrt_nio_counters::errs_out	sflow.h	/^  uint32_t errs_out;$/;"	m	struct:_SFLHost_vrt_nio_counters	access:public
_SFLHost_vrt_nio_counters::pkts_in	sflow.h	/^  uint32_t pkts_in;$/;"	m	struct:_SFLHost_vrt_nio_counters	access:public
_SFLHost_vrt_nio_counters::pkts_out	sflow.h	/^  uint32_t pkts_out;$/;"	m	struct:_SFLHost_vrt_nio_counters	access:public
_SFLHost_vrt_node_counters	sflow.h	/^typedef struct _SFLHost_vrt_node_counters {$/;"	s
_SFLHost_vrt_node_counters::cpus	sflow.h	/^   uint32_t cpus;          \/* the number of active CPUs *\/$/;"	m	struct:_SFLHost_vrt_node_counters	access:public
_SFLHost_vrt_node_counters::memory	sflow.h	/^   uint64_t memory;        \/* memory size in bytes *\/$/;"	m	struct:_SFLHost_vrt_node_counters	access:public
_SFLHost_vrt_node_counters::memory_free	sflow.h	/^   uint64_t memory_free;   \/* unassigned memory in bytes *\/$/;"	m	struct:_SFLHost_vrt_node_counters	access:public
_SFLHost_vrt_node_counters::mhz	sflow.h	/^   uint32_t mhz;           \/* expected CPU frequency *\/$/;"	m	struct:_SFLHost_vrt_node_counters	access:public
_SFLHost_vrt_node_counters::num_domains	sflow.h	/^   uint32_t num_domains;   \/* number of active domains *\/$/;"	m	struct:_SFLHost_vrt_node_counters	access:public
_SFLIf_counters	sflow.h	/^typedef struct _SFLIf_counters {$/;"	s
_SFLIf_counters::ifDirection	sflow.h	/^  uint32_t ifDirection;        \/* Derived from MAU MIB (RFC 2668)$/;"	m	struct:_SFLIf_counters	access:public
_SFLIf_counters::ifInBroadcastPkts	sflow.h	/^  uint32_t ifInBroadcastPkts;$/;"	m	struct:_SFLIf_counters	access:public
_SFLIf_counters::ifInDiscards	sflow.h	/^  uint32_t ifInDiscards;$/;"	m	struct:_SFLIf_counters	access:public
_SFLIf_counters::ifInErrors	sflow.h	/^  uint32_t ifInErrors;$/;"	m	struct:_SFLIf_counters	access:public
_SFLIf_counters::ifInMulticastPkts	sflow.h	/^  uint32_t ifInMulticastPkts;$/;"	m	struct:_SFLIf_counters	access:public
_SFLIf_counters::ifInOctets	sflow.h	/^  uint64_t ifInOctets;$/;"	m	struct:_SFLIf_counters	access:public
_SFLIf_counters::ifInUcastPkts	sflow.h	/^  uint32_t ifInUcastPkts;$/;"	m	struct:_SFLIf_counters	access:public
_SFLIf_counters::ifInUnknownProtos	sflow.h	/^  uint32_t ifInUnknownProtos;$/;"	m	struct:_SFLIf_counters	access:public
_SFLIf_counters::ifIndex	sflow.h	/^  uint32_t ifIndex;$/;"	m	struct:_SFLIf_counters	access:public
_SFLIf_counters::ifOutBroadcastPkts	sflow.h	/^  uint32_t ifOutBroadcastPkts;$/;"	m	struct:_SFLIf_counters	access:public
_SFLIf_counters::ifOutDiscards	sflow.h	/^  uint32_t ifOutDiscards;$/;"	m	struct:_SFLIf_counters	access:public
_SFLIf_counters::ifOutErrors	sflow.h	/^  uint32_t ifOutErrors;$/;"	m	struct:_SFLIf_counters	access:public
_SFLIf_counters::ifOutMulticastPkts	sflow.h	/^  uint32_t ifOutMulticastPkts;$/;"	m	struct:_SFLIf_counters	access:public
_SFLIf_counters::ifOutOctets	sflow.h	/^  uint64_t ifOutOctets;$/;"	m	struct:_SFLIf_counters	access:public
_SFLIf_counters::ifOutUcastPkts	sflow.h	/^  uint32_t ifOutUcastPkts;$/;"	m	struct:_SFLIf_counters	access:public
_SFLIf_counters::ifPromiscuousMode	sflow.h	/^  uint32_t ifPromiscuousMode;$/;"	m	struct:_SFLIf_counters	access:public
_SFLIf_counters::ifSpeed	sflow.h	/^  uint64_t ifSpeed;$/;"	m	struct:_SFLIf_counters	access:public
_SFLIf_counters::ifStatus	sflow.h	/^  uint32_t ifStatus;           \/* bit field with the following bits assigned:$/;"	m	struct:_SFLIf_counters	access:public
_SFLIf_counters::ifType	sflow.h	/^  uint32_t ifType;$/;"	m	struct:_SFLIf_counters	access:public
_SFLJMX_counters	sflow.h	/^typedef struct _SFLJMX_counters {$/;"	s
_SFLJMX_counters::cls_loaded	sflow.h	/^  uint32_t cls_loaded;$/;"	m	struct:_SFLJMX_counters	access:public
_SFLJMX_counters::cls_total	sflow.h	/^  uint32_t cls_total;$/;"	m	struct:_SFLJMX_counters	access:public
_SFLJMX_counters::cls_unloaded	sflow.h	/^  uint32_t cls_unloaded;$/;"	m	struct:_SFLJMX_counters	access:public
_SFLJMX_counters::comp_ms	sflow.h	/^  uint32_t comp_ms;$/;"	m	struct:_SFLJMX_counters	access:public
_SFLJMX_counters::fds_max	sflow.h	/^  uint32_t fds_max;$/;"	m	struct:_SFLJMX_counters	access:public
_SFLJMX_counters::fds_open	sflow.h	/^  uint32_t fds_open;$/;"	m	struct:_SFLJMX_counters	access:public
_SFLJMX_counters::gc_count	sflow.h	/^  uint32_t gc_count;$/;"	m	struct:_SFLJMX_counters	access:public
_SFLJMX_counters::gc_ms	sflow.h	/^  uint32_t gc_ms;$/;"	m	struct:_SFLJMX_counters	access:public
_SFLJMX_counters::hmem_committed	sflow.h	/^  uint64_t hmem_committed;$/;"	m	struct:_SFLJMX_counters	access:public
_SFLJMX_counters::hmem_initial	sflow.h	/^  uint64_t hmem_initial;$/;"	m	struct:_SFLJMX_counters	access:public
_SFLJMX_counters::hmem_max	sflow.h	/^  uint64_t hmem_max;$/;"	m	struct:_SFLJMX_counters	access:public
_SFLJMX_counters::hmem_used	sflow.h	/^  uint64_t hmem_used;$/;"	m	struct:_SFLJMX_counters	access:public
_SFLJMX_counters::nhmem_committed	sflow.h	/^  uint64_t nhmem_committed;$/;"	m	struct:_SFLJMX_counters	access:public
_SFLJMX_counters::nhmem_initial	sflow.h	/^  uint64_t nhmem_initial;$/;"	m	struct:_SFLJMX_counters	access:public
_SFLJMX_counters::nhmem_max	sflow.h	/^  uint64_t nhmem_max;$/;"	m	struct:_SFLJMX_counters	access:public
_SFLJMX_counters::nhmem_used	sflow.h	/^  uint64_t nhmem_used;$/;"	m	struct:_SFLJMX_counters	access:public
_SFLJMX_counters::thread_daemon	sflow.h	/^  uint32_t thread_daemon;$/;"	m	struct:_SFLJMX_counters	access:public
_SFLJMX_counters::thread_live	sflow.h	/^  uint32_t thread_live;$/;"	m	struct:_SFLJMX_counters	access:public
_SFLJMX_counters::thread_started	sflow.h	/^  uint32_t thread_started;$/;"	m	struct:_SFLJMX_counters	access:public
_SFLJVM_ID	sflow.h	/^typedef struct _SFLJVM_ID {$/;"	s
_SFLJVM_ID::vm_name	sflow.h	/^  SFLString vm_name;$/;"	m	struct:_SFLJVM_ID	access:public
_SFLJVM_ID::vm_vendor	sflow.h	/^  SFLString vm_vendor;$/;"	m	struct:_SFLJVM_ID	access:public
_SFLJVM_ID::vm_version	sflow.h	/^  SFLString vm_version;$/;"	m	struct:_SFLJVM_ID	access:public
_SFLLabelStack	sflow.h	/^typedef struct _SFLLabelStack {$/;"	s
_SFLLabelStack::depth	sflow.h	/^  uint32_t depth;$/;"	m	struct:_SFLLabelStack	access:public
_SFLLabelStack::stack	sflow.h	/^  uint32_t *stack; \/* first entry is top of stack - see RFC 3032 for encoding *\/$/;"	m	struct:_SFLLabelStack	access:public
_SFLMacAddress	sflow.h	/^typedef struct _SFLMacAddress {$/;"	s
_SFLMacAddress::mac	sflow.h	/^  uint8_t mac[8];$/;"	m	struct:_SFLMacAddress	access:public
_SFLMemcache_counters	sflow.h	/^typedef struct _SFLMemcache_counters {$/;"	s
_SFLMemcache_counters::accepting_conns	sflow.h	/^   uint32_t accepting_conns;$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::auth_cmds	sflow.h	/^   uint32_t auth_cmds;$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::auth_errors	sflow.h	/^   uint32_t auth_errors;$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::bytes	sflow.h	/^   uint64_t bytes;$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::bytes_read	sflow.h	/^   uint64_t bytes_read;$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::bytes_written	sflow.h	/^   uint64_t bytes_written;$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::cas_badval	sflow.h	/^   uint32_t cas_badval;$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::cas_hits	sflow.h	/^   uint32_t cas_hits;$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::cas_misses	sflow.h	/^   uint32_t cas_misses;$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::cmd_flush	sflow.h	/^   uint32_t cmd_flush;      \/* *\/$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::cmd_get	sflow.h	/^   uint32_t cmd_get;        \/* Cumulative number of retrieval requests *\/$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::cmd_set	sflow.h	/^   uint32_t cmd_set;        \/* Cumulative number of storage requests *\/$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::conn_yields	sflow.h	/^   uint32_t conn_yields;$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::connection_structures	sflow.h	/^   uint32_t connection_structures; \/* Number of connection structures$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::curr_connections	sflow.h	/^   uint32_t curr_connections; \/* Number of open connections *\/$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::curr_items	sflow.h	/^   uint32_t curr_items;$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::decr_hits	sflow.h	/^   uint32_t decr_hits;$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::decr_misses	sflow.h	/^   uint32_t decr_misses;$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::delete_hits	sflow.h	/^   uint32_t delete_hits;$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::delete_misses	sflow.h	/^   uint32_t delete_misses;$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::evictions	sflow.h	/^   uint32_t evictions;$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::get_hits	sflow.h	/^   uint32_t get_hits;       \/* Number of keys that have been requested and$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::get_misses	sflow.h	/^   uint32_t get_misses;     \/* Number of items that have been requested$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::incr_hits	sflow.h	/^   uint32_t incr_hits;$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::incr_misses	sflow.h	/^   uint32_t incr_misses;$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::limit_maxbytes	sflow.h	/^   uint32_t limit_maxbytes;$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::listen_disabled_num	sflow.h	/^   uint32_t listen_disabled_num;$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::rusage_system	sflow.h	/^   uint32_t rusage_system;  \/* Accumulated system time for this process (ms)*\/$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::rusage_user	sflow.h	/^   uint32_t rusage_user;    \/* Accumulated user time for this process (ms)*\/$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::threads	sflow.h	/^   uint32_t threads;$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::total_connections	sflow.h	/^   uint32_t total_connections; \/* Total number of connections opened since$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::total_items	sflow.h	/^   uint32_t total_items;$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLMemcache_counters::uptime	sflow.h	/^   uint32_t uptime;     \/* Number of seconds this server has been running *\/$/;"	m	struct:_SFLMemcache_counters	access:public
_SFLProcessor_counters	sflow.h	/^typedef struct _SFLProcessor_counters {$/;"	s
_SFLProcessor_counters::five_min_cpu	sflow.h	/^   uint32_t five_min_cpu;  \/* 5 minute average CPU utilization *\/$/;"	m	struct:_SFLProcessor_counters	access:public
_SFLProcessor_counters::five_sec_cpu	sflow.h	/^   uint32_t five_sec_cpu;  \/* 5 second average CPU utilization *\/$/;"	m	struct:_SFLProcessor_counters	access:public
_SFLProcessor_counters::free_memory	sflow.h	/^   uint64_t free_memory;   \/* free memory (in bytes) *\/$/;"	m	struct:_SFLProcessor_counters	access:public
_SFLProcessor_counters::one_min_cpu	sflow.h	/^   uint32_t one_min_cpu;   \/* 1 minute average CPU utilization *\/$/;"	m	struct:_SFLProcessor_counters	access:public
_SFLProcessor_counters::total_memory	sflow.h	/^   uint64_t total_memory;  \/* total memory (in bytes) *\/$/;"	m	struct:_SFLProcessor_counters	access:public
_SFLRadio_counters	sflow.h	/^typedef struct _SFLRadio_counters {$/;"	s
_SFLRadio_counters::elapsed_time	sflow.h	/^  uint32_t elapsed_time;         \/* elapsed time in ms *\/$/;"	m	struct:_SFLRadio_counters	access:public
_SFLRadio_counters::on_channel_busy_time	sflow.h	/^  uint32_t on_channel_busy_time; \/* time in ms spent on channel and busy *\/$/;"	m	struct:_SFLRadio_counters	access:public
_SFLRadio_counters::on_channel_time	sflow.h	/^  uint32_t on_channel_time;      \/* time in ms spent on channel *\/$/;"	m	struct:_SFLRadio_counters	access:public
_SFLSample_datagram_hdr	sflow.h	/^typedef struct _SFLSample_datagram_hdr {$/;"	s
_SFLSample_datagram_hdr::agent_address	sflow.h	/^  SFLAddress agent_address;        \/* IP address of sampling agent *\/$/;"	m	struct:_SFLSample_datagram_hdr	access:public
_SFLSample_datagram_hdr::datagram_version	sflow.h	/^  uint32_t datagram_version;      \/* (enum SFLDatagram_version) = VERSION5 = 5 *\/$/;"	m	struct:_SFLSample_datagram_hdr	access:public
_SFLSample_datagram_hdr::num_records	sflow.h	/^  uint32_t num_records;           \/* Number of tag-len-val flow\/counter records to follow *\/$/;"	m	struct:_SFLSample_datagram_hdr	access:public
_SFLSample_datagram_hdr::sequence_number	sflow.h	/^  uint32_t sequence_number;       \/* Incremented with each sample datagram$/;"	m	struct:_SFLSample_datagram_hdr	access:public
_SFLSample_datagram_hdr::sub_agent_id	sflow.h	/^  uint32_t sub_agent_id;          \/* Used to distinguishing between datagram$/;"	m	struct:_SFLSample_datagram_hdr	access:public
_SFLSample_datagram_hdr::uptime	sflow.h	/^  uint32_t uptime;                \/* Current time (in milliseconds since device$/;"	m	struct:_SFLSample_datagram_hdr	access:public
_SFLSampled_ethernet	sflow.h	/^typedef struct _SFLSampled_ethernet {$/;"	s
_SFLSampled_ethernet::dst_mac	sflow.h	/^  uint8_t dst_mac[8];$/;"	m	struct:_SFLSampled_ethernet	access:public
_SFLSampled_ethernet::eth_len	sflow.h	/^  uint32_t eth_len;       \/* The length of the MAC packet excluding $/;"	m	struct:_SFLSampled_ethernet	access:public
_SFLSampled_ethernet::eth_type	sflow.h	/^  uint32_t eth_type;$/;"	m	struct:_SFLSampled_ethernet	access:public
_SFLSampled_ethernet::src_mac	sflow.h	/^  uint8_t src_mac[8];    \/* 6 bytes + 2 pad *\/$/;"	m	struct:_SFLSampled_ethernet	access:public
_SFLSampled_header	sflow.h	/^typedef struct _SFLSampled_header {$/;"	s
_SFLSampled_header::frame_length	sflow.h	/^  uint32_t frame_length;               \/* Original length of packet before sampling *\/$/;"	m	struct:_SFLSampled_header	access:public
_SFLSampled_header::header_bytes	sflow.h	/^  uint8_t *header_bytes;               \/* Header bytes *\/$/;"	m	struct:_SFLSampled_header	access:public
_SFLSampled_header::header_length	sflow.h	/^  uint32_t header_length;              \/* length of sampled header bytes to follow *\/$/;"	m	struct:_SFLSampled_header	access:public
_SFLSampled_header::header_protocol	sflow.h	/^  uint32_t header_protocol;            \/* (enum SFLHeader_protocol) *\/$/;"	m	struct:_SFLSampled_header	access:public
_SFLSampled_header::stripped	sflow.h	/^  uint32_t stripped;                   \/* header\/trailer bytes stripped by sender *\/$/;"	m	struct:_SFLSampled_header	access:public
_SFLSampled_http	sflow.h	/^typedef struct _SFLSampled_http {$/;"	s
_SFLSampled_http::authuser	sflow.h	/^  SFLString authuser;      \/* RFC 1413 identity of user (<=32 bytes)*\/$/;"	m	struct:_SFLSampled_http	access:public
_SFLSampled_http::host	sflow.h	/^  SFLString host;          \/* Host value from request header (<= 64 bytes) *\/$/;"	m	struct:_SFLSampled_http	access:public
_SFLSampled_http::method	sflow.h	/^  SFLHTTP_method method;$/;"	m	struct:_SFLSampled_http	access:public
_SFLSampled_http::mimetype	sflow.h	/^  SFLString mimetype;      \/* Mime-Type (<=64 bytes) *\/$/;"	m	struct:_SFLSampled_http	access:public
_SFLSampled_http::protocol	sflow.h	/^  uint32_t protocol;       \/* 1.1=1001 *\/$/;"	m	struct:_SFLSampled_http	access:public
_SFLSampled_http::referrer	sflow.h	/^  SFLString referrer;      \/* Referer value from request header (<=255 bytes) *\/$/;"	m	struct:_SFLSampled_http	access:public
_SFLSampled_http::req_bytes	sflow.h	/^  uint64_t req_bytes;      \/* Content-Length of request *\/$/;"	m	struct:_SFLSampled_http	access:public
_SFLSampled_http::resp_bytes	sflow.h	/^  uint64_t resp_bytes;     \/* Content-Length of response *\/$/;"	m	struct:_SFLSampled_http	access:public
_SFLSampled_http::status	sflow.h	/^  uint32_t status;         \/* HTTP status code *\/$/;"	m	struct:_SFLSampled_http	access:public
_SFLSampled_http::uS	sflow.h	/^  uint32_t uS;             \/* duration of the operation (microseconds) *\/$/;"	m	struct:_SFLSampled_http	access:public
_SFLSampled_http::uri	sflow.h	/^  SFLString uri;           \/* URI exactly as it came from the client (up to 255 bytes) *\/$/;"	m	struct:_SFLSampled_http	access:public
_SFLSampled_http::useragent	sflow.h	/^  SFLString useragent;     \/* User-Agent value from request header (<= 128 bytes)*\/$/;"	m	struct:_SFLSampled_http	access:public
_SFLSampled_http::xff	sflow.h	/^  SFLString xff;           \/* X-Forwarded-For value from request header (<= 64 bytes)*\/$/;"	m	struct:_SFLSampled_http	access:public
_SFLSampled_ipv4	sflow.h	/^typedef struct _SFLSampled_ipv4 {$/;"	s
_SFLSampled_ipv4::dst_ip	sflow.h	/^  SFLIPv4 dst_ip; \/* Destination IP Address *\/$/;"	m	struct:_SFLSampled_ipv4	access:public
_SFLSampled_ipv4::dst_port	sflow.h	/^  uint32_t dst_port;    \/* TCP\/UDP destination port number or equivalent *\/$/;"	m	struct:_SFLSampled_ipv4	access:public
_SFLSampled_ipv4::length	sflow.h	/^  uint32_t length;      \/* The length of the IP packet$/;"	m	struct:_SFLSampled_ipv4	access:public
_SFLSampled_ipv4::protocol	sflow.h	/^  uint32_t protocol;    \/* IP Protocol type (for example, TCP = 6, UDP = 17) *\/$/;"	m	struct:_SFLSampled_ipv4	access:public
_SFLSampled_ipv4::src_ip	sflow.h	/^  SFLIPv4 src_ip; \/* Source IP Address *\/$/;"	m	struct:_SFLSampled_ipv4	access:public
_SFLSampled_ipv4::src_port	sflow.h	/^  uint32_t src_port;    \/* TCP\/UDP source port number or equivalent *\/$/;"	m	struct:_SFLSampled_ipv4	access:public
_SFLSampled_ipv4::tcp_flags	sflow.h	/^  uint32_t tcp_flags;   \/* TCP flags *\/$/;"	m	struct:_SFLSampled_ipv4	access:public
_SFLSampled_ipv4::tos	sflow.h	/^  uint32_t tos;         \/* IP type of service *\/$/;"	m	struct:_SFLSampled_ipv4	access:public
_SFLSampled_ipv6	sflow.h	/^typedef struct _SFLSampled_ipv6 {$/;"	s
_SFLSampled_ipv6::dst_ip	sflow.h	/^  SFLIPv6 dst_ip; \/* Destination IP Address *\/$/;"	m	struct:_SFLSampled_ipv6	access:public
_SFLSampled_ipv6::dst_port	sflow.h	/^  uint32_t dst_port;     \/* TCP\/UDP destination port number or equivalent *\/$/;"	m	struct:_SFLSampled_ipv6	access:public
_SFLSampled_ipv6::length	sflow.h	/^  uint32_t length;       \/* The length of the IP packet$/;"	m	struct:_SFLSampled_ipv6	access:public
_SFLSampled_ipv6::priority	sflow.h	/^  uint32_t priority;     \/* IP priority *\/$/;"	m	struct:_SFLSampled_ipv6	access:public
_SFLSampled_ipv6::protocol	sflow.h	/^  uint32_t protocol;     \/* IP Protocol type (for example, TCP = 6, UDP = 17) *\/$/;"	m	struct:_SFLSampled_ipv6	access:public
_SFLSampled_ipv6::src_ip	sflow.h	/^  SFLIPv6 src_ip; \/* Source IP Address *\/$/;"	m	struct:_SFLSampled_ipv6	access:public
_SFLSampled_ipv6::src_port	sflow.h	/^  uint32_t src_port;     \/* TCP\/UDP source port number or equivalent *\/$/;"	m	struct:_SFLSampled_ipv6	access:public
_SFLSampled_ipv6::tcp_flags	sflow.h	/^  uint32_t tcp_flags;    \/* TCP flags *\/$/;"	m	struct:_SFLSampled_ipv6	access:public
_SFLSampled_memcache	sflow.h	/^typedef struct _SFLSampled_memcache {$/;"	s
_SFLSampled_memcache::command	sflow.h	/^  uint32_t command;     \/* SFLMemcache_cmd *\/$/;"	m	struct:_SFLSampled_memcache	access:public
_SFLSampled_memcache::duration_uS	sflow.h	/^  uint32_t duration_uS;$/;"	m	struct:_SFLSampled_memcache	access:public
_SFLSampled_memcache::key	sflow.h	/^  SFLString key;        \/* up to 255 chars *\/$/;"	m	struct:_SFLSampled_memcache	access:public
_SFLSampled_memcache::nkeys	sflow.h	/^  uint32_t nkeys;$/;"	m	struct:_SFLSampled_memcache	access:public
_SFLSampled_memcache::protocol	sflow.h	/^  uint32_t protocol;    \/* SFLMemcache_prot *\/$/;"	m	struct:_SFLSampled_memcache	access:public
_SFLSampled_memcache::status	sflow.h	/^  uint32_t status;      \/* SFLMemcache_operation_status *\/$/;"	m	struct:_SFLSampled_memcache	access:public
_SFLSampled_memcache::value_bytes	sflow.h	/^  uint32_t value_bytes;$/;"	m	struct:_SFLSampled_memcache	access:public
_SFLString	sflow.h	/^typedef struct _SFLString {$/;"	s
_SFLString::len	sflow.h	/^  uint32_t len;$/;"	m	struct:_SFLString	access:public
_SFLString::str	sflow.h	/^  char *str;$/;"	m	struct:_SFLString	access:public
_SFLTokenring_counters	sflow.h	/^typedef struct _SFLTokenring_counters {$/;"	s
_SFLTokenring_counters::dot5StatsACErrors	sflow.h	/^  uint32_t dot5StatsACErrors;$/;"	m	struct:_SFLTokenring_counters	access:public
_SFLTokenring_counters::dot5StatsAbortTransErrors	sflow.h	/^  uint32_t dot5StatsAbortTransErrors;$/;"	m	struct:_SFLTokenring_counters	access:public
_SFLTokenring_counters::dot5StatsBurstErrors	sflow.h	/^  uint32_t dot5StatsBurstErrors;$/;"	m	struct:_SFLTokenring_counters	access:public
_SFLTokenring_counters::dot5StatsFrameCopiedErrors	sflow.h	/^  uint32_t dot5StatsFrameCopiedErrors;$/;"	m	struct:_SFLTokenring_counters	access:public
_SFLTokenring_counters::dot5StatsFreqErrors	sflow.h	/^  uint32_t dot5StatsFreqErrors;$/;"	m	struct:_SFLTokenring_counters	access:public
_SFLTokenring_counters::dot5StatsHardErrors	sflow.h	/^  uint32_t dot5StatsHardErrors;$/;"	m	struct:_SFLTokenring_counters	access:public
_SFLTokenring_counters::dot5StatsInternalErrors	sflow.h	/^  uint32_t dot5StatsInternalErrors;$/;"	m	struct:_SFLTokenring_counters	access:public
_SFLTokenring_counters::dot5StatsLineErrors	sflow.h	/^  uint32_t dot5StatsLineErrors;$/;"	m	struct:_SFLTokenring_counters	access:public
_SFLTokenring_counters::dot5StatsLobeWires	sflow.h	/^  uint32_t dot5StatsLobeWires;$/;"	m	struct:_SFLTokenring_counters	access:public
_SFLTokenring_counters::dot5StatsLostFrameErrors	sflow.h	/^  uint32_t dot5StatsLostFrameErrors;$/;"	m	struct:_SFLTokenring_counters	access:public
_SFLTokenring_counters::dot5StatsReceiveCongestions	sflow.h	/^  uint32_t dot5StatsReceiveCongestions;$/;"	m	struct:_SFLTokenring_counters	access:public
_SFLTokenring_counters::dot5StatsRecoverys	sflow.h	/^  uint32_t dot5StatsRecoverys;$/;"	m	struct:_SFLTokenring_counters	access:public
_SFLTokenring_counters::dot5StatsRemoves	sflow.h	/^  uint32_t dot5StatsRemoves;$/;"	m	struct:_SFLTokenring_counters	access:public
_SFLTokenring_counters::dot5StatsSignalLoss	sflow.h	/^  uint32_t dot5StatsSignalLoss;$/;"	m	struct:_SFLTokenring_counters	access:public
_SFLTokenring_counters::dot5StatsSingles	sflow.h	/^  uint32_t dot5StatsSingles;$/;"	m	struct:_SFLTokenring_counters	access:public
_SFLTokenring_counters::dot5StatsSoftErrors	sflow.h	/^  uint32_t dot5StatsSoftErrors;$/;"	m	struct:_SFLTokenring_counters	access:public
_SFLTokenring_counters::dot5StatsTokenErrors	sflow.h	/^  uint32_t dot5StatsTokenErrors;$/;"	m	struct:_SFLTokenring_counters	access:public
_SFLTokenring_counters::dot5StatsTransmitBeacons	sflow.h	/^  uint32_t dot5StatsTransmitBeacons;$/;"	m	struct:_SFLTokenring_counters	access:public
_SFLVg_counters	sflow.h	/^typedef struct _SFLVg_counters {$/;"	s
_SFLVg_counters::dot12HCInHighPriorityOctets	sflow.h	/^  uint64_t dot12HCInHighPriorityOctets;$/;"	m	struct:_SFLVg_counters	access:public
_SFLVg_counters::dot12HCInNormPriorityOctets	sflow.h	/^  uint64_t dot12HCInNormPriorityOctets;$/;"	m	struct:_SFLVg_counters	access:public
_SFLVg_counters::dot12HCOutHighPriorityOctets	sflow.h	/^  uint64_t dot12HCOutHighPriorityOctets;$/;"	m	struct:_SFLVg_counters	access:public
_SFLVg_counters::dot12InDataErrors	sflow.h	/^  uint32_t dot12InDataErrors;$/;"	m	struct:_SFLVg_counters	access:public
_SFLVg_counters::dot12InHighPriorityFrames	sflow.h	/^  uint32_t dot12InHighPriorityFrames;$/;"	m	struct:_SFLVg_counters	access:public
_SFLVg_counters::dot12InHighPriorityOctets	sflow.h	/^  uint64_t dot12InHighPriorityOctets;$/;"	m	struct:_SFLVg_counters	access:public
_SFLVg_counters::dot12InIPMErrors	sflow.h	/^  uint32_t dot12InIPMErrors;$/;"	m	struct:_SFLVg_counters	access:public
_SFLVg_counters::dot12InNormPriorityFrames	sflow.h	/^  uint32_t dot12InNormPriorityFrames;$/;"	m	struct:_SFLVg_counters	access:public
_SFLVg_counters::dot12InNormPriorityOctets	sflow.h	/^  uint64_t dot12InNormPriorityOctets;$/;"	m	struct:_SFLVg_counters	access:public
_SFLVg_counters::dot12InNullAddressedFrames	sflow.h	/^  uint32_t dot12InNullAddressedFrames;$/;"	m	struct:_SFLVg_counters	access:public
_SFLVg_counters::dot12InOversizeFrameErrors	sflow.h	/^  uint32_t dot12InOversizeFrameErrors;$/;"	m	struct:_SFLVg_counters	access:public
_SFLVg_counters::dot12OutHighPriorityFrames	sflow.h	/^  uint32_t dot12OutHighPriorityFrames;$/;"	m	struct:_SFLVg_counters	access:public
_SFLVg_counters::dot12OutHighPriorityOctets	sflow.h	/^  uint64_t dot12OutHighPriorityOctets;$/;"	m	struct:_SFLVg_counters	access:public
_SFLVg_counters::dot12TransitionIntoTrainings	sflow.h	/^  uint32_t dot12TransitionIntoTrainings;$/;"	m	struct:_SFLVg_counters	access:public
_SFLVlan_counters	sflow.h	/^typedef struct _SFLVlan_counters {$/;"	s
_SFLVlan_counters::broadcastPkts	sflow.h	/^  uint32_t broadcastPkts;$/;"	m	struct:_SFLVlan_counters	access:public
_SFLVlan_counters::discards	sflow.h	/^  uint32_t discards;$/;"	m	struct:_SFLVlan_counters	access:public
_SFLVlan_counters::multicastPkts	sflow.h	/^  uint32_t multicastPkts;$/;"	m	struct:_SFLVlan_counters	access:public
_SFLVlan_counters::octets	sflow.h	/^  uint64_t octets;$/;"	m	struct:_SFLVlan_counters	access:public
_SFLVlan_counters::ucastPkts	sflow.h	/^  uint32_t ucastPkts;$/;"	m	struct:_SFLVlan_counters	access:public
_SFLVlan_counters::vlan_id	sflow.h	/^  uint32_t vlan_id;$/;"	m	struct:_SFLVlan_counters	access:public
_SFLWifi_counters	sflow.h	/^typedef struct _SFLWifi_counters {$/;"	s
_SFLWifi_counters::dot11ACKFailureCount	sflow.h	/^  uint32_t dot11ACKFailureCount;$/;"	m	struct:_SFLWifi_counters	access:public
_SFLWifi_counters::dot11AssociatedStationCount	sflow.h	/^  uint32_t dot11AssociatedStationCount;$/;"	m	struct:_SFLWifi_counters	access:public
_SFLWifi_counters::dot11FCSErrorCount	sflow.h	/^  uint32_t dot11FCSErrorCount;$/;"	m	struct:_SFLWifi_counters	access:public
_SFLWifi_counters::dot11FailedCount	sflow.h	/^  uint32_t dot11FailedCount;$/;"	m	struct:_SFLWifi_counters	access:public
_SFLWifi_counters::dot11FrameDuplicateCount	sflow.h	/^  uint32_t dot11FrameDuplicateCount;$/;"	m	struct:_SFLWifi_counters	access:public
_SFLWifi_counters::dot11MulticastReceivedFrameCount	sflow.h	/^  uint32_t dot11MulticastReceivedFrameCount;$/;"	m	struct:_SFLWifi_counters	access:public
_SFLWifi_counters::dot11MulticastTransmittedFrameCount	sflow.h	/^  uint32_t dot11MulticastTransmittedFrameCount;$/;"	m	struct:_SFLWifi_counters	access:public
_SFLWifi_counters::dot11MultipleRetryCount	sflow.h	/^  uint32_t dot11MultipleRetryCount;$/;"	m	struct:_SFLWifi_counters	access:public
_SFLWifi_counters::dot11QoSCFPollsLostCount	sflow.h	/^  uint32_t dot11QoSCFPollsLostCount;$/;"	m	struct:_SFLWifi_counters	access:public
_SFLWifi_counters::dot11QoSCFPollsReceivedCount	sflow.h	/^  uint32_t dot11QoSCFPollsReceivedCount;$/;"	m	struct:_SFLWifi_counters	access:public
_SFLWifi_counters::dot11QoSCFPollsUnusableCount	sflow.h	/^  uint32_t dot11QoSCFPollsUnusableCount;$/;"	m	struct:_SFLWifi_counters	access:public
_SFLWifi_counters::dot11QoSCFPollsUnusedCount	sflow.h	/^  uint32_t dot11QoSCFPollsUnusedCount;$/;"	m	struct:_SFLWifi_counters	access:public
_SFLWifi_counters::dot11QoSDiscardedFragmentCount	sflow.h	/^  uint32_t dot11QoSDiscardedFragmentCount;$/;"	m	struct:_SFLWifi_counters	access:public
_SFLWifi_counters::dot11RTSFailureCount	sflow.h	/^  uint32_t dot11RTSFailureCount;$/;"	m	struct:_SFLWifi_counters	access:public
_SFLWifi_counters::dot11RTSSuccessCount	sflow.h	/^  uint32_t dot11RTSSuccessCount;$/;"	m	struct:_SFLWifi_counters	access:public
_SFLWifi_counters::dot11ReceivedFragmentCount	sflow.h	/^  uint32_t dot11ReceivedFragmentCount;$/;"	m	struct:_SFLWifi_counters	access:public
_SFLWifi_counters::dot11RetryCount	sflow.h	/^  uint32_t dot11RetryCount;$/;"	m	struct:_SFLWifi_counters	access:public
_SFLWifi_counters::dot11TransmittedFragmentCount	sflow.h	/^  uint32_t dot11TransmittedFragmentCount;$/;"	m	struct:_SFLWifi_counters	access:public
_SFLWifi_counters::dot11TransmittedFrameCount	sflow.h	/^  uint32_t dot11TransmittedFrameCount;$/;"	m	struct:_SFLWifi_counters	access:public
_SFLWifi_counters::dot11WEPUndecryptableCount	sflow.h	/^  uint32_t dot11WEPUndecryptableCount;$/;"	m	struct:_SFLWifi_counters	access:public
_SFSample	sflowtool.c	/^typedef struct _SFSample {$/;"	s	file:
_SFSample::agentSubId	sflowtool.c	/^  uint32_t agentSubId;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::agent_addr	sflowtool.c	/^  SFLAddress agent_addr;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::bgp_nextHop	sflowtool.c	/^  SFLAddress bgp_nextHop;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::communities	sflowtool.c	/^  uint32_t *communities;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::communities_len	sflowtool.c	/^  uint32_t communities_len;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::counterBlockVersion	sflowtool.c	/^  uint32_t counterBlockVersion;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::datagramVersion	sflowtool.c	/^  uint32_t datagramVersion;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::datap	sflowtool.c	/^  uint32_t *datap;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::dcd_dport	sflowtool.c	/^  uint32_t dcd_dport;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::dcd_ipProtocol	sflowtool.c	/^  uint32_t dcd_ipProtocol;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::dcd_ipTTL	sflowtool.c	/^  uint32_t dcd_ipTTL;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::dcd_ipTos	sflowtool.c	/^  uint32_t dcd_ipTos;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::dcd_sport	sflowtool.c	/^  uint32_t dcd_sport;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::dcd_tcpFlags	sflowtool.c	/^  uint32_t dcd_tcpFlags;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::dropEvents	sflowtool.c	/^  uint32_t dropEvents;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::ds_class	sflowtool.c	/^  uint32_t ds_class;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::ds_index	sflowtool.c	/^  uint32_t ds_index;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::dstMask	sflowtool.c	/^  uint32_t dstMask;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::dst_as	sflowtool.c	/^  uint32_t dst_as;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::dst_as_path	sflowtool.c	/^  uint32_t *dst_as_path;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::dst_as_path_len	sflowtool.c	/^  uint32_t dst_as_path_len;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::dst_peer_as	sflowtool.c	/^  uint32_t dst_peer_as;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::dst_user	sflowtool.c	/^  char dst_user[SA_MAX_EXTENDED_USER_LEN+1];$/;"	m	struct:_SFSample	file:	access:public
_SFSample::dst_user_charset	sflowtool.c	/^  uint32_t dst_user_charset;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::dst_user_len	sflowtool.c	/^  uint32_t dst_user_len;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::endp	sflowtool.c	/^  u_char *endp;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::env	sflowtool.c	/^  jmp_buf env;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::eth_dst	sflowtool.c	/^  u_char eth_dst[8];$/;"	m	struct:_SFSample	file:	access:public
_SFSample::eth_len	sflowtool.c	/^  uint32_t eth_len;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::eth_src	sflowtool.c	/^  u_char eth_src[8];$/;"	m	struct:_SFSample	file:	access:public
_SFSample::eth_type	sflowtool.c	/^  uint32_t eth_type;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::extended_data_tag	sflowtool.c	/^  uint32_t extended_data_tag;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::gotIPV4	sflowtool.c	/^  int gotIPV4;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::gotIPV4Struct	sflowtool.c	/^  int gotIPV4Struct;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::gotIPV6	sflowtool.c	/^  int gotIPV6;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::gotIPV6Struct	sflowtool.c	/^  int gotIPV6Struct;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::header	sflowtool.c	/^  u_char *header;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::headerLen	sflowtool.c	/^  int headerLen;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::headerProtocol	sflowtool.c	/^  uint32_t headerProtocol;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::host	sflowtool.c	/^  char host[SA_MAX_EXTENDED_HOST_LEN+1];$/;"	m	struct:_SFSample	file:	access:public
_SFSample::host_len	sflowtool.c	/^  uint32_t host_len;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::ifCounters	sflowtool.c	/^  SFLIf_counters ifCounters;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::in_priority	sflowtool.c	/^  uint32_t in_priority;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::in_vlan	sflowtool.c	/^  uint32_t in_vlan;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::inputPort	sflowtool.c	/^  uint32_t inputPort;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::inputPortFormat	sflowtool.c	/^  uint32_t inputPortFormat;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::internalPriority	sflowtool.c	/^  uint32_t internalPriority;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::ip_fragmentOffset	sflowtool.c	/^  uint32_t ip_fragmentOffset;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::ipdst	sflowtool.c	/^  SFLAddress ipdst;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::ipsrc	sflowtool.c	/^  SFLAddress ipsrc;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::localpref	sflowtool.c	/^  uint32_t localpref;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::meanSkipCount	sflowtool.c	/^  uint32_t meanSkipCount;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::mpls_nextHop	sflowtool.c	/^  SFLAddress mpls_nextHop;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::my_as	sflowtool.c	/^  uint32_t my_as;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::nat_dst	sflowtool.c	/^  SFLAddress nat_dst;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::nat_src	sflowtool.c	/^  SFLAddress nat_src;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::nextHop	sflowtool.c	/^  SFLAddress nextHop;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::num_extended	sflowtool.c	/^  uint32_t num_extended;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::offsetToIPV4	sflowtool.c	/^  int offsetToIPV4;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::offsetToIPV6	sflowtool.c	/^  int offsetToIPV6;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::offsetToPayload	sflowtool.c	/^  int offsetToPayload;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::out_priority	sflowtool.c	/^  uint32_t out_priority;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::out_vlan	sflowtool.c	/^  uint32_t out_vlan;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::outputPort	sflowtool.c	/^  uint32_t outputPort;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::outputPortFormat	sflowtool.c	/^  uint32_t outputPortFormat;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::packet_data_tag	sflowtool.c	/^  uint32_t packet_data_tag;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::pcapTimestamp	sflowtool.c	/^  time_t pcapTimestamp;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::rawSample	sflowtool.c	/^  u_char *rawSample;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::rawSampleLen	sflowtool.c	/^  uint32_t rawSampleLen;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::samplePool	sflowtool.c	/^  uint32_t samplePool;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::sampleType	sflowtool.c	/^  uint32_t sampleType;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::sampledPacketSize	sflowtool.c	/^  uint32_t sampledPacketSize;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::samplesGenerated	sflowtool.c	/^  uint32_t samplesGenerated;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::sequenceNo	sflowtool.c	/^  uint32_t sequenceNo;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::sourceIP	sflowtool.c	/^  SFLAddress sourceIP;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::srcMask	sflowtool.c	/^  uint32_t srcMask;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::src_as	sflowtool.c	/^  uint32_t src_as;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::src_peer_as	sflowtool.c	/^  uint32_t src_peer_as;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::src_user	sflowtool.c	/^  char src_user[SA_MAX_EXTENDED_USER_LEN+1];$/;"	m	struct:_SFSample	file:	access:public
_SFSample::src_user_charset	sflowtool.c	/^  uint32_t src_user_charset;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::src_user_len	sflowtool.c	/^  uint32_t src_user_len;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::statsSamplingInterval	sflowtool.c	/^  uint32_t statsSamplingInterval;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::stripped	sflowtool.c	/^  uint32_t stripped;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::sysUpTime	sflowtool.c	/^  uint32_t sysUpTime;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::udp_pduLen	sflowtool.c	/^  uint32_t udp_pduLen;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::url	sflowtool.c	/^  char url[SA_MAX_EXTENDED_URL_LEN+1];$/;"	m	struct:_SFSample	file:	access:public
_SFSample::url_direction	sflowtool.c	/^  uint32_t url_direction;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::url_len	sflowtool.c	/^  uint32_t url_len;$/;"	m	struct:_SFSample	file:	access:public
_SFSample::vlanFilterReject	sflowtool.c	/^  int vlanFilterReject;$/;"	m	struct:_SFSample	file:	access:public
__anon11::application	sflow.h	/^  SFLString application;$/;"	m	struct:__anon11	access:public
__anon11::attributes	sflow.h	/^  SFLString attributes;   \/* specific attributes associated operation *\/$/;"	m	struct:__anon11	access:public
__anon11::operation	sflow.h	/^  SFLString operation;    \/* type of operation (e.g. authorization, payment) *\/$/;"	m	struct:__anon11	access:public
__anon12::context	sflow.h	/^  SFLSampled_APP_CTXT context; \/* attributes describing the operation *\/$/;"	m	struct:__anon12	access:public
__anon12::duration_uS	sflow.h	/^  uint32_t duration_uS;        \/* duration of the operation (microseconds) *\/$/;"	m	struct:__anon12	access:public
__anon12::req_bytes	sflow.h	/^  uint64_t req_bytes;          \/* size of request body (exclude headers) *\/$/;"	m	struct:__anon12	access:public
__anon12::resp_bytes	sflow.h	/^  uint64_t resp_bytes;         \/* size of response body (exclude headers) *\/$/;"	m	struct:__anon12	access:public
__anon12::status	sflow.h	/^  EnumSFLAPPStatus status;     \/* status code *\/$/;"	m	struct:__anon12	access:public
__anon12::status_descr	sflow.h	/^  SFLString status_descr;      \/* additional text describing status (e.g. "unknown client") *\/$/;"	m	struct:__anon12	access:public
__anon13::actor	sflow.h	/^  SFLString actor;$/;"	m	struct:__anon13	access:public
__anon14::application	sflow.h	/^  SFLString application;$/;"	m	struct:__anon14	access:public
__anon14::conns_max	sflow.h	/^  uint32_t conns_max;$/;"	m	struct:__anon14	access:public
__anon14::conns_used	sflow.h	/^  uint32_t conns_used;$/;"	m	struct:__anon14	access:public
__anon14::fds_max	sflow.h	/^  uint32_t fds_max;$/;"	m	struct:__anon14	access:public
__anon14::fds_used	sflow.h	/^  uint32_t fds_used;$/;"	m	struct:__anon14	access:public
__anon14::mem_max	sflow.h	/^  uint64_t mem_max;$/;"	m	struct:__anon14	access:public
__anon14::mem_used	sflow.h	/^  uint64_t mem_used;$/;"	m	struct:__anon14	access:public
__anon14::rusage_system	sflow.h	/^  uint32_t rusage_system; \/* in milliseconds *\/$/;"	m	struct:__anon14	access:public
__anon14::rusage_user	sflow.h	/^  uint32_t rusage_user;   \/* in milliseconds *\/$/;"	m	struct:__anon14	access:public
__anon14::workers_active	sflow.h	/^  uint32_t workers_active;$/;"	m	struct:__anon14	access:public
__anon14::workers_idle	sflow.h	/^  uint32_t workers_idle;$/;"	m	struct:__anon14	access:public
__anon14::workers_max	sflow.h	/^  uint32_t workers_max;$/;"	m	struct:__anon14	access:public
__anon3::addr	sflow.h	/^    uint32_t addr;$/;"	m	struct:__anon3	access:public
__anon4::addr	sflow.h	/^    u_char addr[16];$/;"	m	struct:__anon4	access:public
abs_builddir	Makefile	/^abs_builddir = \/home\/bradomyn\/projects\/sFlow\/sflowtool-3.22\/src$/;"	m
abs_srcdir	Makefile	/^abs_srcdir = \/home\/bradomyn\/projects\/sFlow\/sflowtool-3.22\/src$/;"	m
abs_top_builddir	Makefile	/^abs_top_builddir = \/home\/bradomyn\/projects\/sFlow\/sflowtool-3.22$/;"	m
abs_top_srcdir	Makefile	/^abs_top_srcdir = \/home\/bradomyn\/projects\/sFlow\/sflowtool-3.22$/;"	m
ac_ct_CC	Makefile	/^ac_ct_CC = gcc$/;"	m
accepting_conns	sflow.h	/^   uint32_t accepting_conns;$/;"	m	struct:_SFLMemcache_counters	access:public
actor	sflow.h	/^  SFLString actor;$/;"	m	struct:__anon13	access:public
actor	sflowtool.c	/^  char actor[SFLAPP_MAX_ACTOR_LEN];$/;"	l
actualLen	sflowtool.c	/^  uint32_t actualLen = (u_char *)sample->datap - start;$/;"	l
adaptors	sflow.h	/^  SFLAdaptor **adaptors;$/;"	m	struct:_SFLAdaptorList	access:public
adaptors	sflow.h	/^  SFLAdaptorList *adaptors;$/;"	m	union:_SFLCounters_type	access:public
addForwardingTarget	sflowtool.c	/^static int addForwardingTarget(char *hostandport)$/;"	f	file:	signature:(char *hostandport)
addr	sflow.h	/^    u_char addr[16];$/;"	m	struct:__anon4	access:public
addr	sflow.h	/^    uint32_t addr;$/;"	m	struct:__anon3	access:public
addr	sflowtool.c	/^    struct sockaddr_in addr;$/;"	l
addr	sflowtool.c	/^  struct sockaddr_in addr;$/;"	m	struct:_SFForwardingTarget	typeref:struct:_SFForwardingTarget::sockaddr_in	file:	access:public
address	sflow.h	/^  SFLAddress_value address;$/;"	m	struct:_SFLAddress	access:public
address	sflowtool.h	/^  INMAddress_value address;$/;"	m	struct:_INMAddress	access:public
adjustedLen	sflowtool.c	/^  uint32_t adjustedLen = ((len + 3) >> 2) << 2;$/;"	l
agentIP	sflowtool.c	/^  char agentIP[51], srcIP[51], dstIP[51];$/;"	l
agentIP	sflowtool.c	/^  char agentIP[51];$/;"	l
agentSubId	sflowtool.c	/^  uint32_t agentSubId;$/;"	m	struct:_SFSample	file:	access:public
agent_addr	sflowtool.c	/^  SFLAddress agent_addr;$/;"	m	struct:_SFSample	file:	access:public
agent_address	sflow.h	/^  SFLAddress agent_address;        \/* IP address of sampling agent *\/$/;"	m	struct:_SFLSample_datagram_hdr	access:public
agent_address	sflowtool.h	/^  INMAddress agent_address;        \/* IP address of sampling agent *\/$/;"	m	struct:_INMSample_datagram_hdr	access:public
aggregation	sflow.h	/^  SFLExtended_aggregation aggregation;$/;"	m	union:_SFLFlow_type	access:public
alen	sflowtool.c	/^  int alen, cc;$/;"	l
all	Makefile	/^all: all-am$/;"	t
all-am	Makefile	/^all-am: Makefile $(PROGRAMS)$/;"	t
allocation	sflow.h	/^  uint64_t allocation; \/* current allocation in bytes *\/$/;"	m	struct:_SFLHost_vrt_dsk_counters	access:public
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/configure.in$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__depfiles_maybe	Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__installdirs	Makefile	/^am__installdirs = "$(DESTDIR)$(bindir)"$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__mv	Makefile	/^am__mv = mv -f$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__tar	Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__untar	Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am_sflowtool_OBJECTS	Makefile	/^am_sflowtool_OBJECTS = sflowtool.$(OBJEXT)$/;"	m
ans	sflowtool.c	/^  uint32_t ans = *(sample->datap)++;$/;"	l
answer	sflowtool.c	/^  u_short answer;$/;"	l
app	sflow.h	/^  SFLAPP_counters app;$/;"	m	union:_SFLCounters_type	access:public
app	sflow.h	/^  SFLSampled_APP app;$/;"	m	union:_SFLFlow_type	access:public
appActor	sflow.h	/^  SFLSampled_APP_ACTOR appActor;$/;"	m	union:_SFLFlow_type	access:public
appCtxt	sflow.h	/^  SFLSampled_APP_CTXT appCtxt;$/;"	m	union:_SFLFlow_type	access:public
appResource	sflow.h	/^  SFLAPPResource_counters appResource;$/;"	m	union:_SFLCounters_type	access:public
application	sflow.h	/^  SFLString application;$/;"	m	struct:_SFLAPP_counters	access:public
application	sflow.h	/^  SFLString application;$/;"	m	struct:__anon11	access:public
application	sflow.h	/^  SFLString application;$/;"	m	struct:__anon14	access:public
application	sflowtool.c	/^  char application[SFLAPP_MAX_APPLICATION_LEN];$/;"	l
arg	sflowtool.c	/^  int arg = 1, in = 0;$/;"	l
args	sflowtool.c	/^    va_list args;$/;"	l
as	sflow.h	/^  uint32_t as;                             \/* AS number for this gateway *\/$/;"	m	struct:_SFLExtended_gateway	access:public
as	sflow.h	/^  } as;$/;"	m	struct:_SFLExtended_as_path_segment	typeref:union:_SFLExtended_as_path_segment::__anon5	access:public
as	sflowtool.h	/^  uint32_t as;                             \/* AS number for this gateway *\/$/;"	m	struct:_INMExtended_gateway_v2	access:public
as	sflowtool.h	/^  uint32_t as;                             \/* AS number for this gateway *\/$/;"	m	struct:_INMExtended_gateway_v4	access:public
as	sflowtool.h	/^  } as;$/;"	m	struct:_INMExtended_as_path_segment	typeref:union:_INMExtended_as_path_segment::__anon1	access:public
asNumber	sflowtool.c	/^	uint32_t asNumber;$/;"	l
attributes	sflow.h	/^  SFLString attributes;   \/* specific attributes associated operation *\/$/;"	m	struct:__anon11	access:public
attributes	sflowtool.c	/^  char attributes[SFLAPP_MAX_ATTRIBUTES_LEN];$/;"	l
auth_cmds	sflow.h	/^   uint32_t auth_cmds;$/;"	m	struct:_SFLMemcache_counters	access:public
auth_errors	sflow.h	/^   uint32_t auth_errors;$/;"	m	struct:_SFLMemcache_counters	access:public
authuser	sflow.h	/^  SFLString authuser;      \/* RFC 1413 identity of user (<=32 bytes)*\/$/;"	m	struct:_SFLSampled_http	access:public
authuser	sflowtool.c	/^  char authuser[SFL_MAX_HTTP_AUTHUSER+1];$/;"	l
available	sflow.h	/^  uint64_t available;  \/* remaining free bytes *\/$/;"	m	struct:_SFLHost_vrt_dsk_counters	access:public
b	sflowtool.c	/^    u_char *b = address->address.ip_v6.addr;$/;"	l
b	sflowtool.c	/^  int b = 0, i = 0;$/;"	l
bgp_nextHop	sflowtool.c	/^  SFLAddress bgp_nextHop;$/;"	m	struct:_SFSample	file:	access:public
bin2hex	sflowtool.c	/^static u_char bin2hex(int nib) { return (nib < 10) ? ('0' + nib) : ('A' - 10 + nib); }$/;"	f	file:	signature:(int nib)
bin_PROGRAMS	Makefile	/^bin_PROGRAMS = sflowtool$(EXEEXT)$/;"	m
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
broadcastPkts	sflow.h	/^  uint32_t broadcastPkts;$/;"	m	struct:_SFLVlan_counters	access:public
broadcastPkts	sflowtool.h	/^  uint32_t broadcastPkts;$/;"	m	struct:_INMVlan_counters	access:public
bssid	sflow.h	/^  char  bssid[6];             \/* BSSID *\/$/;"	m	struct:_SFLExtended_wifi_tx	access:public
bssid	sflow.h	/^  char bssid[6];    \/* BSSID *\/$/;"	m	struct:_SFLExtended_wifi_rx	access:public
bssid	sflowtool.c	/^  u_char *bssid;$/;"	l
buf	sflowtool.c	/^      char buf[101];$/;"	l
buf	sflowtool.c	/^      char buf[51];$/;"	l
buf	sflowtool.c	/^    char buf[51];$/;"	l
buf	sflowtool.c	/^  char buf[2048];$/;"	l
buf	sflowtool.c	/^  char buf[51];$/;"	l
buf	sflowtool.c	/^  char buf[MAX_PKT_SIZ];$/;"	l
buf	sflowtool.c	/^  u_char buf[2048];$/;"	l
build	Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build_alias	Makefile	/^build_alias = $/;"	m
build_cpu	Makefile	/^build_cpu = x86_64$/;"	m
build_os	Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_vendor	Makefile	/^build_vendor = unknown$/;"	m
builddir	Makefile	/^builddir = .$/;"	m
byte	sflowtool.c	/^    u_char byte;$/;"	l
bytes	sflow.h	/^   uint64_t bytes;$/;"	m	struct:_SFLMemcache_counters	access:public
bytes	sflowtool.c	/^  int bytes = 0;$/;"	l
bytes	sflowtool.c	/^  uint32_t bytes;$/;"	l
bytes	sflowtool.c	/^  uint32_t bytes;$/;"	m	struct:_NFFlow5	file:	access:public
bytesSent	sflowtool.c	/^      int bytesSent;$/;"	l
bytes_in	sflow.h	/^  uint64_t bytes_in;$/;"	m	struct:_SFLHost_nio_counters	access:public
bytes_in	sflow.h	/^  uint64_t bytes_in;$/;"	m	struct:_SFLHost_vrt_nio_counters	access:public
bytes_out	sflow.h	/^  uint64_t bytes_out;$/;"	m	struct:_SFLHost_nio_counters	access:public
bytes_out	sflow.h	/^  uint64_t bytes_out;$/;"	m	struct:_SFLHost_vrt_nio_counters	access:public
bytes_read	sflow.h	/^   uint64_t bytes_read;$/;"	m	struct:_SFLMemcache_counters	access:public
bytes_read	sflow.h	/^  uint64_t bytes_read;      \/* bytes read *\/$/;"	m	struct:_SFLHost_dsk_counters	access:public
bytes_written	sflow.h	/^   uint64_t bytes_written;$/;"	m	struct:_SFLMemcache_counters	access:public
bytes_written	sflow.h	/^  uint64_t bytes_written;   \/* bytes written *\/$/;"	m	struct:_SFLHost_dsk_counters	access:public
c	sflowtool.c	/^  register char c, *r = in, *w = out;$/;"	l
capacity	sflow.h	/^  uint32_t capacity;$/;"	m	struct:_SFLAdaptorList	access:public
capacity	sflow.h	/^  uint64_t capacity;   \/* logical size in bytes *\/$/;"	m	struct:_SFLHost_vrt_dsk_counters	access:public
caplen	sflowtool.c	/^  uint32_t caplen;	\/* length of portion present *\/$/;"	m	struct:pcap_pkthdr	file:	access:public
cas_badval	sflow.h	/^   uint32_t cas_badval;$/;"	m	struct:_SFLMemcache_counters	access:public
cas_hits	sflow.h	/^   uint32_t cas_hits;$/;"	m	struct:_SFLMemcache_counters	access:public
cas_misses	sflow.h	/^   uint32_t cas_misses;$/;"	m	struct:_SFLMemcache_counters	access:public
cc	sflowtool.c	/^  int alen, cc;$/;"	l
channel	sflow.h	/^  uint32_t channel;         \/* channel number *\/$/;"	m	struct:_SFLExtended_wifi_tx	access:public
channel	sflow.h	/^  uint32_t channel;       \/* channel number *\/$/;"	m	struct:_SFLExtended_wifi_rx	access:public
check	Makefile	/^check: check-am$/;"	t
check	sflowtool.c	/^    uint16_t check;$/;"	m	struct:myiphdr	file:	access:public
check-am	Makefile	/^check-am: all-am$/;"	t
cipherSuite	sflow.h	/^  SFLCipherSuite cipherSuite;$/;"	m	struct:_SFLExtended_wifi_payload	access:public
clean	Makefile	/^clean: clean-am$/;"	t
clean-am	Makefile	/^clean-am: clean-binPROGRAMS clean-generic mostlyclean-am$/;"	t
clean-binPROGRAMS	Makefile	/^clean-binPROGRAMS:$/;"	t
clean-generic	Makefile	/^clean-generic:$/;"	t
client	sflowtool.c	/^  char client[64];$/;"	m	struct:_SFCommonLogFormat	file:	access:public
cls_loaded	sflow.h	/^  uint32_t cls_loaded;$/;"	m	struct:_SFLJMX_counters	access:public
cls_total	sflow.h	/^  uint32_t cls_total;$/;"	m	struct:_SFLJMX_counters	access:public
cls_unloaded	sflow.h	/^  uint32_t cls_unloaded;$/;"	m	struct:_SFLJMX_counters	access:public
cmd_flush	sflow.h	/^   uint32_t cmd_flush;      \/* *\/$/;"	m	struct:_SFLMemcache_counters	access:public
cmd_get	sflow.h	/^   uint32_t cmd_get;        \/* Cumulative number of retrieval requests *\/$/;"	m	struct:_SFLMemcache_counters	access:public
cmd_set	sflow.h	/^   uint32_t cmd_set;        \/* Cumulative number of storage requests *\/$/;"	m	struct:_SFLMemcache_counters	access:public
code	sflowtool.c	/^  uint8_t code;		\/* type sub-code *\/$/;"	m	struct:myicmphdr	file:	access:public
command	sflow.h	/^  uint32_t command;     \/* SFLMemcache_cmd *\/$/;"	m	struct:_SFLSampled_memcache	access:public
communities	sflow.h	/^  uint32_t *communities;                   \/* set of communities *\/$/;"	m	struct:_SFLExtended_gateway	access:public
communities	sflowtool.c	/^  uint32_t *communities;$/;"	m	struct:_SFSample	file:	access:public
communities	sflowtool.h	/^  uint32_t *communities;                   \/* set of communities *\/$/;"	m	struct:_INMExtended_gateway_v4	access:public
communities_len	sflowtool.c	/^  uint32_t communities_len;$/;"	m	struct:_SFSample	file:	access:public
communities_length	sflow.h	/^  uint32_t communities_length;             \/* number of communities *\/$/;"	m	struct:_SFLExtended_gateway	access:public
communities_length	sflowtool.h	/^  uint32_t communities_length;             \/* number of communities *\/$/;"	m	struct:_INMExtended_gateway_v4	access:public
comp_ms	sflow.h	/^  uint32_t comp_ms;$/;"	m	struct:_SFLJMX_counters	access:public
compat_prefix	sflowtool.c	/^    static char compat_prefix[] = { 0,0,0,0,0,0,0,0,0,0,0,0 };$/;"	l	file:
conn_yields	sflow.h	/^   uint32_t conn_yields;$/;"	m	struct:_SFLMemcache_counters	access:public
connection_structures	sflow.h	/^   uint32_t connection_structures; \/* Number of connection structures$/;"	m	struct:_SFLMemcache_counters	access:public
conns_max	sflow.h	/^  uint32_t conns_max;$/;"	m	struct:__anon14	access:public
conns_used	sflow.h	/^  uint32_t conns_used;$/;"	m	struct:__anon14	access:public
context	sflow.h	/^  SFLSampled_APP_CTXT context; \/* attributes describing the operation *\/$/;"	m	struct:__anon12	access:public
contexts	sflow.h	/^  uint32_t contexts;   \/* context switch count *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
control	sflowtool.c	/^  uint32_t control = (fc >> 2) & 3;$/;"	l
count	sflowtool.c	/^  uint16_t count;$/;"	m	struct:_NFFlowHdr5	file:	access:public
counterBlock	sflow.h	/^  SFLCounters_type counterBlock;$/;"	m	struct:_SFLCounters_sample_element	access:public
counterBlockVersion	sflowtool.c	/^  uint32_t counterBlockVersion;$/;"	m	struct:_SFSample	file:	access:public
counters	sflowtool.h	/^  INMCounters_type counters;    \/* Counter set for this interface type *\/$/;"	m	struct:_INMCounters_sample	access:public
counters_type_tag	sflowtool.h	/^  uint32_t counters_type_tag;  \/* Enum INMCounters_version *\/$/;"	m	struct:_INMCounters_sample	access:public
counterssample	sflowtool.h	/^  INMCounters_sample counterssample;$/;"	m	union:_INMSample_type	access:public
cpuCount	sflow.h	/^   uint32_t cpuCount;    \/* number of virtual CPUs for the domain *\/$/;"	m	struct:_SFLHost_vrt_cpu_counters	access:public
cpuTime	sflow.h	/^   uint32_t cpuTime;     \/* the CPU time used in mS *\/$/;"	m	struct:_SFLHost_vrt_cpu_counters	access:public
cpu_idle	sflow.h	/^  uint32_t cpu_idle;   \/* idle time (ms) *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
cpu_intr	sflow.h	/^  uint32_t cpu_intr;   \/* time servicing interrupts (ms) *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
cpu_nice	sflow.h	/^  uint32_t cpu_nice;   \/* time executing niced processs (ms) *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
cpu_num	sflow.h	/^  uint32_t cpu_num;    \/* # CPU cores *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
cpu_sintr	sflow.h	/^  uint32_t cpu_sintr;  \/* time servicing softirqs (ms) *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
cpu_speed	sflow.h	/^  uint32_t cpu_speed;  \/* speed in MHz of CPU *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
cpu_system	sflow.h	/^  uint32_t cpu_system; \/* time executing kernel mode processes (ms) *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
cpu_user	sflow.h	/^  uint32_t cpu_user;   \/* time executing in user mode processes (ms) *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
cpu_wio	sflow.h	/^  uint32_t cpu_wio;    \/* time waiting for I\/O to complete (ms) *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
cpus	sflow.h	/^   uint32_t cpus;          \/* the number of active CPUs *\/$/;"	m	struct:_SFLHost_vrt_node_counters	access:public
ctags	Makefile	/^ctags: CTAGS$/;"	t
curr_connections	sflow.h	/^   uint32_t curr_connections; \/* Number of open connections *\/$/;"	m	struct:_SFLMemcache_counters	access:public
curr_items	sflow.h	/^   uint32_t curr_items;$/;"	m	struct:_SFLMemcache_counters	access:public
daddr	sflowtool.c	/^    uint32_t daddr;$/;"	m	struct:myiphdr	file:	access:public
data	sflowtool.c	/^  u_char data[SPOOFSOURCE_SENDPACKET_SIZE];$/;"	m	struct:mySendPacket	file:	access:public
datadir	Makefile	/^datadir = ${datarootdir}$/;"	m
datagramVersion	sflowtool.c	/^  uint32_t datagramVersion;$/;"	m	struct:_SFSample	file:	access:public
datagram_version	sflow.h	/^  uint32_t datagram_version;      \/* (enum SFLDatagram_version) = VERSION5 = 5 *\/$/;"	m	struct:_SFLSample_datagram_hdr	access:public
datagram_version	sflowtool.h	/^  uint32_t datagram_version;      \/* (enum INMDatagram_version) = VERSION4 *\/$/;"	m	struct:_INMSample_datagram_hdr	access:public
datap	sflowtool.c	/^  uint32_t *datap;$/;"	m	struct:_SFSample	file:	access:public
datarootdir	Makefile	/^datarootdir = ${prefix}\/share$/;"	m
dcd_dport	sflowtool.c	/^  uint32_t dcd_dport;$/;"	m	struct:_SFSample	file:	access:public
dcd_ipProtocol	sflowtool.c	/^  uint32_t dcd_ipProtocol;$/;"	m	struct:_SFSample	file:	access:public
dcd_ipTTL	sflowtool.c	/^  uint32_t dcd_ipTTL;$/;"	m	struct:_SFSample	file:	access:public
dcd_ipTos	sflowtool.c	/^  uint32_t dcd_ipTos;$/;"	m	struct:_SFSample	file:	access:public
dcd_sport	sflowtool.c	/^  uint32_t dcd_sport;$/;"	m	struct:_SFSample	file:	access:public
dcd_tcpFlags	sflowtool.c	/^  uint32_t dcd_tcpFlags;$/;"	m	struct:_SFSample	file:	access:public
decode80211MAC	sflowtool.c	/^static void decode80211MAC(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
decodeIPLayer4	sflowtool.c	/^static void decodeIPLayer4(SFSample *sample, u_char *ptr) {$/;"	f	file:	signature:(SFSample *sample, u_char *ptr)
decodeIPV4	sflowtool.c	/^static void decodeIPV4(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
decodeIPV6	sflowtool.c	/^static void decodeIPV6(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
decodeLinkLayer	sflowtool.c	/^static void decodeLinkLayer(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
decr_hits	sflow.h	/^   uint32_t decr_hits;$/;"	m	struct:_SFLMemcache_counters	access:public
decr_misses	sflow.h	/^   uint32_t decr_misses;$/;"	m	struct:_SFLMemcache_counters	access:public
delete_hits	sflow.h	/^   uint32_t delete_hits;$/;"	m	struct:_SFLMemcache_counters	access:public
delete_misses	sflow.h	/^   uint32_t delete_misses;$/;"	m	struct:_SFLMemcache_counters	access:public
depcomp	Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depth	sflow.h	/^  uint32_t depth;$/;"	m	struct:_SFLLabelStack	access:public
dest	sflowtool.c	/^      struct sockaddr dest;$/;"	l
direction	sflow.h	/^  uint32_t direction;   \/* enum SFLExtended_url_direction *\/$/;"	m	struct:_SFLExtended_url	access:public
direction	sflowtool.h	/^  uint32_t direction; \/* enum INMExtended_url_direction *\/$/;"	m	struct:_INMExtended_url	access:public
disableNetFlowScale	sflowtool.c	/^  int disableNetFlowScale;$/;"	m	struct:_SFConfig	file:	access:public
discards	sflow.h	/^  uint32_t discards;$/;"	m	struct:_SFLVlan_counters	access:public
discards	sflowtool.h	/^  uint32_t discards;$/;"	m	struct:_INMVlan_counters	access:public
disk_free	sflow.h	/^  uint64_t disk_free;$/;"	m	struct:_SFLHost_dsk_counters	access:public
disk_total	sflow.h	/^  uint64_t disk_total;$/;"	m	struct:_SFLHost_dsk_counters	access:public
distclean	Makefile	/^distclean: distclean-am$/;"	t
distclean-am	Makefile	/^distclean-am: clean-am distclean-compile distclean-generic \\$/;"	t
distclean-compile	Makefile	/^distclean-compile:$/;"	t
distclean-generic	Makefile	/^distclean-generic:$/;"	t
distclean-tags	Makefile	/^distclean-tags:$/;"	t
distdir	Makefile	/^distdir: $(DISTFILES)$/;"	t
docdir	Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE}$/;"	m
dot11ACKFailureCount	sflow.h	/^  uint32_t dot11ACKFailureCount;$/;"	m	struct:_SFLWifi_counters	access:public
dot11AssociatedStationCount	sflow.h	/^  uint32_t dot11AssociatedStationCount;$/;"	m	struct:_SFLWifi_counters	access:public
dot11FCSErrorCount	sflow.h	/^  uint32_t dot11FCSErrorCount;$/;"	m	struct:_SFLWifi_counters	access:public
dot11FailedCount	sflow.h	/^  uint32_t dot11FailedCount;$/;"	m	struct:_SFLWifi_counters	access:public
dot11FrameDuplicateCount	sflow.h	/^  uint32_t dot11FrameDuplicateCount;$/;"	m	struct:_SFLWifi_counters	access:public
dot11MulticastReceivedFrameCount	sflow.h	/^  uint32_t dot11MulticastReceivedFrameCount;$/;"	m	struct:_SFLWifi_counters	access:public
dot11MulticastTransmittedFrameCount	sflow.h	/^  uint32_t dot11MulticastTransmittedFrameCount;$/;"	m	struct:_SFLWifi_counters	access:public
dot11MultipleRetryCount	sflow.h	/^  uint32_t dot11MultipleRetryCount;$/;"	m	struct:_SFLWifi_counters	access:public
dot11QoSCFPollsLostCount	sflow.h	/^  uint32_t dot11QoSCFPollsLostCount;$/;"	m	struct:_SFLWifi_counters	access:public
dot11QoSCFPollsReceivedCount	sflow.h	/^  uint32_t dot11QoSCFPollsReceivedCount;$/;"	m	struct:_SFLWifi_counters	access:public
dot11QoSCFPollsUnusableCount	sflow.h	/^  uint32_t dot11QoSCFPollsUnusableCount;$/;"	m	struct:_SFLWifi_counters	access:public
dot11QoSCFPollsUnusedCount	sflow.h	/^  uint32_t dot11QoSCFPollsUnusedCount;$/;"	m	struct:_SFLWifi_counters	access:public
dot11QoSDiscardedFragmentCount	sflow.h	/^  uint32_t dot11QoSDiscardedFragmentCount;$/;"	m	struct:_SFLWifi_counters	access:public
dot11RTSFailureCount	sflow.h	/^  uint32_t dot11RTSFailureCount;$/;"	m	struct:_SFLWifi_counters	access:public
dot11RTSSuccessCount	sflow.h	/^  uint32_t dot11RTSSuccessCount;$/;"	m	struct:_SFLWifi_counters	access:public
dot11ReceivedFragmentCount	sflow.h	/^  uint32_t dot11ReceivedFragmentCount;$/;"	m	struct:_SFLWifi_counters	access:public
dot11RetryCount	sflow.h	/^  uint32_t dot11RetryCount;$/;"	m	struct:_SFLWifi_counters	access:public
dot11TransmittedFragmentCount	sflow.h	/^  uint32_t dot11TransmittedFragmentCount;$/;"	m	struct:_SFLWifi_counters	access:public
dot11TransmittedFrameCount	sflow.h	/^  uint32_t dot11TransmittedFrameCount;$/;"	m	struct:_SFLWifi_counters	access:public
dot11WEPUndecryptableCount	sflow.h	/^  uint32_t dot11WEPUndecryptableCount;$/;"	m	struct:_SFLWifi_counters	access:public
dot12HCInHighPriorityOctets	sflow.h	/^  uint64_t dot12HCInHighPriorityOctets;$/;"	m	struct:_SFLVg_counters	access:public
dot12HCInHighPriorityOctets	sflowtool.h	/^  uint64_t dot12HCInHighPriorityOctets;$/;"	m	struct:_INMVg_specific_counters	access:public
dot12HCInNormPriorityOctets	sflow.h	/^  uint64_t dot12HCInNormPriorityOctets;$/;"	m	struct:_SFLVg_counters	access:public
dot12HCInNormPriorityOctets	sflowtool.h	/^  uint64_t dot12HCInNormPriorityOctets;$/;"	m	struct:_INMVg_specific_counters	access:public
dot12HCOutHighPriorityOctets	sflow.h	/^  uint64_t dot12HCOutHighPriorityOctets;$/;"	m	struct:_SFLVg_counters	access:public
dot12HCOutHighPriorityOctets	sflowtool.h	/^  uint64_t dot12HCOutHighPriorityOctets;$/;"	m	struct:_INMVg_specific_counters	access:public
dot12InDataErrors	sflow.h	/^  uint32_t dot12InDataErrors;$/;"	m	struct:_SFLVg_counters	access:public
dot12InDataErrors	sflowtool.h	/^  uint32_t dot12InDataErrors;$/;"	m	struct:_INMVg_specific_counters	access:public
dot12InHighPriorityFrames	sflow.h	/^  uint32_t dot12InHighPriorityFrames;$/;"	m	struct:_SFLVg_counters	access:public
dot12InHighPriorityFrames	sflowtool.h	/^  uint32_t dot12InHighPriorityFrames;$/;"	m	struct:_INMVg_specific_counters	access:public
dot12InHighPriorityOctets	sflow.h	/^  uint64_t dot12InHighPriorityOctets;$/;"	m	struct:_SFLVg_counters	access:public
dot12InHighPriorityOctets	sflowtool.h	/^  uint64_t dot12InHighPriorityOctets;$/;"	m	struct:_INMVg_specific_counters	access:public
dot12InIPMErrors	sflow.h	/^  uint32_t dot12InIPMErrors;$/;"	m	struct:_SFLVg_counters	access:public
dot12InIPMErrors	sflowtool.h	/^  uint32_t dot12InIPMErrors;$/;"	m	struct:_INMVg_specific_counters	access:public
dot12InNormPriorityFrames	sflow.h	/^  uint32_t dot12InNormPriorityFrames;$/;"	m	struct:_SFLVg_counters	access:public
dot12InNormPriorityFrames	sflowtool.h	/^  uint32_t dot12InNormPriorityFrames;$/;"	m	struct:_INMVg_specific_counters	access:public
dot12InNormPriorityOctets	sflow.h	/^  uint64_t dot12InNormPriorityOctets;$/;"	m	struct:_SFLVg_counters	access:public
dot12InNormPriorityOctets	sflowtool.h	/^  uint64_t dot12InNormPriorityOctets;$/;"	m	struct:_INMVg_specific_counters	access:public
dot12InNullAddressedFrames	sflow.h	/^  uint32_t dot12InNullAddressedFrames;$/;"	m	struct:_SFLVg_counters	access:public
dot12InNullAddressedFrames	sflowtool.h	/^  uint32_t dot12InNullAddressedFrames;$/;"	m	struct:_INMVg_specific_counters	access:public
dot12InOversizeFrameErrors	sflow.h	/^  uint32_t dot12InOversizeFrameErrors;$/;"	m	struct:_SFLVg_counters	access:public
dot12InOversizeFrameErrors	sflowtool.h	/^  uint32_t dot12InOversizeFrameErrors;$/;"	m	struct:_INMVg_specific_counters	access:public
dot12OutHighPriorityFrames	sflow.h	/^  uint32_t dot12OutHighPriorityFrames;$/;"	m	struct:_SFLVg_counters	access:public
dot12OutHighPriorityFrames	sflowtool.h	/^  uint32_t dot12OutHighPriorityFrames;$/;"	m	struct:_INMVg_specific_counters	access:public
dot12OutHighPriorityOctets	sflow.h	/^  uint64_t dot12OutHighPriorityOctets;$/;"	m	struct:_SFLVg_counters	access:public
dot12OutHighPriorityOctets	sflowtool.h	/^  uint64_t dot12OutHighPriorityOctets;$/;"	m	struct:_INMVg_specific_counters	access:public
dot12TransitionIntoTrainings	sflow.h	/^  uint32_t dot12TransitionIntoTrainings;$/;"	m	struct:_SFLVg_counters	access:public
dot12TransitionIntoTrainings	sflowtool.h	/^  uint32_t dot12TransitionIntoTrainings;$/;"	m	struct:_INMVg_specific_counters	access:public
dot3StatsAlignmentErrors	sflow.h	/^  uint32_t dot3StatsAlignmentErrors;$/;"	m	struct:_SFLEthernet_counters	access:public
dot3StatsAlignmentErrors	sflowtool.h	/^  uint32_t dot3StatsAlignmentErrors;$/;"	m	struct:_INMEthernet_specific_counters	access:public
dot3StatsCarrierSenseErrors	sflow.h	/^  uint32_t dot3StatsCarrierSenseErrors;$/;"	m	struct:_SFLEthernet_counters	access:public
dot3StatsCarrierSenseErrors	sflowtool.h	/^  uint32_t dot3StatsCarrierSenseErrors;$/;"	m	struct:_INMEthernet_specific_counters	access:public
dot3StatsDeferredTransmissions	sflow.h	/^  uint32_t dot3StatsDeferredTransmissions;$/;"	m	struct:_SFLEthernet_counters	access:public
dot3StatsDeferredTransmissions	sflowtool.h	/^  uint32_t dot3StatsDeferredTransmissions;$/;"	m	struct:_INMEthernet_specific_counters	access:public
dot3StatsExcessiveCollisions	sflow.h	/^  uint32_t dot3StatsExcessiveCollisions;$/;"	m	struct:_SFLEthernet_counters	access:public
dot3StatsExcessiveCollisions	sflowtool.h	/^  uint32_t dot3StatsExcessiveCollisions;$/;"	m	struct:_INMEthernet_specific_counters	access:public
dot3StatsFCSErrors	sflow.h	/^  uint32_t dot3StatsFCSErrors;$/;"	m	struct:_SFLEthernet_counters	access:public
dot3StatsFCSErrors	sflowtool.h	/^  uint32_t dot3StatsFCSErrors;$/;"	m	struct:_INMEthernet_specific_counters	access:public
dot3StatsFrameTooLongs	sflow.h	/^  uint32_t dot3StatsFrameTooLongs;$/;"	m	struct:_SFLEthernet_counters	access:public
dot3StatsFrameTooLongs	sflowtool.h	/^  uint32_t dot3StatsFrameTooLongs;$/;"	m	struct:_INMEthernet_specific_counters	access:public
dot3StatsInternalMacReceiveErrors	sflow.h	/^  uint32_t dot3StatsInternalMacReceiveErrors;$/;"	m	struct:_SFLEthernet_counters	access:public
dot3StatsInternalMacReceiveErrors	sflowtool.h	/^  uint32_t dot3StatsInternalMacReceiveErrors;$/;"	m	struct:_INMEthernet_specific_counters	access:public
dot3StatsInternalMacTransmitErrors	sflow.h	/^  uint32_t dot3StatsInternalMacTransmitErrors;$/;"	m	struct:_SFLEthernet_counters	access:public
dot3StatsInternalMacTransmitErrors	sflowtool.h	/^  uint32_t dot3StatsInternalMacTransmitErrors;$/;"	m	struct:_INMEthernet_specific_counters	access:public
dot3StatsLateCollisions	sflow.h	/^  uint32_t dot3StatsLateCollisions;$/;"	m	struct:_SFLEthernet_counters	access:public
dot3StatsLateCollisions	sflowtool.h	/^  uint32_t dot3StatsLateCollisions;$/;"	m	struct:_INMEthernet_specific_counters	access:public
dot3StatsMultipleCollisionFrames	sflow.h	/^  uint32_t dot3StatsMultipleCollisionFrames;$/;"	m	struct:_SFLEthernet_counters	access:public
dot3StatsMultipleCollisionFrames	sflowtool.h	/^  uint32_t dot3StatsMultipleCollisionFrames;$/;"	m	struct:_INMEthernet_specific_counters	access:public
dot3StatsSQETestErrors	sflow.h	/^  uint32_t dot3StatsSQETestErrors;$/;"	m	struct:_SFLEthernet_counters	access:public
dot3StatsSQETestErrors	sflowtool.h	/^  uint32_t dot3StatsSQETestErrors;$/;"	m	struct:_INMEthernet_specific_counters	access:public
dot3StatsSingleCollisionFrames	sflow.h	/^  uint32_t dot3StatsSingleCollisionFrames;$/;"	m	struct:_SFLEthernet_counters	access:public
dot3StatsSingleCollisionFrames	sflowtool.h	/^  uint32_t dot3StatsSingleCollisionFrames;$/;"	m	struct:_INMEthernet_specific_counters	access:public
dot3StatsSymbolErrors	sflow.h	/^  uint32_t dot3StatsSymbolErrors;$/;"	m	struct:_SFLEthernet_counters	access:public
dot3StatsSymbolErrors	sflowtool.h	/^  uint32_t dot3StatsSymbolErrors;$/;"	m	struct:_INMEthernet_specific_counters	access:public
dot5StatsACErrors	sflow.h	/^  uint32_t dot5StatsACErrors;$/;"	m	struct:_SFLTokenring_counters	access:public
dot5StatsACErrors	sflowtool.h	/^  uint32_t dot5StatsACErrors;$/;"	m	struct:_INMTokenring_specific_counters	access:public
dot5StatsAbortTransErrors	sflow.h	/^  uint32_t dot5StatsAbortTransErrors;$/;"	m	struct:_SFLTokenring_counters	access:public
dot5StatsAbortTransErrors	sflowtool.h	/^  uint32_t dot5StatsAbortTransErrors;$/;"	m	struct:_INMTokenring_specific_counters	access:public
dot5StatsBurstErrors	sflow.h	/^  uint32_t dot5StatsBurstErrors;$/;"	m	struct:_SFLTokenring_counters	access:public
dot5StatsBurstErrors	sflowtool.h	/^  uint32_t dot5StatsBurstErrors;$/;"	m	struct:_INMTokenring_specific_counters	access:public
dot5StatsFrameCopiedErrors	sflow.h	/^  uint32_t dot5StatsFrameCopiedErrors;$/;"	m	struct:_SFLTokenring_counters	access:public
dot5StatsFrameCopiedErrors	sflowtool.h	/^  uint32_t dot5StatsFrameCopiedErrors;$/;"	m	struct:_INMTokenring_specific_counters	access:public
dot5StatsFreqErrors	sflow.h	/^  uint32_t dot5StatsFreqErrors;$/;"	m	struct:_SFLTokenring_counters	access:public
dot5StatsFreqErrors	sflowtool.h	/^  uint32_t dot5StatsFreqErrors;$/;"	m	struct:_INMTokenring_specific_counters	access:public
dot5StatsHardErrors	sflow.h	/^  uint32_t dot5StatsHardErrors;$/;"	m	struct:_SFLTokenring_counters	access:public
dot5StatsHardErrors	sflowtool.h	/^  uint32_t dot5StatsHardErrors;$/;"	m	struct:_INMTokenring_specific_counters	access:public
dot5StatsInternalErrors	sflow.h	/^  uint32_t dot5StatsInternalErrors;$/;"	m	struct:_SFLTokenring_counters	access:public
dot5StatsInternalErrors	sflowtool.h	/^  uint32_t dot5StatsInternalErrors;$/;"	m	struct:_INMTokenring_specific_counters	access:public
dot5StatsLineErrors	sflow.h	/^  uint32_t dot5StatsLineErrors;$/;"	m	struct:_SFLTokenring_counters	access:public
dot5StatsLineErrors	sflowtool.h	/^  uint32_t dot5StatsLineErrors;$/;"	m	struct:_INMTokenring_specific_counters	access:public
dot5StatsLobeWires	sflow.h	/^  uint32_t dot5StatsLobeWires;$/;"	m	struct:_SFLTokenring_counters	access:public
dot5StatsLobeWires	sflowtool.h	/^  uint32_t dot5StatsLobeWires;$/;"	m	struct:_INMTokenring_specific_counters	access:public
dot5StatsLostFrameErrors	sflow.h	/^  uint32_t dot5StatsLostFrameErrors;$/;"	m	struct:_SFLTokenring_counters	access:public
dot5StatsLostFrameErrors	sflowtool.h	/^  uint32_t dot5StatsLostFrameErrors;$/;"	m	struct:_INMTokenring_specific_counters	access:public
dot5StatsReceiveCongestions	sflow.h	/^  uint32_t dot5StatsReceiveCongestions;$/;"	m	struct:_SFLTokenring_counters	access:public
dot5StatsReceiveCongestions	sflowtool.h	/^  uint32_t dot5StatsReceiveCongestions;$/;"	m	struct:_INMTokenring_specific_counters	access:public
dot5StatsRecoverys	sflow.h	/^  uint32_t dot5StatsRecoverys;$/;"	m	struct:_SFLTokenring_counters	access:public
dot5StatsRecoverys	sflowtool.h	/^  uint32_t dot5StatsRecoverys;$/;"	m	struct:_INMTokenring_specific_counters	access:public
dot5StatsRemoves	sflow.h	/^  uint32_t dot5StatsRemoves;$/;"	m	struct:_SFLTokenring_counters	access:public
dot5StatsRemoves	sflowtool.h	/^  uint32_t dot5StatsRemoves;$/;"	m	struct:_INMTokenring_specific_counters	access:public
dot5StatsSignalLoss	sflow.h	/^  uint32_t dot5StatsSignalLoss;$/;"	m	struct:_SFLTokenring_counters	access:public
dot5StatsSignalLoss	sflowtool.h	/^  uint32_t dot5StatsSignalLoss;$/;"	m	struct:_INMTokenring_specific_counters	access:public
dot5StatsSingles	sflow.h	/^  uint32_t dot5StatsSingles;$/;"	m	struct:_SFLTokenring_counters	access:public
dot5StatsSingles	sflowtool.h	/^  uint32_t dot5StatsSingles;$/;"	m	struct:_INMTokenring_specific_counters	access:public
dot5StatsSoftErrors	sflow.h	/^  uint32_t dot5StatsSoftErrors;$/;"	m	struct:_SFLTokenring_counters	access:public
dot5StatsSoftErrors	sflowtool.h	/^  uint32_t dot5StatsSoftErrors;$/;"	m	struct:_INMTokenring_specific_counters	access:public
dot5StatsTokenErrors	sflow.h	/^  uint32_t dot5StatsTokenErrors;$/;"	m	struct:_SFLTokenring_counters	access:public
dot5StatsTokenErrors	sflowtool.h	/^  uint32_t dot5StatsTokenErrors;$/;"	m	struct:_INMTokenring_specific_counters	access:public
dot5StatsTransmitBeacons	sflow.h	/^  uint32_t dot5StatsTransmitBeacons;$/;"	m	struct:_SFLTokenring_counters	access:public
dot5StatsTransmitBeacons	sflowtool.h	/^  uint32_t dot5StatsTransmitBeacons;$/;"	m	struct:_INMTokenring_specific_counters	access:public
dropEvents	sflowtool.c	/^  uint32_t dropEvents;$/;"	m	struct:_SFSample	file:	access:public
drops	sflow.h	/^  uint32_t drops;                \/* Number of times a packet was dropped due to$/;"	m	struct:_SFLFlow_sample	access:public
drops	sflow.h	/^  uint32_t drops;                \/* Number of times a packet was dropped due to$/;"	m	struct:_SFLFlow_sample_expanded	access:public
drops	sflowtool.h	/^  uint32_t drops;                \/* Number of times a packet was dropped due to$/;"	m	struct:_INMFlow_sample	access:public
drops_in	sflow.h	/^  uint32_t drops_in;$/;"	m	struct:_SFLHost_nio_counters	access:public
drops_in	sflow.h	/^  uint32_t drops_in;$/;"	m	struct:_SFLHost_vrt_nio_counters	access:public
drops_out	sflow.h	/^  uint32_t drops_out;$/;"	m	struct:_SFLHost_nio_counters	access:public
drops_out	sflow.h	/^  uint32_t drops_out;$/;"	m	struct:_SFLHost_vrt_nio_counters	access:public
dsClass	sflow.h	/^  uint32_t dsClass;       \/* sFlowDataSource class *\/$/;"	m	struct:_SFLHost_parent	access:public
dsIndex	sflow.h	/^  uint32_t dsIndex;       \/* sFlowDataSource index *\/$/;"	m	struct:_SFLHost_parent	access:public
ds_class	sflow.h	/^  uint32_t ds_class;             \/* EXPANDED *\/$/;"	m	struct:_SFLFlow_sample_expanded	access:public
ds_class	sflow.h	/^  uint32_t ds_class;           \/* EXPANDED *\/$/;"	m	struct:_SFLCounters_sample_expanded	access:public
ds_class	sflowtool.c	/^  uint32_t ds_class;$/;"	m	struct:_SFSample	file:	access:public
ds_index	sflow.h	/^  uint32_t ds_index;             \/* EXPANDED *\/$/;"	m	struct:_SFLFlow_sample_expanded	access:public
ds_index	sflow.h	/^  uint32_t ds_index;           \/* EXPANDED *\/$/;"	m	struct:_SFLCounters_sample_expanded	access:public
ds_index	sflowtool.c	/^  uint32_t ds_index;$/;"	m	struct:_SFSample	file:	access:public
dst	sflow.h	/^  SFLAddress dst;    \/* Destination address *\/$/;"	m	struct:_SFLExtended_nat	access:public
dst	sflowtool.c	/^      uint32_t dst;$/;"	m	struct:udpmagichdr	file:	access:public
dstAS	sflowtool.c	/^  uint16_t dstAS;$/;"	m	struct:_NFFlow5	file:	access:public
dstIP	sflowtool.c	/^  char agentIP[51], srcIP[51], dstIP[51];$/;"	l
dstIP	sflowtool.c	/^  uint32_t dstIP;$/;"	m	struct:_NFFlow5	file:	access:public
dstMAC	sflowtool.c	/^      u_char *dstMAC = NULL;$/;"	l
dstMask	sflowtool.c	/^  uint32_t dstMask;$/;"	m	struct:_SFSample	file:	access:public
dstMask	sflowtool.c	/^  uint8_t dstMask;  \/* No. bits *\/$/;"	m	struct:_NFFlow5	file:	access:public
dstPort	sflowtool.c	/^  uint16_t dstPort;$/;"	m	struct:_NFFlow5	file:	access:public
dst_as	sflowtool.c	/^  uint32_t dst_as;$/;"	m	struct:_SFSample	file:	access:public
dst_as_path	sflow.h	/^  SFLExtended_as_path_segment *dst_as_path; \/* list of seqs or sets *\/$/;"	m	struct:_SFLExtended_gateway	access:public
dst_as_path	sflowtool.c	/^  uint32_t *dst_as_path;$/;"	m	struct:_SFSample	file:	access:public
dst_as_path	sflowtool.h	/^  INMExtended_as_path_segment *dst_as_path; \/* list of seqs or sets *\/$/;"	m	struct:_INMExtended_gateway_v4	access:public
dst_as_path	sflowtool.h	/^  uint32_t *dst_as_path;$/;"	m	struct:_INMExtended_gateway_v2	access:public
dst_as_path_len	sflowtool.c	/^  uint32_t dst_as_path_len;$/;"	m	struct:_SFSample	file:	access:public
dst_as_path_length	sflowtool.h	/^  uint32_t dst_as_path_length;             \/* number of AS numbers in path *\/$/;"	m	struct:_INMExtended_gateway_v2	access:public
dst_as_path_segments	sflow.h	/^  uint32_t dst_as_path_segments;           \/* number of segments in path *\/$/;"	m	struct:_SFLExtended_gateway	access:public
dst_as_path_segments	sflowtool.h	/^  uint32_t dst_as_path_segments;           \/* number of segments in path *\/$/;"	m	struct:_INMExtended_gateway_v4	access:public
dst_charset	sflow.h	/^  uint32_t dst_charset;$/;"	m	struct:_SFLExtended_user	access:public
dst_ip	sflow.h	/^  SFLIPv4 dst_ip; \/* Destination IP Address *\/$/;"	m	struct:_SFLSampled_ipv4	access:public
dst_ip	sflow.h	/^  SFLIPv6 dst_ip; \/* Destination IP Address *\/$/;"	m	struct:_SFLSampled_ipv6	access:public
dst_ip	sflowtool.h	/^  SFLIPv4 dst_ip; \/* Destination IP Address *\/$/;"	m	struct:_INMSampled_ipv4	access:public
dst_ip	sflowtool.h	/^  SFLIPv6 dst_ip; \/* Destination IP Address *\/$/;"	m	struct:_INMSampled_ipv6	access:public
dst_mac	sflow.h	/^  uint8_t dst_mac[8];$/;"	m	struct:_SFLSampled_ethernet	access:public
dst_mask	sflow.h	/^  uint32_t dst_mask;               \/* Destination address prefix mask bits *\/$/;"	m	struct:_SFLExtended_router	access:public
dst_mask	sflowtool.h	/^  uint32_t dst_mask;               \/* Destination address prefix mask bits *\/$/;"	m	struct:_INMExtended_router	access:public
dst_peer_as	sflowtool.c	/^  uint32_t dst_peer_as;$/;"	m	struct:_SFSample	file:	access:public
dst_port	sflow.h	/^  uint32_t dst_port;     \/* TCP\/UDP destination port number or equivalent *\/$/;"	m	struct:_SFLSampled_ipv6	access:public
dst_port	sflow.h	/^  uint32_t dst_port;    \/* TCP\/UDP destination port number or equivalent *\/$/;"	m	struct:_SFLSampled_ipv4	access:public
dst_port	sflowtool.h	/^  uint32_t dst_port;     \/* TCP\/UDP destination port number or equivalent *\/$/;"	m	struct:_INMSampled_ipv6	access:public
dst_port	sflowtool.h	/^  uint32_t dst_port;    \/* TCP\/UDP destination port number or equivalent *\/$/;"	m	struct:_INMSampled_ipv4	access:public
dst_priority	sflow.h	/^  uint32_t dst_priority;   \/* The 802.1p priority *\/$/;"	m	struct:_SFLExtended_switch	access:public
dst_priority	sflowtool.h	/^  uint32_t dst_priority;   \/* The 802.1p priority *\/$/;"	m	struct:_INMExtended_switch	access:public
dst_user	sflow.h	/^  SFLString dst_user;$/;"	m	struct:_SFLExtended_user	access:public
dst_user	sflowtool.c	/^  char dst_user[SA_MAX_EXTENDED_USER_LEN+1];$/;"	m	struct:_SFSample	file:	access:public
dst_user	sflowtool.h	/^  char *dst_user;$/;"	m	struct:_INMExtended_user	access:public
dst_user_charset	sflowtool.c	/^  uint32_t dst_user_charset;$/;"	m	struct:_SFSample	file:	access:public
dst_user_len	sflowtool.c	/^  uint32_t dst_user_len;$/;"	m	struct:_SFSample	file:	access:public
dst_user_len	sflowtool.h	/^  uint32_t dst_user_len;$/;"	m	struct:_INMExtended_user	access:public
dst_vlan	sflow.h	/^  uint32_t dst_vlan;       \/* The 802.1Q VLAN id of outgoing frame *\/$/;"	m	struct:_SFLExtended_switch	access:public
dst_vlan	sflowtool.h	/^  uint32_t dst_vlan;       \/* The 802.1Q VLAN id of outgoing frame *\/$/;"	m	struct:_INMExtended_switch	access:public
dumpSample	sflowtool.c	/^static void dumpSample(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
duration_id	sflowtool.c	/^  uint32_t duration_id = (ptr[1] << 8) + ptr[0]; \/\/ not in network byte order either?$/;"	l
duration_uS	sflow.h	/^  uint32_t duration_uS;        \/* duration of the operation (microseconds) *\/$/;"	m	struct:__anon12	access:public
duration_uS	sflow.h	/^  uint32_t duration_uS;$/;"	m	struct:_SFLSampled_memcache	access:public
dvi	Makefile	/^dvi: dvi-am$/;"	t
dvi-am	Makefile	/^dvi-am:$/;"	t
dvidir	Makefile	/^dvidir = ${docdir}$/;"	m
el	sflowtool.c	/^    uint32_t el;$/;"	l
elapsed_time	sflow.h	/^  uint32_t elapsed_time;         \/* elapsed time in ms *\/$/;"	m	struct:_SFLRadio_counters	access:public
elements	sflow.h	/^  SFLCounters_sample_element *elements;$/;"	m	struct:_SFLCounters_sample	access:public
elements	sflow.h	/^  SFLCounters_sample_element *elements;$/;"	m	struct:_SFLCounters_sample_expanded	access:public
elements	sflow.h	/^  SFLFlow_sample_element *elements;$/;"	m	struct:_SFLFlow_Pdu	access:public
elements	sflow.h	/^  SFLFlow_sample_element *elements;$/;"	m	struct:_SFLFlow_sample	access:public
elements	sflow.h	/^  SFLFlow_sample_element *elements;$/;"	m	struct:_SFLFlow_sample_expanded	access:public
enc_key	sflowtool.c	/^  char enc_key[ENC_KEY_BYTES];$/;"	l
encrypted	sflowtool.c	/^  uint32_t encrypted = (fc >> 14) & 1;$/;"	l
end	sflowtool.c	/^  u_char *end = sample->header + sample->headerLen;$/;"	l
end	sflowtool.c	/^  u_char *end = start + sample->headerLen;$/;"	l
endp	sflowtool.c	/^  u_char *endp;$/;"	m	struct:_SFSample	file:	access:public
engineId	sflowtool.c	/^  uint8_t engineId;$/;"	m	struct:_NFFlowHdr5	file:	access:public
engineType	sflowtool.c	/^  uint8_t engineType;$/;"	m	struct:_NFFlowHdr5	file:	access:public
ent	sflowtool.c	/^	struct hostent *ent = gethostbyname(argv[arg++]);$/;"	l
ent	sflowtool.c	/^    struct hostent *ent = gethostbyname(hoststr);$/;"	l
env	sflowtool.c	/^  jmp_buf env;$/;"	m	struct:_SFSample	file:	access:public
errors_BAD_REQUEST	sflow.h	/^  uint32_t errors_BAD_REQUEST;$/;"	m	struct:_SFLAPP_counters	access:public
errors_FORBIDDEN	sflow.h	/^  uint32_t errors_FORBIDDEN;$/;"	m	struct:_SFLAPP_counters	access:public
errors_INTERNAL_ERROR	sflow.h	/^  uint32_t errors_INTERNAL_ERROR;$/;"	m	struct:_SFLAPP_counters	access:public
errors_NOT_FOUND	sflow.h	/^  uint32_t errors_NOT_FOUND;$/;"	m	struct:_SFLAPP_counters	access:public
errors_NOT_IMPLEMENTED	sflow.h	/^  uint32_t errors_NOT_IMPLEMENTED;$/;"	m	struct:_SFLAPP_counters	access:public
errors_OTHER	sflow.h	/^  uint32_t errors_OTHER;$/;"	m	struct:_SFLAPP_counters	access:public
errors_TIMEOUT	sflow.h	/^  uint32_t errors_TIMEOUT;$/;"	m	struct:_SFLAPP_counters	access:public
errors_TOO_LARGE	sflow.h	/^  uint32_t errors_TOO_LARGE;$/;"	m	struct:_SFLAPP_counters	access:public
errors_UNAUTHORIZED	sflow.h	/^  uint32_t errors_UNAUTHORIZED;$/;"	m	struct:_SFLAPP_counters	access:public
errors_UNAVAILABLE	sflow.h	/^  uint32_t errors_UNAVAILABLE;$/;"	m	struct:_SFLAPP_counters	access:public
errs	sflow.h	/^  uint32_t errs;        \/* read\/write errors *\/$/;"	m	struct:_SFLHost_vrt_dsk_counters	access:public
errs_in	sflow.h	/^  uint32_t errs_in;$/;"	m	struct:_SFLHost_nio_counters	access:public
errs_in	sflow.h	/^  uint32_t errs_in;$/;"	m	struct:_SFLHost_vrt_nio_counters	access:public
errs_out	sflow.h	/^  uint32_t errs_out;$/;"	m	struct:_SFLHost_nio_counters	access:public
errs_out	sflow.h	/^  uint32_t errs_out;$/;"	m	struct:_SFLHost_vrt_nio_counters	access:public
eth_dst	sflowtool.c	/^  u_char eth_dst[8];$/;"	m	struct:_SFSample	file:	access:public
eth_len	sflow.h	/^  uint32_t eth_len;       \/* The length of the MAC packet excluding $/;"	m	struct:_SFLSampled_ethernet	access:public
eth_len	sflowtool.c	/^  uint32_t eth_len;$/;"	m	struct:_SFSample	file:	access:public
eth_src	sflowtool.c	/^  u_char eth_src[8];$/;"	m	struct:_SFSample	file:	access:public
eth_type	sflow.h	/^  uint32_t eth_type;$/;"	m	struct:_SFLSampled_ethernet	access:public
eth_type	sflowtool.c	/^  uint32_t eth_type;$/;"	m	struct:_SFSample	file:	access:public
ethernet	sflow.h	/^  SFLEthernet_counters ethernet;$/;"	m	union:_SFLCounters_type	access:public
ethernet	sflow.h	/^  SFLSampled_ethernet ethernet;$/;"	m	union:_SFLFlow_type	access:public
ethernet	sflowtool.h	/^  INMEthernet_counters ethernet;$/;"	m	union:_INMCounters_type	access:public
ethernet	sflowtool.h	/^  INMEthernet_specific_counters ethernet;$/;"	m	struct:_INMEthernet_counters	access:public
evictions	sflow.h	/^   uint32_t evictions;$/;"	m	struct:_SFLMemcache_counters	access:public
exceptionVal	sflowtool.c	/^  int exceptionVal;$/;"	l
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
extended_data_tag	sflowtool.c	/^  uint32_t extended_data_tag;$/;"	m	struct:_SFSample	file:	access:public
extended_tag	sflowtool.c	/^      uint32_t extended_tag;$/;"	l
fddi	sflowtool.h	/^  INMFddi_counters fddi;$/;"	m	union:_INMCounters_type	access:public
fds_max	sflow.h	/^  uint32_t fds_max;$/;"	m	struct:_SFLJMX_counters	access:public
fds_max	sflow.h	/^  uint32_t fds_max;$/;"	m	struct:__anon14	access:public
fds_open	sflow.h	/^  uint32_t fds_open;$/;"	m	struct:_SFLJMX_counters	access:public
fds_used	sflow.h	/^  uint32_t fds_used;$/;"	m	struct:__anon14	access:public
fec_addr_prefix_len	sflowtool.c	/^  uint32_t fec_addr_prefix_len = getData32(sample);$/;"	l
first	sflowtool.c	/^	uint32_t first, last;$/;"	l
firstTime	sflowtool.c	/^  uint32_t firstTime;$/;"	m	struct:_NFFlow5	file:	access:public
five_min_cpu	sflow.h	/^   uint32_t five_min_cpu;  \/* 5 minute average CPU utilization *\/$/;"	m	struct:_SFLProcessor_counters	access:public
five_sec_cpu	sflow.h	/^   uint32_t five_sec_cpu;  \/* 5 second average CPU utilization *\/$/;"	m	struct:_SFLProcessor_counters	access:public
fl	sflowtool.c	/^  float fl;$/;"	l
flow	sflowtool.c	/^  NFFlow5 flow; \/* normally an array, but here we always send just 1 at a time *\/$/;"	m	struct:_NFFlowPkt5	file:	access:public
flowSequence	sflowtool.c	/^  uint32_t flowSequence;$/;"	m	struct:_NFFlowHdr5	file:	access:public
flowType	sflow.h	/^  SFLFlow_type flowType;$/;"	m	struct:_SFLFlow_sample_element	access:public
flowsample	sflowtool.h	/^  INMFlow_sample flowsample;$/;"	m	union:_INMSample_type	access:public
forwardingTargets	sflowtool.c	/^  SFForwardingTarget *forwardingTargets;$/;"	m	struct:_SFConfig	file:	access:public
frag_off	sflowtool.c	/^    uint16_t frag_off;$/;"	m	struct:myiphdr	file:	access:public
frame_length	sflow.h	/^  uint32_t frame_length;               \/* Original length of packet before sampling *\/$/;"	m	struct:_SFLSampled_header	access:public
frame_length	sflowtool.h	/^  uint32_t frame_length;               \/* Original length of packet before sampling *\/$/;"	m	struct:_INMSampled_header	access:public
frames	sflowtool.c	/^  uint32_t frames;$/;"	m	struct:_NFFlow5	file:	access:public
free_memory	sflow.h	/^   uint64_t free_memory;   \/* free memory (in bytes) *\/$/;"	m	struct:_SFLProcessor_counters	access:public
fromDS	sflowtool.c	/^  uint32_t fromDS = (fc >> 9) & 1;$/;"	l
ftn_descr	sflowtool.c	/^  char ftn_descr[SA_MAX_FTN_LEN+1];$/;"	l
ftn_mask	sflowtool.c	/^  uint32_t ftn_mask;$/;"	l
gateway	sflow.h	/^  SFLExtended_gateway gateway;$/;"	m	union:_SFLFlow_type	access:public
gateway	sflowtool.h	/^  } gateway;$/;"	m	struct:_INMFlow_sample	typeref:union:_INMFlow_sample::__anon2	access:public
gc_count	sflow.h	/^  uint32_t gc_count;$/;"	m	struct:_SFLJMX_counters	access:public
gc_ms	sflow.h	/^  uint32_t gc_ms;$/;"	m	struct:_SFLJMX_counters	access:public
generic	sflow.h	/^  SFLIf_counters generic;$/;"	m	union:_SFLCounters_type	access:public
generic	sflowtool.h	/^  INMIf_counters generic;$/;"	m	struct:_INMEthernet_counters	access:public
generic	sflowtool.h	/^  INMIf_counters generic;$/;"	m	struct:_INMFddi_counters	access:public
generic	sflowtool.h	/^  INMIf_counters generic;$/;"	m	struct:_INMTokenring_counters	access:public
generic	sflowtool.h	/^  INMIf_counters generic;$/;"	m	struct:_INMVg_counters	access:public
generic	sflowtool.h	/^  INMIf_counters generic;$/;"	m	struct:_INMWan_counters	access:public
generic	sflowtool.h	/^  INMIf_counters generic;$/;"	m	union:_INMCounters_type	access:public
getAddress	sflowtool.c	/^static uint32_t getAddress(SFSample *sample, SFLAddress *address) {$/;"	f	file:	signature:(SFSample *sample, SFLAddress *address)
getData32	sflowtool.c	/^static uint32_t getData32(SFSample *sample) {$/;"	f	file:	signature:(SFSample *sample)
getData32_nobswap	sflowtool.c	/^static uint32_t getData32_nobswap(SFSample *sample) {$/;"	f	file:	signature:(SFSample *sample)
getData64	sflowtool.c	/^static uint64_t getData64(SFSample *sample) {$/;"	f	file:	signature:(SFSample *sample)
getFloat	sflowtool.c	/^static float getFloat(SFSample *sample) {$/;"	f	file:	signature:(SFSample *sample)
getString	sflowtool.c	/^static uint32_t getString(SFSample *sample, char *buf, uint32_t bufLen) {$/;"	f	file:	signature:(SFSample *sample, char *buf, uint32_t bufLen)
get_hits	sflow.h	/^   uint32_t get_hits;       \/* Number of keys that have been requested and$/;"	m	struct:_SFLMemcache_counters	access:public
get_misses	sflow.h	/^   uint32_t get_misses;     \/* Number of items that have been requested$/;"	m	struct:_SFLMemcache_counters	access:public
gotGateway	sflowtool.h	/^  int gotGateway;$/;"	m	struct:_INMFlow_sample	access:public
gotIPV4	sflowtool.c	/^  int gotIPV4;$/;"	m	struct:_SFSample	file:	access:public
gotIPV4Struct	sflowtool.c	/^  int gotIPV4Struct;$/;"	m	struct:_SFSample	file:	access:public
gotIPV6	sflowtool.c	/^  int gotIPV6;$/;"	m	struct:_SFSample	file:	access:public
gotIPV6Struct	sflowtool.c	/^  int gotIPV6Struct;$/;"	m	struct:_SFSample	file:	access:public
gotRouter	sflowtool.h	/^  int gotRouter;$/;"	m	struct:_INMFlow_sample	access:public
gotSwitch	sflowtool.h	/^  int gotSwitch;$/;"	m	struct:_INMFlow_sample	access:public
gotUrl	sflowtool.h	/^  int gotUrl;$/;"	m	struct:_INMFlow_sample	access:public
gotUser	sflowtool.h	/^  int gotUser;$/;"	m	struct:_INMFlow_sample	access:public
gotVlanFilter	sflowtool.c	/^  int gotVlanFilter;$/;"	m	struct:_SFConfig	file:	access:public
h	sflowtool.c	/^    } h, saved;$/;"	l
hdr	sflowtool.c	/^  NFFlowHdr5 hdr;$/;"	m	struct:_NFFlowPkt5	file:	access:public
hdr	sflowtool.c	/^  struct pcap_file_header hdr;$/;"	l
hdr	sflowtool.c	/^  struct pcap_pkthdr hdr;$/;"	l
hdr	sflowtool.h	/^  INMCounters_sample_hdr hdr;$/;"	m	struct:_INMCounters_sample	access:public
header	sflow.h	/^  SFLSampled_header header;$/;"	m	struct:_SFLExtended_wifi_payload	access:public
header	sflow.h	/^  SFLSampled_header header;$/;"	m	union:_SFLFlow_type	access:public
header	sflowtool.c	/^  u_char *header;$/;"	m	struct:_SFSample	file:	access:public
header	sflowtool.h	/^  INMSampled_header header;$/;"	m	union:_INMPacket_data_type	access:public
header	sflowtool.h	/^  uint8_t header[INM_MAX_HEADER_SIZE]; \/* Header bytes *\/$/;"	m	struct:_INMSampled_header	access:public
headerBytes	sflowtool.c	/^      int headerBytes;$/;"	l
headerLen	sflowtool.c	/^  int headerLen;$/;"	m	struct:_SFSample	file:	access:public
headerProtocol	sflowtool.c	/^  uint32_t headerProtocol;$/;"	m	struct:_SFSample	file:	access:public
header_bytes	sflow.h	/^  uint8_t *header_bytes;               \/* Header bytes *\/$/;"	m	struct:_SFLSampled_header	access:public
header_length	sflow.h	/^  uint32_t header_length;              \/* length of sampled header bytes to follow *\/$/;"	m	struct:_SFLSampled_header	access:public
header_length	sflowtool.h	/^  uint32_t header_length;              \/* length of sampled header bytes to follow *\/$/;"	m	struct:_INMSampled_header	access:public
header_protocol	sflow.h	/^  uint32_t header_protocol;            \/* (enum SFLHeader_protocol) *\/$/;"	m	struct:_SFLSampled_header	access:public
header_protocol	sflowtool.h	/^  uint32_t header_protocol;            \/* (enum INMHeader_protocol) *\/$/;"	m	struct:_INMSampled_header	access:public
hex	sflowtool.c	/^  char *hex = "";$/;"	l
hex	sflowtool.c	/^  u_char hex[6000];$/;"	l
hmem_committed	sflow.h	/^  uint64_t hmem_committed;$/;"	m	struct:_SFLJMX_counters	access:public
hmem_initial	sflow.h	/^  uint64_t hmem_initial;$/;"	m	struct:_SFLJMX_counters	access:public
hmem_max	sflow.h	/^  uint64_t hmem_max;$/;"	m	struct:_SFLJMX_counters	access:public
hmem_used	sflow.h	/^  uint64_t hmem_used;$/;"	m	struct:_SFLJMX_counters	access:public
host	Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host	sflow.h	/^  SFLString host;          \/* Host value from request header (<= 64 bytes) *\/$/;"	m	struct:_SFLSampled_http	access:public
host	sflow.h	/^  SFLString host;        \/* The host field from the HTTP header *\/$/;"	m	struct:_SFLExtended_url	access:public
host	sflowtool.c	/^  char host[SA_MAX_EXTENDED_HOST_LEN+1];$/;"	m	struct:_SFSample	file:	access:public
host	sflowtool.c	/^  char host[SFL_MAX_HTTP_HOST+1];$/;"	l
host	sflowtool.c	/^  struct in_addr host;$/;"	m	struct:_SFForwardingTarget	typeref:struct:_SFForwardingTarget::in_addr	file:	access:public
hostId	sflow.h	/^  SFLHostId hostId;$/;"	m	union:_SFLCounters_type	access:public
host_alias	Makefile	/^host_alias = $/;"	m
host_cpu	Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	sflow.h	/^  SFLHost_cpu_counters host_cpu;$/;"	m	union:_SFLCounters_type	access:public
host_dsk	sflow.h	/^  SFLHost_dsk_counters host_dsk;$/;"	m	union:_SFLCounters_type	access:public
host_len	sflowtool.c	/^  uint32_t host_len;$/;"	m	struct:_SFSample	file:	access:public
host_mem	sflow.h	/^  SFLHost_mem_counters host_mem;$/;"	m	union:_SFLCounters_type	access:public
host_nio	sflow.h	/^  SFLHost_nio_counters host_nio;$/;"	m	union:_SFLCounters_type	access:public
host_os	Makefile	/^host_os = linux-gnu$/;"	m
host_par	sflow.h	/^  SFLHost_parent host_par;$/;"	m	union:_SFLCounters_type	access:public
host_triplet	Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_vendor	Makefile	/^host_vendor = unknown$/;"	m
host_vrt_cpu	sflow.h	/^  SFLHost_vrt_cpu_counters host_vrt_cpu;$/;"	m	union:_SFLCounters_type	access:public
host_vrt_dsk	sflow.h	/^  SFLHost_vrt_dsk_counters host_vrt_dsk;$/;"	m	union:_SFLCounters_type	access:public
host_vrt_mem	sflow.h	/^  SFLHost_vrt_mem_counters host_vrt_mem;$/;"	m	union:_SFLCounters_type	access:public
host_vrt_nio	sflow.h	/^  SFLHost_vrt_nio_counters host_vrt_nio;$/;"	m	union:_SFLCounters_type	access:public
host_vrt_node	sflow.h	/^  SFLHost_vrt_node_counters host_vrt_node;$/;"	m	union:_SFLCounters_type	access:public
hostname	sflow.h	/^  SFLString hostname;$/;"	m	struct:_SFLHostId	access:public
hostname	sflowtool.c	/^  char hostname[SFL_MAX_HOSTNAME_LEN+1];$/;"	l
hoststr	sflowtool.c	/^  char hoststr[MAX_HOSTANDPORT_LEN+1];$/;"	l
html	Makefile	/^html: html-am$/;"	t
html-am	Makefile	/^html-am:$/;"	t
htmldir	Makefile	/^htmldir = ${docdir}$/;"	m
http	sflow.h	/^  SFLHTTP_counters http;$/;"	m	union:_SFLCounters_type	access:public
http	sflow.h	/^  SFLSampled_http http;$/;"	m	union:_SFLFlow_type	access:public
http_log	sflowtool.c	/^  char http_log[SFLFMT_CLF_MAX_LINE];$/;"	m	struct:_SFCommonLogFormat	file:	access:public
hundredths	sflowtool.c	/^  uint32_t hundredths = getData32(sample);$/;"	l
i	sflowtool.c	/^	uint32_t i;$/;"	l
i	sflowtool.c	/^      uint32_t i;$/;"	l
i	sflowtool.c	/^    uint32_t i = 0;$/;"	l
i	sflowtool.c	/^  int b = 0, i = 0;$/;"	l
i	sflowtool.c	/^  int i;$/;"	l
i	sflowtool.c	/^  uint32_t i, j, ifindex, num_macs, num_adaptors = getData32(sample);$/;"	l
i	sflowtool.c	/^  uint32_t i, num_pdus = getData32(sample);$/;"	l
i	sflowtool.c	/^  uint32_t i;$/;"	l
icmp	sflowtool.c	/^      struct myicmphdr icmp;$/;"	l
id	sflowtool.c	/^    uint16_t id;$/;"	m	struct:myiphdr	file:	access:public
ifCounters	sflowtool.c	/^  SFLIf_counters ifCounters;$/;"	m	struct:_SFSample	file:	access:public
ifDirection	sflow.h	/^  uint32_t ifDirection;        \/* Derived from MAU MIB (RFC 2668)$/;"	m	struct:_SFLIf_counters	access:public
ifDirection	sflowtool.h	/^  uint32_t ifDirection;        \/* Derived from MAU MIB (RFC 2239)$/;"	m	struct:_INMIf_counters	access:public
ifInBroadcastPkts	sflow.h	/^  uint32_t ifInBroadcastPkts;$/;"	m	struct:_SFLIf_counters	access:public
ifInBroadcastPkts	sflowtool.h	/^  uint32_t ifInBroadcastPkts;$/;"	m	struct:_INMIf_counters	access:public
ifInDiscards	sflow.h	/^  uint32_t ifInDiscards;$/;"	m	struct:_SFLIf_counters	access:public
ifInDiscards	sflowtool.h	/^  uint32_t ifInDiscards;$/;"	m	struct:_INMIf_counters	access:public
ifInErrors	sflow.h	/^  uint32_t ifInErrors;$/;"	m	struct:_SFLIf_counters	access:public
ifInErrors	sflowtool.h	/^  uint32_t ifInErrors;$/;"	m	struct:_INMIf_counters	access:public
ifInMulticastPkts	sflow.h	/^  uint32_t ifInMulticastPkts;$/;"	m	struct:_SFLIf_counters	access:public
ifInMulticastPkts	sflowtool.h	/^  uint32_t ifInMulticastPkts;$/;"	m	struct:_INMIf_counters	access:public
ifInOctets	sflow.h	/^  uint64_t ifInOctets;$/;"	m	struct:_SFLIf_counters	access:public
ifInOctets	sflowtool.h	/^  uint64_t ifInOctets;$/;"	m	struct:_INMIf_counters	access:public
ifInUcastPkts	sflow.h	/^  uint32_t ifInUcastPkts;$/;"	m	struct:_SFLIf_counters	access:public
ifInUcastPkts	sflowtool.h	/^  uint32_t ifInUcastPkts;$/;"	m	struct:_INMIf_counters	access:public
ifInUnknownProtos	sflow.h	/^  uint32_t ifInUnknownProtos;$/;"	m	struct:_SFLIf_counters	access:public
ifInUnknownProtos	sflowtool.h	/^  uint32_t ifInUnknownProtos;$/;"	m	struct:_INMIf_counters	access:public
ifIndex	sflow.h	/^  uint32_t ifIndex;$/;"	m	struct:_SFLAdaptor	access:public
ifIndex	sflow.h	/^  uint32_t ifIndex;$/;"	m	struct:_SFLIf_counters	access:public
ifIndex	sflowtool.h	/^  uint32_t ifIndex;$/;"	m	struct:_INMIf_counters	access:public
ifOutBroadcastPkts	sflow.h	/^  uint32_t ifOutBroadcastPkts;$/;"	m	struct:_SFLIf_counters	access:public
ifOutBroadcastPkts	sflowtool.h	/^  uint32_t ifOutBroadcastPkts;$/;"	m	struct:_INMIf_counters	access:public
ifOutDiscards	sflow.h	/^  uint32_t ifOutDiscards;$/;"	m	struct:_SFLIf_counters	access:public
ifOutDiscards	sflowtool.h	/^  uint32_t ifOutDiscards;$/;"	m	struct:_INMIf_counters	access:public
ifOutErrors	sflow.h	/^  uint32_t ifOutErrors;$/;"	m	struct:_SFLIf_counters	access:public
ifOutErrors	sflowtool.h	/^  uint32_t ifOutErrors;$/;"	m	struct:_INMIf_counters	access:public
ifOutMulticastPkts	sflow.h	/^  uint32_t ifOutMulticastPkts;$/;"	m	struct:_SFLIf_counters	access:public
ifOutMulticastPkts	sflowtool.h	/^  uint32_t ifOutMulticastPkts;$/;"	m	struct:_INMIf_counters	access:public
ifOutOctets	sflow.h	/^  uint64_t ifOutOctets;$/;"	m	struct:_SFLIf_counters	access:public
ifOutOctets	sflowtool.h	/^  uint64_t ifOutOctets;$/;"	m	struct:_INMIf_counters	access:public
ifOutUcastPkts	sflow.h	/^  uint32_t ifOutUcastPkts;$/;"	m	struct:_SFLIf_counters	access:public
ifOutUcastPkts	sflowtool.h	/^  uint32_t ifOutUcastPkts;$/;"	m	struct:_INMIf_counters	access:public
ifPromiscuousMode	sflow.h	/^  uint32_t ifPromiscuousMode;$/;"	m	struct:_SFLIf_counters	access:public
ifPromiscuousMode	sflowtool.h	/^  uint32_t ifPromiscuousMode;$/;"	m	struct:_INMIf_counters	access:public
ifSpeed	sflow.h	/^  uint64_t ifSpeed;$/;"	m	struct:_SFLIf_counters	access:public
ifSpeed	sflowtool.h	/^  uint64_t ifSpeed;$/;"	m	struct:_INMIf_counters	access:public
ifStatus	sflow.h	/^  uint32_t ifStatus;           \/* bit field with the following bits assigned:$/;"	m	struct:_SFLIf_counters	access:public
ifStatus	sflowtool.h	/^  uint32_t ifStatus;           \/* bit field with the following bits assigned:$/;"	m	struct:_INMIf_counters	access:public
ifType	sflow.h	/^  uint32_t ifType;$/;"	m	struct:_SFLIf_counters	access:public
ifType	sflowtool.h	/^  uint32_t ifType;$/;"	m	struct:_INMIf_counters	access:public
if_in	sflowtool.c	/^  uint16_t if_in;$/;"	m	struct:_NFFlow5	file:	access:public
if_out	sflowtool.c	/^  uint16_t if_out;$/;"	m	struct:_NFFlow5	file:	access:public
ifindex	sflowtool.c	/^  uint32_t i, j, ifindex, num_macs, num_adaptors = getData32(sample);$/;"	l
in	sflowtool.c	/^  int arg = 1, in = 0;$/;"	l
in_checksum	sflowtool.c	/^static uint16_t in_checksum(uint16_t *addr, int len)$/;"	f	file:	signature:(uint16_t *addr, int len)
in_priority	sflowtool.c	/^  uint32_t in_priority;$/;"	m	struct:_SFSample	file:	access:public
in_stack	sflow.h	/^  SFLLabelStack in_stack;$/;"	m	struct:_SFLExtended_mpls	access:public
in_vlan	sflowtool.c	/^  uint32_t in_vlan;$/;"	m	struct:_SFSample	file:	access:public
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
incr_hits	sflow.h	/^   uint32_t incr_hits;$/;"	m	struct:_SFLMemcache_counters	access:public
incr_misses	sflow.h	/^   uint32_t incr_misses;$/;"	m	struct:_SFLMemcache_counters	access:public
info	Makefile	/^info: info-am$/;"	t
info-am	Makefile	/^info-am:$/;"	t
infodir	Makefile	/^infodir = ${datarootdir}\/info$/;"	m
inp	sflowtool.c	/^    uint32_t inp, outp;$/;"	l
input	sflow.h	/^  uint32_t input;                \/* SNMP ifIndex of input interface.$/;"	m	struct:_SFLFlow_sample	access:public
input	sflow.h	/^  uint32_t input;                \/* SNMP ifIndex of input interface.$/;"	m	struct:_SFLFlow_sample_expanded	access:public
input	sflowtool.h	/^  uint32_t input;                \/* SNMP ifIndex of input interface.$/;"	m	struct:_INMFlow_sample	access:public
inputFormat	sflow.h	/^  uint32_t inputFormat;          \/* EXPANDED *\/$/;"	m	struct:_SFLFlow_sample_expanded	access:public
inputPort	sflowtool.c	/^  uint32_t inputPort;$/;"	m	struct:_SFSample	file:	access:public
inputPortFormat	sflowtool.c	/^  uint32_t inputPortFormat;$/;"	m	struct:_SFSample	file:	access:public
install	Makefile	/^install: install-am$/;"	t
install-am	Makefile	/^install-am: all-am$/;"	t
install-binPROGRAMS	Makefile	/^install-binPROGRAMS: $(bin_PROGRAMS)$/;"	t
install-data	Makefile	/^install-data: install-data-am$/;"	t
install-data-am	Makefile	/^install-data-am:$/;"	t
install-dvi	Makefile	/^install-dvi: install-dvi-am$/;"	t
install-dvi-am	Makefile	/^install-dvi-am:$/;"	t
install-exec	Makefile	/^install-exec: install-exec-am$/;"	t
install-exec-am	Makefile	/^install-exec-am: install-binPROGRAMS$/;"	t
install-html	Makefile	/^install-html: install-html-am$/;"	t
install-html-am	Makefile	/^install-html-am:$/;"	t
install-info	Makefile	/^install-info: install-info-am$/;"	t
install-info-am	Makefile	/^install-info-am:$/;"	t
install-man	Makefile	/^install-man:$/;"	t
install-pdf	Makefile	/^install-pdf: install-pdf-am$/;"	t
install-pdf-am	Makefile	/^install-pdf-am:$/;"	t
install-ps	Makefile	/^install-ps: install-ps-am$/;"	t
install-ps-am	Makefile	/^install-ps-am:$/;"	t
install-strip	Makefile	/^install-strip:$/;"	t
install_sh	Makefile	/^install_sh = ${SHELL} \/home\/bradomyn\/projects\/sFlow\/sflowtool-3.22\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
installcheck	Makefile	/^installcheck: installcheck-am$/;"	t
installcheck-am	Makefile	/^installcheck-am:$/;"	t
installdirs	Makefile	/^installdirs:$/;"	t
instructions	sflowtool.c	/^static void instructions(char *command)$/;"	f	file:	signature:(char *command)
internalPriority	sflowtool.c	/^  uint32_t internalPriority;$/;"	m	struct:_SFSample	file:	access:public
interrupts	sflow.h	/^  uint32_t interrupts; \/* interrupt count *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
ip	sflowtool.c	/^    struct myiphdr ip;$/;"	l
ip	sflowtool.c	/^  struct myiphdr ip;$/;"	m	struct:mySendPacket	typeref:struct:mySendPacket::myiphdr	file:	access:public
ip	sflowtool.c	/^  u_char *ip = (u_char *)&ipaddr;$/;"	l
ipProto	sflowtool.c	/^  uint8_t ipProto;$/;"	m	struct:_NFFlow5	file:	access:public
ipTos	sflowtool.c	/^  uint8_t ipTos;$/;"	m	struct:_NFFlow5	file:	access:public
ipVersion	sflowtool.c	/^      int ipVersion = (*ptr >> 4);$/;"	l
ip_fragmentOffset	sflowtool.c	/^  uint32_t ip_fragmentOffset;$/;"	m	struct:_SFSample	file:	access:public
ip_v4	sflow.h	/^    SFLIPv4 ip_v4;$/;"	m	union:_SFLAddress_value	access:public
ip_v4	sflowtool.h	/^  SFLIPv4 ip_v4;$/;"	m	union:_INMAddress_value	access:public
ip_v6	sflow.h	/^    SFLIPv6 ip_v6;$/;"	m	union:_SFLAddress_value	access:public
ip_v6	sflowtool.h	/^  SFLIPv6 ip_v6;$/;"	m	union:_INMAddress_value	access:public
ipbuf	sflowtool.c	/^  char ipbuf[51];$/;"	l
ipdst	sflowtool.c	/^  SFLAddress ipdst;$/;"	m	struct:_SFSample	file:	access:public
ipid	sflowtool.c	/^  uint16_t ipid;$/;"	m	struct:_SFConfig	file:	access:public
ipsrc	sflowtool.c	/^  SFLAddress ipsrc;$/;"	m	struct:_SFSample	file:	access:public
ipv4	sflow.h	/^  SFLSampled_ipv4 ipv4;$/;"	m	union:_SFLFlow_type	access:public
ipv4	sflowtool.h	/^  INMSampled_ipv4 ipv4;$/;"	m	union:_INMPacket_data_type	access:public
ipv4MappedAddress	sflowtool.c	/^static int ipv4MappedAddress(SFLIPv6 *ipv6addr, SFLIPv4 *ip4addr) {$/;"	f	file:	signature:(SFLIPv6 *ipv6addr, SFLIPv4 *ip4addr)
ipv6	sflow.h	/^  SFLSampled_ipv6 ipv6;$/;"	m	union:_SFLFlow_type	access:public
ipv6	sflowtool.h	/^  INMSampled_ipv6 ipv6;$/;"	m	union:_INMPacket_data_type	access:public
ipxChecksum	sflowtool.c	/^    int ipxChecksum = (ptr[0] == 0xff && ptr[1] == 0xff);$/;"	l
ipxLen	sflowtool.c	/^    int ipxLen = (ptr[2] << 8) + ptr[3];$/;"	l
j	sflowtool.c	/^    uint32_t j = 0;$/;"	l
j	sflowtool.c	/^  uint32_t i, j, ifindex, num_macs, num_adaptors = getData32(sample);$/;"	l
jmx	sflow.h	/^  SFLJMX_counters jmx;$/;"	m	union:_SFLCounters_type	access:public
jvm	sflow.h	/^  SFLJVM_ID jvm;$/;"	m	union:_SFLCounters_type	access:public
key	sflow.h	/^  SFLString key;        \/* up to 255 chars *\/$/;"	m	struct:_SFLSampled_memcache	access:public
key	sflowtool.c	/^  char key[SFL_MAX_MEMCACHE_KEY+1];$/;"	l
lab	sflowtool.c	/^  uint32_t lab;$/;"	l
label	sflowtool.c	/^  uint32_t label;$/;"	l
last	sflowtool.c	/^	uint32_t first, last;$/;"	l
lastTime	sflowtool.c	/^  uint32_t lastTime;$/;"	m	struct:_NFFlow5	file:	access:public
len	sflow.h	/^  uint32_t len;$/;"	m	struct:_SFLString	access:public
len	sflowtool.c	/^      u_short len;$/;"	m	struct:udpmagichdr	file:	access:public
len	sflowtool.c	/^  uint32_t len, read_len;$/;"	l
len	sflowtool.c	/^  uint32_t len;	\/* length this packet (off wire) *\/$/;"	m	struct:pcap_pkthdr	file:	access:public
length	sflow.h	/^  uint32_t length;       \/* The length of the IP packet$/;"	m	struct:_SFLSampled_ipv6	access:public
length	sflow.h	/^  uint32_t length;      \/* The length of the IP packet$/;"	m	struct:_SFLSampled_ipv4	access:public
length	sflow.h	/^  uint32_t length; \/* number of AS numbers in set\/sequence *\/$/;"	m	struct:_SFLExtended_as_path_segment	access:public
length	sflow.h	/^  uint32_t length;$/;"	m	struct:_SFLCounters_sample_element	access:public
length	sflow.h	/^  uint32_t length;$/;"	m	struct:_SFLFlow_sample_element	access:public
length	sflowtool.c	/^      uint32_t tag, length;$/;"	l
length	sflowtool.h	/^  uint32_t length;       \/* The length of the IP packet$/;"	m	struct:_INMSampled_ipv6	access:public
length	sflowtool.h	/^  uint32_t length;      \/* The length of the IP packet$/;"	m	struct:_INMSampled_ipv4	access:public
length	sflowtool.h	/^  uint32_t length; \/* number of AS numbers in set\/sequence *\/$/;"	m	struct:_INMExtended_as_path_segment	access:public
lengthCheck	sflowtool.c	/^static void lengthCheck(SFSample *sample, char *description, u_char *start, int len) {$/;"	f	file:	signature:(SFSample *sample, char *description, u_char *start, int len)
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
limit_maxbytes	sflow.h	/^   uint32_t limit_maxbytes;$/;"	m	struct:_SFLMemcache_counters	access:public
linktype	sflowtool.c	/^  uint32_t linktype;	\/* data link type (DLT_*) *\/$/;"	m	struct:pcap_file_header	file:	access:public
listen4	sflowtool.c	/^  int listen4;$/;"	m	struct:_SFConfig	file:	access:public
listen6	sflowtool.c	/^  int listen6;$/;"	m	struct:_SFConfig	file:	access:public
listenControlled	sflowtool.c	/^  int listenControlled;$/;"	m	struct:_SFConfig	file:	access:public
listen_disabled_num	sflow.h	/^   uint32_t listen_disabled_num;$/;"	m	struct:_SFLMemcache_counters	access:public
load_fifteen	sflow.h	/^  float load_fifteen;  \/* 15 minute load avg. *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
load_five	sflow.h	/^  float load_five;     \/* 5 minute load avg. *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
load_one	sflow.h	/^  float load_one;      \/* 1 minute load avg. *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
local_ip	sflow.h	/^   SFLIPv4 local_ip;      \/* local IP address *\/$/;"	m	struct:_SFLExtended_socket_ipv4	access:public
local_ip	sflow.h	/^  SFLIPv6 local_ip;      \/* local IP address *\/$/;"	m	struct:_SFLExtended_socket_ipv6	access:public
local_port	sflow.h	/^   uint32_t local_port;   \/* TCP\/UDP local port number or equivalent *\/$/;"	m	struct:_SFLExtended_socket_ipv4	access:public
local_port	sflow.h	/^  uint32_t local_port;   \/* TCP\/UDP local port number or equivalent *\/$/;"	m	struct:_SFLExtended_socket_ipv6	access:public
localedir	Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localpref	sflow.h	/^  uint32_t localpref;                      \/* LocalPref associated with this route *\/$/;"	m	struct:_SFLExtended_gateway	access:public
localpref	sflowtool.c	/^  uint32_t localpref;$/;"	m	struct:_SFSample	file:	access:public
localpref	sflowtool.h	/^  uint32_t localpref;                      \/* LocalPref associated with this route *\/$/;"	m	struct:_INMExtended_gateway_v4	access:public
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
lstk	sflowtool.c	/^  SFLLabelStack lstk;$/;"	l
mac	sflow.h	/^  uint8_t mac[8];$/;"	m	struct:_SFLMacAddress	access:public
mac	sflowtool.c	/^  u_char *mac;$/;"	l
macAddr1	sflowtool.c	/^      u_char *macAddr1 = ptr;$/;"	l
macAddr2	sflowtool.c	/^      u_char *macAddr2 = ptr;$/;"	l
macAddr3	sflowtool.c	/^      u_char *macAddr3 = ptr;$/;"	l
machine_type	sflow.h	/^  uint32_t machine_type; \/* enum SFLMachine_type *\/$/;"	m	struct:_SFLHostId	access:public
macs	sflow.h	/^  SFLMacAddress macs[1];$/;"	m	struct:_SFLAdaptor	access:public
magic	sflowtool.c	/^  uint32_t magic;$/;"	m	struct:pcap_file_header	file:	access:public
main	sflowtool.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
maintainer-clean	Makefile	/^maintainer-clean: maintainer-clean-am$/;"	t
maintainer-clean-am	Makefile	/^maintainer-clean-am: distclean-am maintainer-clean-generic$/;"	t
maintainer-clean-generic	Makefile	/^maintainer-clean-generic:$/;"	t
mandir	Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mapped_prefix	sflowtool.c	/^    static char mapped_prefix[] = { 0,0,0,0,0,0,0,0,0,0,0xFF,0xFF };$/;"	l	file:
markOffset	sflowtool.c	/^  uint32_t markOffset = (u_char *)sample->datap - sample->rawSample;$/;"	l
maxMemory	sflow.h	/^  uint64_t maxMemory;   \/* memory in bytes allowed *\/$/;"	m	struct:_SFLHost_vrt_mem_counters	access:public
maxlen	sflowtool.c	/^  int maxlen = (strlen(in) * 3) + 1;$/;"	l
meanSkipCount	sflowtool.c	/^  uint32_t meanSkipCount;$/;"	m	struct:_SFSample	file:	access:public
mem_buffers	sflow.h	/^  uint64_t mem_buffers;  \/* buffers bytes *\/$/;"	m	struct:_SFLHost_mem_counters	access:public
mem_cached	sflow.h	/^  uint64_t mem_cached;   \/* cached bytes *\/$/;"	m	struct:_SFLHost_mem_counters	access:public
mem_free	sflow.h	/^  uint64_t mem_free;     \/* free bytes *\/$/;"	m	struct:_SFLHost_mem_counters	access:public
mem_max	sflow.h	/^  uint64_t mem_max;$/;"	m	struct:__anon14	access:public
mem_shared	sflow.h	/^  uint64_t mem_shared;   \/* shared bytes *\/$/;"	m	struct:_SFLHost_mem_counters	access:public
mem_total	sflow.h	/^  uint64_t mem_total;    \/* total bytes *\/$/;"	m	struct:_SFLHost_mem_counters	access:public
mem_used	sflow.h	/^  uint64_t mem_used;$/;"	m	struct:__anon14	access:public
memcache	sflow.h	/^  SFLMemcache_counters memcache;$/;"	m	union:_SFLCounters_type	access:public
memcache	sflow.h	/^  SFLSampled_memcache memcache;$/;"	m	union:_SFLFlow_type	access:public
memory	sflow.h	/^   uint64_t memory;        \/* memory size in bytes *\/$/;"	m	struct:_SFLHost_vrt_node_counters	access:public
memory	sflow.h	/^  uint64_t memory;      \/* memory in bytes used by domain *\/$/;"	m	struct:_SFLHost_vrt_mem_counters	access:public
memory_free	sflow.h	/^   uint64_t memory_free;   \/* unassigned memory in bytes *\/$/;"	m	struct:_SFLHost_vrt_node_counters	access:public
methd_connect_count	sflow.h	/^  uint32_t methd_connect_count;$/;"	m	struct:_SFLHTTP_counters	access:public
method	sflow.h	/^  SFLHTTP_method method;$/;"	m	struct:_SFLSampled_http	access:public
method	sflowtool.c	/^  uint32_t method;$/;"	l
method_delete_count	sflow.h	/^  uint32_t method_delete_count;$/;"	m	struct:_SFLHTTP_counters	access:public
method_get_count	sflow.h	/^  uint32_t method_get_count;$/;"	m	struct:_SFLHTTP_counters	access:public
method_head_count	sflow.h	/^  uint32_t method_head_count;$/;"	m	struct:_SFLHTTP_counters	access:public
method_option_count	sflow.h	/^  uint32_t method_option_count;$/;"	m	struct:_SFLHTTP_counters	access:public
method_other_count	sflow.h	/^  uint32_t method_other_count;$/;"	m	struct:_SFLHTTP_counters	access:public
method_post_count	sflow.h	/^  uint32_t method_post_count;$/;"	m	struct:_SFLHTTP_counters	access:public
method_put_count	sflow.h	/^  uint32_t method_put_count;$/;"	m	struct:_SFLHTTP_counters	access:public
method_trace_count	sflow.h	/^  uint32_t method_trace_count;$/;"	m	struct:_SFLHTTP_counters	access:public
mhz	sflow.h	/^   uint32_t mhz;           \/* expected CPU frequency *\/$/;"	m	struct:_SFLHost_vrt_node_counters	access:public
mimetype	sflow.h	/^  SFLString mimetype;      \/* Mime-Type (<=64 bytes) *\/$/;"	m	struct:_SFLSampled_http	access:public
mimetype	sflowtool.c	/^  char mimetype[SFL_MAX_HTTP_MIMETYPE+1];$/;"	l
minus	sflowtool.c	/^  int plus,minus;$/;"	l
mkdir_p	Makefile	/^mkdir_p = \/bin\/mkdir -p$/;"	m
mkinstalldirs	Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
moreData	sflowtool.c	/^  uint32_t moreData = (fc >> 13) & 1;$/;"	l
moreFrag	sflowtool.c	/^  uint32_t moreFrag = (fc >> 10) & 1;$/;"	l
mostlyclean	Makefile	/^mostlyclean: mostlyclean-am$/;"	t
mostlyclean-am	Makefile	/^mostlyclean-am: mostlyclean-compile mostlyclean-generic$/;"	t
mostlyclean-compile	Makefile	/^mostlyclean-compile:$/;"	t
mostlyclean-generic	Makefile	/^mostlyclean-generic:$/;"	t
mpls	sflow.h	/^  SFLExtended_mpls mpls;$/;"	m	union:_SFLFlow_type	access:public
mplsFTNDescr	sflow.h	/^   SFLString mplsFTNDescr;$/;"	m	struct:_SFLExtended_mpls_FTN	access:public
mplsFTNMask	sflow.h	/^   uint32_t mplsFTNMask;$/;"	m	struct:_SFLExtended_mpls_FTN	access:public
mplsFecAddrPrefixLength	sflow.h	/^   uint32_t mplsFecAddrPrefixLength;$/;"	m	struct:_SFLExtended_mpls_LDP_FEC	access:public
mplsLabelStack	sflowtool.c	/^static void mplsLabelStack(SFSample *sample, char *fieldName)$/;"	f	file:	signature:(SFSample *sample, char *fieldName)
mpls_ftn	sflow.h	/^  SFLExtended_mpls_FTN mpls_ftn;$/;"	m	union:_SFLFlow_type	access:public
mpls_ldp_fec	sflow.h	/^  SFLExtended_mpls_LDP_FEC mpls_ldp_fec;$/;"	m	union:_SFLFlow_type	access:public
mpls_nextHop	sflowtool.c	/^  SFLAddress mpls_nextHop;$/;"	m	struct:_SFSample	file:	access:public
mpls_tunnel	sflow.h	/^  SFLExtended_mpls_tunnel mpls_tunnel;$/;"	m	union:_SFLFlow_type	access:public
mpls_vc	sflow.h	/^  SFLExtended_mpls_vc mpls_vc;$/;"	m	union:_SFLFlow_type	access:public
msg	sflowtool.c	/^  char *msg = "";$/;"	l
multicastPkts	sflow.h	/^  uint32_t multicastPkts;$/;"	m	struct:_SFLVlan_counters	access:public
multicastPkts	sflowtool.h	/^  uint32_t multicastPkts;$/;"	m	struct:_INMVlan_counters	access:public
mySendPacket	sflowtool.c	/^struct mySendPacket {$/;"	s	file:
mySendPacket::data	sflowtool.c	/^  u_char data[SPOOFSOURCE_SENDPACKET_SIZE];$/;"	m	struct:mySendPacket	file:	access:public
mySendPacket::ip	sflowtool.c	/^  struct myiphdr ip;$/;"	m	struct:mySendPacket	typeref:struct:mySendPacket::myiphdr	file:	access:public
mySendPacket::udp	sflowtool.c	/^  struct myudphdr udp;$/;"	m	struct:mySendPacket	typeref:struct:mySendPacket::myudphdr	file:	access:public
my_as	sflowtool.c	/^  uint32_t my_as;$/;"	m	struct:_SFSample	file:	access:public
myaddr_in	sflowtool.c	/^  struct sockaddr_in myaddr_in;$/;"	l
myaddr_in6	sflowtool.c	/^  struct sockaddr_in6 myaddr_in6;$/;"	l
myicmphdr	sflowtool.c	/^struct myicmphdr$/;"	s	file:
myicmphdr::code	sflowtool.c	/^  uint8_t code;		\/* type sub-code *\/$/;"	m	struct:myicmphdr	file:	access:public
myicmphdr::type	sflowtool.c	/^  uint8_t type;		\/* message type *\/$/;"	m	struct:myicmphdr	file:	access:public
myiphdr	sflowtool.c	/^struct myiphdr$/;"	s	file:
myiphdr::check	sflowtool.c	/^    uint16_t check;$/;"	m	struct:myiphdr	file:	access:public
myiphdr::daddr	sflowtool.c	/^    uint32_t daddr;$/;"	m	struct:myiphdr	file:	access:public
myiphdr::frag_off	sflowtool.c	/^    uint16_t frag_off;$/;"	m	struct:myiphdr	file:	access:public
myiphdr::id	sflowtool.c	/^    uint16_t id;$/;"	m	struct:myiphdr	file:	access:public
myiphdr::protocol	sflowtool.c	/^    uint8_t protocol;$/;"	m	struct:myiphdr	file:	access:public
myiphdr::saddr	sflowtool.c	/^    uint32_t saddr;$/;"	m	struct:myiphdr	file:	access:public
myiphdr::tos	sflowtool.c	/^    uint8_t tos;$/;"	m	struct:myiphdr	file:	access:public
myiphdr::tot_len	sflowtool.c	/^    uint16_t tot_len;$/;"	m	struct:myiphdr	file:	access:public
myiphdr::ttl	sflowtool.c	/^    uint8_t ttl;$/;"	m	struct:myiphdr	file:	access:public
myiphdr::version_and_headerLen	sflowtool.c	/^    uint8_t version_and_headerLen;$/;"	m	struct:myiphdr	file:	access:public
mytcphdr	sflowtool.c	/^struct mytcphdr$/;"	s	file:
mytcphdr::th_ack	sflowtool.c	/^    uint32_t th_ack;		\/* acknowledgement number *\/$/;"	m	struct:mytcphdr	file:	access:public
mytcphdr::th_dport	sflowtool.c	/^    uint16_t th_dport;		\/* destination port *\/$/;"	m	struct:mytcphdr	file:	access:public
mytcphdr::th_flags	sflowtool.c	/^    uint8_t th_flags;$/;"	m	struct:mytcphdr	file:	access:public
mytcphdr::th_off_and_unused	sflowtool.c	/^    uint8_t th_off_and_unused;$/;"	m	struct:mytcphdr	file:	access:public
mytcphdr::th_seq	sflowtool.c	/^    uint32_t th_seq;		\/* sequence number *\/$/;"	m	struct:mytcphdr	file:	access:public
mytcphdr::th_sport	sflowtool.c	/^    uint16_t th_sport;		\/* source port *\/$/;"	m	struct:mytcphdr	file:	access:public
mytcphdr::th_sum	sflowtool.c	/^    uint16_t th_sum;		\/* checksum *\/$/;"	m	struct:mytcphdr	file:	access:public
mytcphdr::th_urp	sflowtool.c	/^    uint16_t th_urp;		\/* urgent pointer *\/$/;"	m	struct:mytcphdr	file:	access:public
mytcphdr::th_win	sflowtool.c	/^    uint16_t th_win;		\/* window *\/$/;"	m	struct:mytcphdr	file:	access:public
myudphdr	sflowtool.c	/^struct myudphdr {$/;"	s	file:
myudphdr::uh_dport	sflowtool.c	/^  uint16_t uh_dport;           \/* destination port *\/$/;"	m	struct:myudphdr	file:	access:public
myudphdr::uh_sport	sflowtool.c	/^  uint16_t uh_sport;           \/* source port *\/$/;"	m	struct:myudphdr	file:	access:public
myudphdr::uh_sum	sflowtool.c	/^  uint16_t uh_sum;             \/* udp checksum *\/$/;"	m	struct:myudphdr	file:	access:public
myudphdr::uh_ulen	sflowtool.c	/^  uint16_t uh_ulen;            \/* udp length *\/$/;"	m	struct:myudphdr	file:	access:public
nat	sflow.h	/^  SFLExtended_nat nat;$/;"	m	union:_SFLFlow_type	access:public
nat_dst	sflowtool.c	/^  SFLAddress nat_dst;$/;"	m	struct:_SFSample	file:	access:public
nat_src	sflowtool.c	/^  SFLAddress nat_src;$/;"	m	struct:_SFSample	file:	access:public
netFlowOutputIP	sflowtool.c	/^  struct in_addr netFlowOutputIP;$/;"	m	struct:_SFConfig	typeref:struct:_SFConfig::in_addr	file:	access:public
netFlowOutputPort	sflowtool.c	/^  uint16_t netFlowOutputPort;$/;"	m	struct:_SFConfig	file:	access:public
netFlowOutputSocket	sflowtool.c	/^  int netFlowOutputSocket;$/;"	m	struct:_SFConfig	file:	access:public
netFlowPeerAS	sflowtool.c	/^  uint16_t netFlowPeerAS;$/;"	m	struct:_SFConfig	file:	access:public
nextHeader	sflowtool.c	/^  uint32_t nextHeader;$/;"	l
nextHop	sflow.h	/^  SFLAddress nextHop;        \/* Address of the next hop *\/ $/;"	m	struct:_SFLExtended_mpls	access:public
nextHop	sflowtool.c	/^  SFLAddress nextHop;$/;"	m	struct:_SFSample	file:	access:public
nextHop	sflowtool.c	/^  uint32_t nextHop;$/;"	m	struct:_NFFlow5	file:	access:public
nexthop	sflow.h	/^  SFLAddress nexthop;                       \/* Address of the border router that should$/;"	m	struct:_SFLExtended_gateway	access:public
nexthop	sflow.h	/^  SFLAddress nexthop;               \/* IP address of next hop router *\/$/;"	m	struct:_SFLExtended_router	access:public
nexthop	sflowtool.h	/^  INMAddress nexthop;               \/* IP address of next hop router *\/$/;"	m	struct:_INMExtended_router	access:public
nfKey	sflowtool.c	/^    SFLSampled_ipv4 nfKey;$/;"	l
nfKey6	sflowtool.c	/^    SFLSampled_ipv6 nfKey6;$/;"	l
nfds	sflowtool.c	/^      int nfds;$/;"	l
nhmem_committed	sflow.h	/^  uint64_t nhmem_committed;$/;"	m	struct:_SFLJMX_counters	access:public
nhmem_initial	sflow.h	/^  uint64_t nhmem_initial;$/;"	m	struct:_SFLJMX_counters	access:public
nhmem_max	sflow.h	/^  uint64_t nhmem_max;$/;"	m	struct:_SFLJMX_counters	access:public
nhmem_used	sflow.h	/^  uint64_t nhmem_used;$/;"	m	struct:_SFLJMX_counters	access:public
nkeys	sflow.h	/^  uint32_t nkeys;$/;"	m	struct:_SFLSampled_memcache	access:public
nleft	sflowtool.c	/^  int nleft = len;$/;"	l
now	sflowtool.c	/^    time_t now = time(NULL);$/;"	l
now	sflowtool.c	/^  struct timeval now;$/;"	l
now	sflowtool.c	/^  uint32_t now = (uint32_t)time(NULL);$/;"	l
nowstr	sflowtool.c	/^    char nowstr[200];$/;"	l
numOutputs	sflowtool.c	/^    uint32_t numOutputs = sample->outputPort & 0x7fffffff;$/;"	l
num_adaptors	sflow.h	/^  uint32_t num_adaptors;$/;"	m	struct:_SFLAdaptorList	access:public
num_adaptors	sflowtool.c	/^  uint32_t i, j, ifindex, num_macs, num_adaptors = getData32(sample);$/;"	l
num_domains	sflow.h	/^   uint32_t num_domains;   \/* number of active domains *\/$/;"	m	struct:_SFLHost_vrt_node_counters	access:public
num_elements	sflow.h	/^  uint32_t num_elements;$/;"	m	struct:_SFLCounters_sample	access:public
num_elements	sflow.h	/^  uint32_t num_elements;$/;"	m	struct:_SFLCounters_sample_expanded	access:public
num_elements	sflow.h	/^  uint32_t num_elements;$/;"	m	struct:_SFLFlow_Pdu	access:public
num_elements	sflow.h	/^  uint32_t num_elements;$/;"	m	struct:_SFLFlow_sample	access:public
num_elements	sflow.h	/^  uint32_t num_elements;$/;"	m	struct:_SFLFlow_sample_expanded	access:public
num_elements	sflowtool.c	/^  uint32_t num_elements, sampleLength;$/;"	l
num_elements	sflowtool.c	/^  uint32_t num_elements;$/;"	l
num_extended	sflowtool.c	/^  uint32_t num_extended;$/;"	m	struct:_SFSample	file:	access:public
num_macs	sflow.h	/^  uint32_t num_macs;$/;"	m	struct:_SFLAdaptor	access:public
num_macs	sflowtool.c	/^  uint32_t i, j, ifindex, num_macs, num_adaptors = getData32(sample);$/;"	l
num_pdus	sflow.h	/^  uint32_t num_pdus;$/;"	m	struct:_SFLExtended_aggregation	access:public
num_pdus	sflowtool.c	/^  uint32_t i, num_pdus = getData32(sample);$/;"	l
num_records	sflow.h	/^  uint32_t num_records;           \/* Number of tag-len-val flow\/counter records to follow *\/$/;"	m	struct:_SFLSample_datagram_hdr	access:public
num_samples	sflowtool.h	/^  uint32_t num_samples;           \/* Number of flow and counters samples to follow *\/$/;"	m	struct:_INMSample_datagram_hdr	access:public
nxt	sflow.h	/^  struct _SFLCounters_sample_element *nxt; \/* linked list *\/$/;"	m	struct:_SFLCounters_sample_element	typeref:struct:_SFLCounters_sample_element::_SFLCounters_sample_element	access:public
nxt	sflow.h	/^  struct _SFLFlow_Pdu *nxt;$/;"	m	struct:_SFLFlow_Pdu	typeref:struct:_SFLFlow_Pdu::_SFLFlow_Pdu	access:public
nxt	sflow.h	/^  struct _SFLFlow_sample_element *nxt;$/;"	m	struct:_SFLFlow_sample_element	typeref:struct:_SFLFlow_sample_element::_SFLFlow_sample_element	access:public
nxt	sflowtool.c	/^  struct _SFForwardingTarget *nxt;$/;"	m	struct:_SFForwardingTarget	typeref:struct:_SFForwardingTarget::_SFForwardingTarget	file:	access:public
octets	sflow.h	/^  uint64_t octets;$/;"	m	struct:_SFLVlan_counters	access:public
octets	sflowtool.h	/^  uint64_t octets;$/;"	m	struct:_INMVlan_counters	access:public
offsetToIPV4	sflowtool.c	/^  int offsetToIPV4;$/;"	m	struct:_SFSample	file:	access:public
offsetToIPV6	sflowtool.c	/^  int offsetToIPV6;$/;"	m	struct:_SFSample	file:	access:public
offsetToPayload	sflowtool.c	/^  int offsetToPayload;$/;"	m	struct:_SFSample	file:	access:public
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
on	sflowtool.c	/^  int on;$/;"	l
on_channel_busy_time	sflow.h	/^  uint32_t on_channel_busy_time; \/* time in ms spent on channel and busy *\/$/;"	m	struct:_SFLRadio_counters	access:public
on_channel_time	sflow.h	/^  uint32_t on_channel_time;      \/* time in ms spent on channel *\/$/;"	m	struct:_SFLRadio_counters	access:public
one_min_cpu	sflow.h	/^   uint32_t one_min_cpu;   \/* 1 minute average CPU utilization *\/$/;"	m	struct:_SFLProcessor_counters	access:public
openInputUDP6Socket	sflowtool.c	/^static int openInputUDP6Socket(uint16_t port)$/;"	f	file:	signature:(uint16_t port)
openInputUDPSocket	sflowtool.c	/^static int openInputUDPSocket(uint16_t port)$/;"	f	file:	signature:(uint16_t port)
openNetFlowSocket	sflowtool.c	/^static void openNetFlowSocket()$/;"	f	file:
openNetFlowSocket_spoof	sflowtool.c	/^static void openNetFlowSocket_spoof()$/;"	f	file:
operation	sflow.h	/^  SFLString operation;    \/* type of operation (e.g. authorization, payment) *\/$/;"	m	struct:__anon11	access:public
operation	sflowtool.c	/^  char operation[SFLAPP_MAX_OPERATION_LEN];$/;"	l
optionLen	sflowtool.c	/^      uint32_t optionLen, skip;$/;"	l
order	sflowtool.c	/^  uint32_t order = fc >> 15;$/;"	l
os_name	sflow.h	/^  uint32_t os_name;      \/* enum SFLOS_name *\/$/;"	m	struct:_SFLHostId	access:public
os_release	sflow.h	/^  SFLString os_release;  \/* max len 32 bytes *\/$/;"	m	struct:_SFLHostId	access:public
os_release	sflowtool.c	/^  char os_release[SFL_MAX_OSRELEASE_LEN+1];$/;"	l
out_priority	sflowtool.c	/^  uint32_t out_priority;$/;"	m	struct:_SFSample	file:	access:public
out_stack	sflow.h	/^  SFLLabelStack out_stack;$/;"	m	struct:_SFLExtended_mpls	access:public
out_vlan	sflowtool.c	/^  uint32_t out_vlan;$/;"	m	struct:_SFSample	file:	access:public
outp	sflowtool.c	/^    uint32_t inp, outp;$/;"	l
output	sflow.h	/^  uint32_t output;               \/* SNMP ifIndex of output interface,$/;"	m	struct:_SFLFlow_sample	access:public
output	sflow.h	/^  uint32_t output;               \/* SNMP ifIndex of output interface,$/;"	m	struct:_SFLFlow_sample_expanded	access:public
output	sflowtool.h	/^  uint32_t output;               \/* SNMP ifIndex of output interface,$/;"	m	struct:_INMFlow_sample	access:public
outputFormat	sflow.h	/^  uint32_t outputFormat;         \/* EXPANDED *\/$/;"	m	struct:_SFLFlow_sample_expanded	access:public
outputFormat	sflowtool.c	/^  EnumSFLFormat outputFormat;$/;"	m	struct:_SFConfig	file:	access:public
outputPort	sflowtool.c	/^  uint32_t outputPort;$/;"	m	struct:_SFSample	file:	access:public
outputPortFormat	sflowtool.c	/^  uint32_t outputPortFormat;$/;"	m	struct:_SFSample	file:	access:public
p	sflowtool.c	/^  char *p = start;$/;"	l
p	sflowtool.c	/^  char *p;$/;"	l
p	sflowtool.c	/^  u_char *p;$/;"	l
packetLen	sflowtool.c	/^  uint16_t packetLen = sizeof(*pkt) + sizeof(struct myiphdr) + sizeof(struct myudphdr);$/;"	l
packetLen	sflowtool.c	/^  uint32_t packetLen;$/;"	m	struct:_SFConfig	file:	access:public
packet_data	sflowtool.h	/^  INMPacket_data_type packet_data; \/* Information about sampled packet *\/$/;"	m	struct:_INMFlow_sample	access:public
packet_data_tag	sflowtool.c	/^  uint32_t packet_data_tag;$/;"	m	struct:_SFSample	file:	access:public
packet_data_tag	sflowtool.h	/^  uint32_t packet_data_tag;       \/* enum INMPacket_information_type *\/$/;"	m	struct:_INMFlow_sample	access:public
packet_duration_us	sflow.h	/^  uint32_t packet_duration_us;  \/* amount of time that the successfully$/;"	m	struct:_SFLExtended_wifi_tx	access:public
packet_duration_us	sflow.h	/^  uint32_t packet_duration_us; \/* amount of time that the successfully received pkt occupied RF medium.*\/$/;"	m	struct:_SFLExtended_wifi_rx	access:public
pad1	sflowtool.c	/^  uint8_t pad1;$/;"	m	struct:_NFFlow5	file:	access:public
pad2	sflowtool.c	/^  uint16_t pad2;$/;"	m	struct:_NFFlow5	file:	access:public
page_in	sflow.h	/^  uint32_t page_in;      \/* page in count *\/$/;"	m	struct:_SFLHost_mem_counters	access:public
page_out	sflow.h	/^  uint32_t page_out;     \/* page out count *\/$/;"	m	struct:_SFLHost_mem_counters	access:public
parseVlanFilter	sflowtool.c	/^static void parseVlanFilter(u_char *array, u_char flag, char *start)$/;"	f	file:	signature:(u_char *array, u_char flag, char *start)
part_max_used	sflow.h	/^  uint32_t part_max_used;   \/* as percent * 100, so 100==1% *\/$/;"	m	struct:_SFLHost_dsk_counters	access:public
payloadLen	sflowtool.c	/^  uint16_t payloadLen;$/;"	l
pcapSwap	sflowtool.c	/^  int pcapSwap;$/;"	m	struct:_SFConfig	file:	access:public
pcapTimestamp	sflowtool.c	/^  time_t pcapTimestamp;$/;"	m	struct:_SFSample	file:	access:public
pcap_file_header	sflowtool.c	/^struct pcap_file_header {$/;"	s	file:
pcap_file_header::linktype	sflowtool.c	/^  uint32_t linktype;	\/* data link type (DLT_*) *\/$/;"	m	struct:pcap_file_header	file:	access:public
pcap_file_header::magic	sflowtool.c	/^  uint32_t magic;$/;"	m	struct:pcap_file_header	file:	access:public
pcap_file_header::sigfigs	sflowtool.c	/^  uint32_t sigfigs;	\/* accuracy of timestamps *\/$/;"	m	struct:pcap_file_header	file:	access:public
pcap_file_header::snaplen	sflowtool.c	/^  uint32_t snaplen;	\/* max length saved portion of each pkt *\/$/;"	m	struct:pcap_file_header	file:	access:public
pcap_file_header::thiszone	sflowtool.c	/^  uint32_t thiszone;	\/* gmt to local correction *\/$/;"	m	struct:pcap_file_header	file:	access:public
pcap_file_header::version_major	sflowtool.c	/^  uint16_t version_major;$/;"	m	struct:pcap_file_header	file:	access:public
pcap_file_header::version_minor	sflowtool.c	/^  uint16_t version_minor;$/;"	m	struct:pcap_file_header	file:	access:public
pcap_pkthdr	sflowtool.c	/^struct pcap_pkthdr {$/;"	s	file:
pcap_pkthdr::caplen	sflowtool.c	/^  uint32_t caplen;	\/* length of portion present *\/$/;"	m	struct:pcap_pkthdr	file:	access:public
pcap_pkthdr::len	sflowtool.c	/^  uint32_t len;	\/* length this packet (off wire) *\/$/;"	m	struct:pcap_pkthdr	file:	access:public
pcap_pkthdr::ts_sec	sflowtool.c	/^  uint32_t ts_sec;	\/* time stamp - used to be struct timeval, but time_t can be 64 bits now *\/$/;"	m	struct:pcap_pkthdr	file:	access:public
pcap_pkthdr::ts_usec	sflowtool.c	/^  uint32_t ts_usec;$/;"	m	struct:pcap_pkthdr	file:	access:public
pdf	Makefile	/^pdf: pdf-am$/;"	t
pdf-am	Makefile	/^pdf-am:$/;"	t
pdfdir	Makefile	/^pdfdir = ${docdir}$/;"	m
pdus	sflow.h	/^  struct _SFFlow_Pdu *pdus;$/;"	m	struct:_SFLExtended_aggregation	typeref:struct:_SFLExtended_aggregation::_SFFlow_Pdu	access:public
peekForNumber	sflowtool.c	/^static void peekForNumber(char *p) {$/;"	f	file:	signature:(char *p)
peer	sflowtool.c	/^  struct sockaddr_in6 peer;$/;"	l
peer4	sflowtool.c	/^      struct sockaddr_in *peer4 = (struct sockaddr_in *)&peer;$/;"	l
percent	sflowtool.c	/^    float percent = (float)hundredths \/ (float)100.0;$/;"	l
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/sflowtool$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/sflowtool$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/sflowtool$/;"	m
pkglibexecdir	Makefile	/^pkglibexecdir = $(libexecdir)\/sflowtool$/;"	m
pkt	sflowtool.c	/^  NFFlowPkt5 pkt;$/;"	l
pkts_in	sflow.h	/^  uint32_t pkts_in;$/;"	m	struct:_SFLHost_nio_counters	access:public
pkts_in	sflow.h	/^  uint32_t pkts_in;$/;"	m	struct:_SFLHost_vrt_nio_counters	access:public
pkts_out	sflow.h	/^  uint32_t pkts_out;$/;"	m	struct:_SFLHost_nio_counters	access:public
pkts_out	sflow.h	/^  uint32_t pkts_out;$/;"	m	struct:_SFLHost_vrt_nio_counters	access:public
plus	sflowtool.c	/^  int plus,minus;$/;"	l
port	sflowtool.c	/^  uint32_t port;$/;"	m	struct:_SFForwardingTarget	file:	access:public
power_mw	sflow.h	/^  uint32_t power_mw;           \/* transmit power in mW. *\/$/;"	m	struct:_SFLExtended_wifi_tx	access:public
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
printAddress	sflowtool.c	/^static char *printAddress(SFLAddress *address, char *buf, int bufLen) {$/;"	f	file:	signature:(SFLAddress *address, char *buf, int bufLen)
printHex	sflowtool.c	/^int printHex(const u_char *a, int len, u_char *buf, int bufLen, int marker, int bytesPerOutputLine)$/;"	f	signature:(const u_char *a, int len, u_char *buf, int bufLen, int marker, int bytesPerOutputLine)
printTag	sflowtool.c	/^static char *printTag(uint32_t tag, char *buf, int bufLen) {$/;"	f	file:	signature:(uint32_t tag, char *buf, int bufLen)
priority	sflow.h	/^  uint32_t priority;     \/* IP priority *\/$/;"	m	struct:_SFLSampled_ipv6	access:public
priority	sflowtool.c	/^    uint32_t priority = vlanData >> 13;$/;"	l
proc_run	sflow.h	/^  uint32_t proc_run;   \/* running threads *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
proc_total	sflow.h	/^  uint32_t proc_total; \/* total threads *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
process_command_line	sflowtool.c	/^static void process_command_line(int argc, char *argv[])$/;"	f	file:	signature:(int argc, char *argv[])
processor	sflow.h	/^  SFLProcessor_counters processor;$/;"	m	union:_SFLCounters_type	access:public
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
proto	sflowtool.c	/^      u_char proto;$/;"	m	struct:udpmagichdr	file:	access:public
protocol	sflow.h	/^   uint32_t protocol;     \/* IP Protocol (e.g. TCP = 6, UDP = 17) *\/$/;"	m	struct:_SFLExtended_socket_ipv4	access:public
protocol	sflow.h	/^  uint32_t protocol;       \/* 1.1=1001 *\/$/;"	m	struct:_SFLSampled_http	access:public
protocol	sflow.h	/^  uint32_t protocol;     \/* IP Protocol (e.g. TCP = 6, UDP = 17) *\/$/;"	m	struct:_SFLExtended_socket_ipv6	access:public
protocol	sflow.h	/^  uint32_t protocol;     \/* IP Protocol type (for example, TCP = 6, UDP = 17) *\/$/;"	m	struct:_SFLSampled_ipv6	access:public
protocol	sflow.h	/^  uint32_t protocol;    \/* IP Protocol type (for example, TCP = 6, UDP = 17) *\/$/;"	m	struct:_SFLSampled_ipv4	access:public
protocol	sflow.h	/^  uint32_t protocol;    \/* SFLMemcache_prot *\/$/;"	m	struct:_SFLSampled_memcache	access:public
protocol	sflowtool.c	/^    uint8_t protocol;$/;"	m	struct:myiphdr	file:	access:public
protocol	sflowtool.c	/^  uint32_t protocol;$/;"	l
protocol	sflowtool.h	/^  uint32_t protocol;     \/* IP Protocol type (for example, TCP = 6, UDP = 17) *\/$/;"	m	struct:_INMSampled_ipv6	access:public
protocol	sflowtool.h	/^  uint32_t protocol;    \/* IP Protocol type (for example, TCP = 6, UDP = 17) *\/$/;"	m	struct:_INMSampled_ipv4	access:public
protocolVersion	sflowtool.c	/^  uint32_t protocolVersion = fc & 3;$/;"	l
ps	Makefile	/^ps: ps-am$/;"	t
ps-am	Makefile	/^ps-am:$/;"	t
psdir	Makefile	/^psdir = ${docdir}$/;"	m
ptr	sflowtool.c	/^    char *ptr;$/;"	l
ptr	sflowtool.c	/^    u_char *ptr = sample->header + sample->offsetToIPV4;$/;"	l
ptr	sflowtool.c	/^    u_char *ptr = sample->header + sample->offsetToIPV6;$/;"	l
ptr	sflowtool.c	/^  u_char *ptr = start;$/;"	l
pwrMgt	sflowtool.c	/^  uint32_t pwrMgt = (fc >> 12) & 1;$/;"	l
quads	sflowtool.c	/^  int quads = (skip + 3) \/ 4;$/;"	l
r	sflowtool.c	/^  register char c, *r = in, *w = out;$/;"	l
radio	sflow.h	/^  SFLRadio_counters radio;$/;"	m	union:_SFLCounters_type	access:public
rawSample	sflowtool.c	/^  u_char *rawSample;$/;"	m	struct:_SFSample	file:	access:public
rawSampleLen	sflowtool.c	/^  uint32_t rawSampleLen;$/;"	m	struct:_SFSample	file:	access:public
rcpi	sflow.h	/^  uint32_t rcpi;          \/* received channel power, see dot11FrameRprtLastRCPI *\/$/;"	m	struct:_SFLExtended_wifi_rx	access:public
rd_bytes	sflow.h	/^  uint64_t rd_bytes;   \/* number of read bytes *\/$/;"	m	struct:_SFLHost_vrt_dsk_counters	access:public
rd_req	sflow.h	/^  uint32_t rd_req;     \/* number of read requests *\/$/;"	m	struct:_SFLHost_vrt_dsk_counters	access:public
readCountersSample	sflowtool.c	/^static void readCountersSample(SFSample *sample, int expanded)$/;"	f	file:	signature:(SFSample *sample, int expanded)
readCountersSample_v2v4	sflowtool.c	/^static void readCountersSample_v2v4(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_80211	sflowtool.c	/^static void readCounters_80211(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_APP	sflowtool.c	/^static void readCounters_APP(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_APP_RESOURCE	sflowtool.c	/^static void readCounters_APP_RESOURCE(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_JMX	sflowtool.c	/^static void readCounters_JMX(SFSample *sample, uint32_t length)$/;"	f	file:	signature:(SFSample *sample, uint32_t length)
readCounters_JVM	sflowtool.c	/^static void readCounters_JVM(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_adaptors	sflowtool.c	/^static void readCounters_adaptors(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_ethernet	sflowtool.c	/^static  void readCounters_ethernet(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_generic	sflowtool.c	/^static void readCounters_generic(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_host_cpu	sflowtool.c	/^static void readCounters_host_cpu(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_host_dsk	sflowtool.c	/^static void readCounters_host_dsk(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_host_hid	sflowtool.c	/^static void readCounters_host_hid(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_host_mem	sflowtool.c	/^static void readCounters_host_mem(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_host_nio	sflowtool.c	/^static void readCounters_host_nio(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_host_parent	sflowtool.c	/^static void readCounters_host_parent(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_host_vcpu	sflowtool.c	/^static void readCounters_host_vcpu(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_host_vdsk	sflowtool.c	/^static void readCounters_host_vdsk(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_host_vmem	sflowtool.c	/^static void readCounters_host_vmem(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_host_vnio	sflowtool.c	/^static void readCounters_host_vnio(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_host_vnode	sflowtool.c	/^static void readCounters_host_vnode(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_http	sflowtool.c	/^static void readCounters_http(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_memcache	sflowtool.c	/^static void readCounters_memcache(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_processor	sflowtool.c	/^static void readCounters_processor(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_radio	sflowtool.c	/^static void readCounters_radio(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_tokenring	sflowtool.c	/^static void readCounters_tokenring(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_vg	sflowtool.c	/^static void readCounters_vg(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readCounters_vlan	sflowtool.c	/^static void readCounters_vlan(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readExtendedAggregation	sflowtool.c	/^static void readExtendedAggregation(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readExtendedGateway	sflowtool.c	/^static void readExtendedGateway(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readExtendedGateway_v2	sflowtool.c	/^static void readExtendedGateway_v2(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readExtendedMpls	sflowtool.c	/^static void readExtendedMpls(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readExtendedMplsFTN	sflowtool.c	/^static void readExtendedMplsFTN(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readExtendedMplsLDP_FEC	sflowtool.c	/^static void readExtendedMplsLDP_FEC(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readExtendedMplsTunnel	sflowtool.c	/^static void readExtendedMplsTunnel(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readExtendedMplsVC	sflowtool.c	/^static void readExtendedMplsVC(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readExtendedNat	sflowtool.c	/^static void readExtendedNat(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readExtendedRouter	sflowtool.c	/^static void readExtendedRouter(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readExtendedSocket4	sflowtool.c	/^static void readExtendedSocket4(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readExtendedSocket6	sflowtool.c	/^static void readExtendedSocket6(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readExtendedSwitch	sflowtool.c	/^static void readExtendedSwitch(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readExtendedUrl	sflowtool.c	/^static void readExtendedUrl(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readExtendedUser	sflowtool.c	/^static void readExtendedUser(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readExtendedVlanTunnel	sflowtool.c	/^static void readExtendedVlanTunnel(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readExtendedWifiPayload	sflowtool.c	/^static void readExtendedWifiPayload(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readExtendedWifiRx	sflowtool.c	/^static void readExtendedWifiRx(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readExtendedWifiTx	sflowtool.c	/^static void readExtendedWifiTx(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readFlowSample	sflowtool.c	/^static void readFlowSample(SFSample *sample, int expanded)$/;"	f	file:	signature:(SFSample *sample, int expanded)
readFlowSample	sflowtool.c	/^static void readFlowSample(SFSample *sample, int expanded);$/;"	p	file:	signature:(SFSample *sample, int expanded)
readFlowSample_APP	sflowtool.c	/^static void readFlowSample_APP(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readFlowSample_APP_ACTOR_INIT	sflowtool.c	/^static void readFlowSample_APP_ACTOR_INIT(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readFlowSample_APP_ACTOR_TGT	sflowtool.c	/^static void readFlowSample_APP_ACTOR_TGT(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readFlowSample_APP_CTXT	sflowtool.c	/^static void readFlowSample_APP_CTXT(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readFlowSample_IPv4	sflowtool.c	/^static void readFlowSample_IPv4(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readFlowSample_IPv6	sflowtool.c	/^static void readFlowSample_IPv6(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readFlowSample_ethernet	sflowtool.c	/^static void readFlowSample_ethernet(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readFlowSample_header	sflowtool.c	/^static void readFlowSample_header(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readFlowSample_header	sflowtool.c	/^static void readFlowSample_header(SFSample *sample);$/;"	p	file:	signature:(SFSample *sample)
readFlowSample_http	sflowtool.c	/^static void readFlowSample_http(SFSample *sample, u_int32_t tag)$/;"	f	file:	signature:(SFSample *sample, u_int32_t tag)
readFlowSample_memcache	sflowtool.c	/^static void readFlowSample_memcache(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readFlowSample_v2v4	sflowtool.c	/^static void readFlowSample_v2v4(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
readPacket	sflowtool.c	/^static void readPacket(int soc)$/;"	f	file:	signature:(int soc)
readPcapFile	sflowtool.c	/^  FILE *readPcapFile;$/;"	m	struct:_SFConfig	file:	access:public
readPcapFileName	sflowtool.c	/^  char *readPcapFileName;$/;"	m	struct:_SFConfig	file:	access:public
readPcapHdr	sflowtool.c	/^  struct pcap_file_header readPcapHdr;$/;"	m	struct:_SFConfig	typeref:struct:_SFConfig::pcap_file_header	file:	access:public
readPcapHeader	sflowtool.c	/^static void readPcapHeader() {$/;"	f	file:
readPcapPacket	sflowtool.c	/^static int readPcapPacket(FILE *file)$/;"	f	file:	signature:(FILE *file)
readSFlowDatagram	sflowtool.c	/^static void readSFlowDatagram(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
read_len	sflowtool.c	/^  uint32_t len, read_len;$/;"	l
read_time	sflow.h	/^  uint32_t read_time;       \/* read time (ms) *\/$/;"	m	struct:_SFLHost_dsk_counters	access:public
readfds	sflowtool.c	/^    fd_set readfds;$/;"	l
reads	sflow.h	/^  uint32_t reads;           \/* reads issued *\/$/;"	m	struct:_SFLHost_dsk_counters	access:public
receiveError	sflowtool.c	/^static void receiveError(SFSample *sample, char *errm, int hexdump)$/;"	f	file:	signature:(SFSample *sample, char *errm, int hexdump)
receiveSFlowDatagram	sflowtool.c	/^static void receiveSFlowDatagram(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
referrer	sflow.h	/^  SFLString referrer;      \/* Referer value from request header (<=255 bytes) *\/$/;"	m	struct:_SFLSampled_http	access:public
referrer	sflowtool.c	/^  char referrer[SFL_MAX_HTTP_REFERRER+1];$/;"	l
reg	sflowtool.c	/^  uint32_t reg = getData32(sample);$/;"	l
remote_ip	sflow.h	/^   SFLIPv4 remote_ip;     \/* remote IP address *\/$/;"	m	struct:_SFLExtended_socket_ipv4	access:public
remote_ip	sflow.h	/^  SFLIPv6 remote_ip;     \/* remote IP address *\/$/;"	m	struct:_SFLExtended_socket_ipv6	access:public
remote_port	sflow.h	/^   uint32_t remote_port;  \/* TCP\/UDP remote port number of equivalent *\/$/;"	m	struct:_SFLExtended_socket_ipv4	access:public
remote_port	sflow.h	/^  uint32_t remote_port;  \/* TCP\/UDP remote port number of equivalent *\/$/;"	m	struct:_SFLExtended_socket_ipv6	access:public
removeContent	sflowtool.c	/^  int removeContent;$/;"	m	struct:_SFConfig	file:	access:public
req_bytes	sflow.h	/^  uint64_t req_bytes;          \/* size of request body (exclude headers) *\/$/;"	m	struct:__anon12	access:public
req_bytes	sflow.h	/^  uint64_t req_bytes;      \/* Content-Length of request *\/$/;"	m	struct:_SFLSampled_http	access:public
req_bytes	sflowtool.c	/^  uint64_t req_bytes;$/;"	l
resp_bytes	sflow.h	/^  uint64_t resp_bytes;         \/* size of response body (exclude headers) *\/$/;"	m	struct:__anon12	access:public
resp_bytes	sflow.h	/^  uint64_t resp_bytes;     \/* Content-Length of response *\/$/;"	m	struct:_SFLSampled_http	access:public
resp_bytes	sflowtool.c	/^  uint64_t resp_bytes;$/;"	l
retrans_duration_us	sflow.h	/^  uint32_t retrans_duration_us; \/* amount of time that failed transmission$/;"	m	struct:_SFLExtended_wifi_tx	access:public
retry	sflowtool.c	/^  uint32_t retry = (fc >> 11) & 1;$/;"	l
router	sflow.h	/^  SFLExtended_router router;$/;"	m	union:_SFLFlow_type	access:public
router	sflowtool.h	/^  INMExtended_router router;$/;"	m	struct:_INMFlow_sample	access:public
rsni	sflow.h	/^  uint32_t rsni;          \/* received signal to noise ratio, see dot11FrameRprtRSNI *\/$/;"	m	struct:_SFLExtended_wifi_rx	access:public
rusage_system	sflow.h	/^   uint32_t rusage_system;  \/* Accumulated system time for this process (ms)*\/$/;"	m	struct:_SFLMemcache_counters	access:public
rusage_system	sflow.h	/^  uint32_t rusage_system; \/* in milliseconds *\/$/;"	m	struct:__anon14	access:public
rusage_user	sflow.h	/^   uint32_t rusage_user;    \/* Accumulated user time for this process (ms)*\/$/;"	m	struct:_SFLMemcache_counters	access:public
rusage_user	sflow.h	/^  uint32_t rusage_user;   \/* in milliseconds *\/$/;"	m	struct:__anon14	access:public
rxMAC	sflowtool.c	/^      u_char *rxMAC = macAddr1;$/;"	l
sFlowInputPort	sflowtool.c	/^  uint16_t sFlowInputPort;$/;"	m	struct:_SFConfig	file:	access:public
saddr	sflowtool.c	/^    uint32_t saddr;$/;"	m	struct:myiphdr	file:	access:public
samp	sflowtool.c	/^    uint32_t samp = 0;$/;"	l
samp_ival	sflowtool.c	/^    uint16_t samp_ival = (uint16_t)sample->meanSkipCount;$/;"	l
sample	sflowtool.c	/^    SFSample sample;$/;"	l
sample	sflowtool.c	/^  SFSample sample;$/;"	l
sampleFilterOK	sflowtool.c	/^int sampleFilterOK(SFSample *sample)$/;"	f	signature:(SFSample *sample)
sampleLength	sflowtool.c	/^  uint32_t num_elements, sampleLength;$/;"	l
sampleLength	sflowtool.c	/^  uint32_t sampleLength;$/;"	l
samplePool	sflowtool.c	/^  uint32_t samplePool;$/;"	m	struct:_SFSample	file:	access:public
sampleStart	sflowtool.c	/^  u_char *sampleStart;$/;"	l
sampleType	sflowtool.c	/^  uint32_t sampleType;$/;"	m	struct:_SFSample	file:	access:public
sample_pool	sflow.h	/^  uint32_t sample_pool;          \/* Total number of packets that could have been$/;"	m	struct:_SFLFlow_sample	access:public
sample_pool	sflow.h	/^  uint32_t sample_pool;          \/* Total number of packets that could have been$/;"	m	struct:_SFLFlow_sample_expanded	access:public
sample_pool	sflowtool.h	/^  uint32_t sample_pool;          \/* Total number of packets that could have been$/;"	m	struct:_INMFlow_sample	access:public
sampledPacketSize	sflowtool.c	/^  uint32_t sampledPacketSize;$/;"	m	struct:_SFSample	file:	access:public
samplerId	sflowtool.c	/^    uint32_t samplerId = getData32(sample);$/;"	l
samplesGenerated	sflowtool.c	/^  uint32_t samplesGenerated;$/;"	m	struct:_SFSample	file:	access:public
samplesInPacket	sflowtool.c	/^  uint32_t samplesInPacket;$/;"	l
sampling_interval	sflowtool.c	/^  uint16_t sampling_interval;$/;"	m	struct:_NFFlowHdr5	file:	access:public
sampling_interval	sflowtool.h	/^  uint32_t sampling_interval;  \/* fsCounterSamplingInterval *\/$/;"	m	struct:_INMCounters_sample_hdr	access:public
sampling_rate	sflow.h	/^  uint32_t sampling_rate;        \/* fsPacketSamplingRate *\/$/;"	m	struct:_SFLFlow_sample	access:public
sampling_rate	sflow.h	/^  uint32_t sampling_rate;        \/* fsPacketSamplingRate *\/$/;"	m	struct:_SFLFlow_sample_expanded	access:public
sampling_rate	sflowtool.h	/^  uint32_t sampling_rate;        \/* fsPacketSamplingRate *\/$/;"	m	struct:_INMFlow_sample	access:public
save_fd	sflowtool.c	/^  int save_fd = fcntl(soc, F_GETFL);$/;"	l
saved	sflowtool.c	/^    } h, saved;$/;"	l
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
scratch	sflowtool.c	/^    char scratch[2000];$/;"	l
scratch	sflowtool.c	/^  char scratch[6000];$/;"	l
seg	sflowtool.c	/^  uint32_t seg;$/;"	l
seg_len	sflowtool.c	/^      uint32_t seg_len;$/;"	l
seg_type	sflowtool.c	/^      uint32_t seg_type;$/;"	l
segments	sflowtool.c	/^  uint32_t segments;$/;"	l
sendNetFlowDatagram	sflowtool.c	/^static void sendNetFlowDatagram(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
sendNetFlowDatagram_spoof	sflowtool.c	/^static void sendNetFlowDatagram_spoof(SFSample *sample, NFFlowPkt5 *pkt)$/;"	f	file:	signature:(SFSample *sample, NFFlowPkt5 *pkt)
sendPkt	sflowtool.c	/^  struct mySendPacket sendPkt;$/;"	m	struct:_SFConfig	typeref:struct:_SFConfig::mySendPacket	file:	access:public
sep	sflowtool.c	/^  char *sep = " ,";$/;"	l
seq	sflow.h	/^    uint32_t *seq;$/;"	m	union:_SFLExtended_as_path_segment::__anon5	access:public
seq	sflowtool.h	/^    uint32_t *seq;$/;"	m	union:_INMExtended_as_path_segment::__anon1	access:public
sequence	sflowtool.c	/^      uint32_t sequence = (ptr[0] << 8) + ptr[1];$/;"	l
sequenceNo	sflowtool.c	/^  uint32_t sequenceNo;$/;"	m	struct:_SFSample	file:	access:public
sequence_number	sflow.h	/^  uint32_t sequence_number;       \/* Incremented with each sample datagram$/;"	m	struct:_SFLSample_datagram_hdr	access:public
sequence_number	sflow.h	/^  uint32_t sequence_number;      \/* Incremented with each flow sample$/;"	m	struct:_SFLFlow_sample	access:public
sequence_number	sflow.h	/^  uint32_t sequence_number;      \/* Incremented with each flow sample$/;"	m	struct:_SFLFlow_sample_expanded	access:public
sequence_number	sflow.h	/^  uint32_t sequence_number;    \/* Incremented with each counters sample$/;"	m	struct:_SFLCounters_sample	access:public
sequence_number	sflow.h	/^  uint32_t sequence_number;    \/* Incremented with each counters sample$/;"	m	struct:_SFLCounters_sample_expanded	access:public
sequence_number	sflowtool.h	/^  uint32_t sequence_number;       \/* Incremented with each sample datagram$/;"	m	struct:_INMSample_datagram_hdr	access:public
sequence_number	sflowtool.h	/^  uint32_t sequence_number;      \/* Incremented with each flow sample$/;"	m	struct:_INMFlow_sample	access:public
sequence_number	sflowtool.h	/^  uint32_t sequence_number;    \/* Incremented with each counters sample$/;"	m	struct:_INMCounters_sample_hdr	access:public
set	sflow.h	/^    uint32_t *set;$/;"	m	union:_SFLExtended_as_path_segment::__anon5	access:public
set	sflowtool.h	/^    uint32_t *set;$/;"	m	union:_INMExtended_as_path_segment::__anon1	access:public
sfCLF	sflowtool.c	/^static SFCommonLogFormat sfCLF;$/;"	v	file:
sfConfig	sflowtool.c	/^static SFConfig sfConfig;$/;"	v	file:
sf_log	sflowtool.c	/^void sf_log(char *fmt, ...)$/;"	f	signature:(char *fmt, ...)
sf_log_next32	sflowtool.c	/^static uint32_t sf_log_next32(SFSample *sample, char *fieldName) {$/;"	f	file:	signature:(SFSample *sample, char *fieldName)
sf_log_next64	sflowtool.c	/^static uint64_t sf_log_next64(SFSample *sample, char *fieldName) {$/;"	f	file:	signature:(SFSample *sample, char *fieldName)
sf_log_nextFloat	sflowtool.c	/^static float sf_log_nextFloat(SFSample *sample, char *fieldName) {$/;"	f	file:	signature:(SFSample *sample, char *fieldName)
sf_log_percentage	sflowtool.c	/^void sf_log_percentage(SFSample *sample, char *fieldName)$/;"	f	signature:(SFSample *sample, char *fieldName)
sflowtool$(EXEEXT)	Makefile	/^sflowtool$(EXEEXT): $(sflowtool_OBJECTS) $(sflowtool_DEPENDENCIES) $/;"	t
sflowtool_LDADD	Makefile	/^sflowtool_LDADD = $(LDADD)$/;"	m
sflowtool_OBJECTS	Makefile	/^sflowtool_OBJECTS = $(am_sflowtool_OBJECTS)$/;"	m
sflowtool_SOURCES	Makefile	/^sflowtool_SOURCES = sflow.h sflowtool.h sflowtool.c$/;"	m
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sigfigs	sflowtool.c	/^  uint32_t sigfigs;	\/* accuracy of timestamps *\/$/;"	m	struct:pcap_file_header	file:	access:public
skip	sflowtool.c	/^      uint32_t optionLen, skip;$/;"	l
skipBytes	sflowtool.c	/^  int skipBytes = 0;$/;"	l
skipBytes	sflowtool.c	/^static void skipBytes(SFSample *sample, uint32_t skip) {$/;"	f	file:	signature:(SFSample *sample, uint32_t skip)
skipTLVRecord	sflowtool.c	/^static void skipTLVRecord(SFSample *sample, uint32_t tag, uint32_t len, char *description) {$/;"	f	file:	signature:(SFSample *sample, uint32_t tag, uint32_t len, char *description)
snaplen	sflowtool.c	/^  uint32_t snaplen;	\/* max length saved portion of each pkt *\/$/;"	m	struct:pcap_file_header	file:	access:public
soc	sflowtool.c	/^  int soc;$/;"	l
soc4	sflowtool.c	/^  int32_t soc4=-1,soc6=-1;$/;"	l
soc6	sflowtool.c	/^  int32_t soc4=-1,soc6=-1;$/;"	l
sock	sflowtool.c	/^  int sock;$/;"	m	struct:_SFForwardingTarget	file:	access:public
socket4	sflow.h	/^  SFLExtended_socket_ipv4 socket4;$/;"	m	union:_SFLFlow_type	access:public
socket6	sflow.h	/^  SFLExtended_socket_ipv6 socket6;$/;"	m	union:_SFLFlow_type	access:public
sourceIP	sflowtool.c	/^  SFLAddress sourceIP;$/;"	m	struct:_SFSample	file:	access:public
source_id	sflow.h	/^  uint32_t source_id;            \/* fsSourceId *\/$/;"	m	struct:_SFLFlow_sample	access:public
source_id	sflow.h	/^  uint32_t source_id;          \/* fsSourceId *\/$/;"	m	struct:_SFLCounters_sample	access:public
source_id	sflowtool.h	/^  uint32_t source_id;            \/* fsSourceId *\/$/;"	m	struct:_INMFlow_sample	access:public
source_id	sflowtool.h	/^  uint32_t source_id;          \/* fsSourceId *\/$/;"	m	struct:_INMCounters_sample_hdr	access:public
speed	sflow.h	/^  uint64_t speed;$/;"	m	struct:_SFLExtended_wifi_rx	access:public
speed	sflow.h	/^  uint64_t speed;$/;"	m	struct:_SFLExtended_wifi_tx	access:public
spoofSource	sflowtool.c	/^  int spoofSource;$/;"	m	struct:_SFConfig	file:	access:public
src	sflow.h	/^  SFLAddress src;    \/* Source address *\/$/;"	m	struct:_SFLExtended_nat	access:public
src	sflowtool.c	/^      uint32_t src;$/;"	m	struct:udpmagichdr	file:	access:public
srcAS	sflowtool.c	/^  uint16_t srcAS;$/;"	m	struct:_NFFlow5	file:	access:public
srcIP	sflowtool.c	/^  char agentIP[51], srcIP[51], dstIP[51];$/;"	l
srcIP	sflowtool.c	/^  uint32_t srcIP;$/;"	m	struct:_NFFlow5	file:	access:public
srcMAC	sflowtool.c	/^      u_char *srcMAC = NULL;$/;"	l
srcMask	sflowtool.c	/^  uint32_t srcMask;$/;"	m	struct:_SFSample	file:	access:public
srcMask	sflowtool.c	/^  uint8_t srcMask;  \/* No. bits *\/$/;"	m	struct:_NFFlow5	file:	access:public
srcPort	sflowtool.c	/^  uint16_t srcPort;$/;"	m	struct:_NFFlow5	file:	access:public
src_as	sflow.h	/^  uint32_t src_as;                         \/* AS number of source (origin) *\/$/;"	m	struct:_SFLExtended_gateway	access:public
src_as	sflowtool.c	/^  uint32_t src_as;$/;"	m	struct:_SFSample	file:	access:public
src_as	sflowtool.h	/^  uint32_t src_as;                         \/* AS number of source (origin) *\/$/;"	m	struct:_INMExtended_gateway_v2	access:public
src_as	sflowtool.h	/^  uint32_t src_as;                         \/* AS number of source (origin) *\/$/;"	m	struct:_INMExtended_gateway_v4	access:public
src_charset	sflow.h	/^  uint32_t src_charset;  \/* MIBEnum value of character set used to encode a string - See RFC 2978$/;"	m	struct:_SFLExtended_user	access:public
src_ip	sflow.h	/^  SFLIPv4 src_ip; \/* Source IP Address *\/$/;"	m	struct:_SFLSampled_ipv4	access:public
src_ip	sflow.h	/^  SFLIPv6 src_ip; \/* Source IP Address *\/$/;"	m	struct:_SFLSampled_ipv6	access:public
src_ip	sflowtool.h	/^  SFLIPv4 src_ip; \/* Source IP Address *\/$/;"	m	struct:_INMSampled_ipv4	access:public
src_ip	sflowtool.h	/^  SFLIPv6 src_ip; \/* Source IP Address *\/$/;"	m	struct:_INMSampled_ipv6	access:public
src_mac	sflow.h	/^  uint8_t src_mac[8];    \/* 6 bytes + 2 pad *\/$/;"	m	struct:_SFLSampled_ethernet	access:public
src_mask	sflow.h	/^  uint32_t src_mask;               \/* Source address prefix mask bits *\/$/;"	m	struct:_SFLExtended_router	access:public
src_mask	sflowtool.h	/^  uint32_t src_mask;               \/* Source address prefix mask bits *\/$/;"	m	struct:_INMExtended_router	access:public
src_peer_as	sflow.h	/^  uint32_t src_peer_as;                    \/* AS number of source peer *\/$/;"	m	struct:_SFLExtended_gateway	access:public
src_peer_as	sflowtool.c	/^  uint32_t src_peer_as;$/;"	m	struct:_SFSample	file:	access:public
src_peer_as	sflowtool.h	/^  uint32_t src_peer_as;                    \/* AS number of source peer *\/$/;"	m	struct:_INMExtended_gateway_v2	access:public
src_peer_as	sflowtool.h	/^  uint32_t src_peer_as;                    \/* AS number of source peer *\/$/;"	m	struct:_INMExtended_gateway_v4	access:public
src_port	sflow.h	/^  uint32_t src_port;     \/* TCP\/UDP source port number or equivalent *\/$/;"	m	struct:_SFLSampled_ipv6	access:public
src_port	sflow.h	/^  uint32_t src_port;    \/* TCP\/UDP source port number or equivalent *\/$/;"	m	struct:_SFLSampled_ipv4	access:public
src_port	sflowtool.h	/^  uint32_t src_port;     \/* TCP\/UDP source port number or equivalent *\/$/;"	m	struct:_INMSampled_ipv6	access:public
src_port	sflowtool.h	/^  uint32_t src_port;    \/* TCP\/UDP source port number or equivalent *\/$/;"	m	struct:_INMSampled_ipv4	access:public
src_priority	sflow.h	/^  uint32_t src_priority;   \/* The 802.1p priority *\/$/;"	m	struct:_SFLExtended_switch	access:public
src_priority	sflowtool.h	/^  uint32_t src_priority;   \/* The 802.1p priority *\/$/;"	m	struct:_INMExtended_switch	access:public
src_user	sflow.h	/^  SFLString src_user;$/;"	m	struct:_SFLExtended_user	access:public
src_user	sflowtool.c	/^  char src_user[SA_MAX_EXTENDED_USER_LEN+1];$/;"	m	struct:_SFSample	file:	access:public
src_user	sflowtool.h	/^  char *src_user;$/;"	m	struct:_INMExtended_user	access:public
src_user_charset	sflowtool.c	/^  uint32_t src_user_charset;$/;"	m	struct:_SFSample	file:	access:public
src_user_len	sflowtool.c	/^  uint32_t src_user_len;$/;"	m	struct:_SFSample	file:	access:public
src_user_len	sflowtool.h	/^  uint32_t src_user_len;$/;"	m	struct:_INMExtended_user	access:public
src_vlan	sflow.h	/^  uint32_t src_vlan;       \/* The 802.1Q VLAN id of incomming frame *\/$/;"	m	struct:_SFLExtended_switch	access:public
src_vlan	sflowtool.h	/^  uint32_t src_vlan;       \/* The 802.1Q VLAN id of incomming frame *\/$/;"	m	struct:_INMExtended_switch	access:public
srcdir	Makefile	/^srcdir = .$/;"	m
ssid	sflow.h	/^  char *ssid;              \/* SSID string *\/$/;"	m	struct:_SFLExtended_wifi_tx	access:public
ssid	sflow.h	/^  char *ssid;$/;"	m	struct:_SFLExtended_wifi_rx	access:public
ssid	sflowtool.c	/^  char ssid[SFL_MAX_SSID_LEN+1];$/;"	l
ssid_len	sflow.h	/^  uint32_t ssid_len;$/;"	m	struct:_SFLExtended_wifi_rx	access:public
ssid_len	sflow.h	/^  uint32_t ssid_len;$/;"	m	struct:_SFLExtended_wifi_tx	access:public
stack	sflow.h	/^  SFLVlanStack stack;  \/* List of stripped 802.1Q TPID\/TCI layers. Each $/;"	m	struct:_SFLExtended_vlan_tunnel	access:public
stack	sflow.h	/^  uint32_t *stack; \/* first entry is top of stack - see RFC 3032 for encoding *\/$/;"	m	struct:_SFLLabelStack	access:public
start	sflowtool.c	/^      u_char *start;$/;"	l
start	sflowtool.c	/^  u_char *start = (u_char *)sample->header;$/;"	l
state	sflow.h	/^   uint32_t state;       \/* virtDomainState *\/$/;"	m	struct:_SFLHost_vrt_cpu_counters	access:public
statsSamplingInterval	sflowtool.c	/^  uint32_t statsSamplingInterval;$/;"	m	struct:_SFSample	file:	access:public
status	sflow.h	/^  EnumSFLAPPStatus status;     \/* status code *\/$/;"	m	struct:__anon12	access:public
status	sflow.h	/^  uint32_t status;         \/* HTTP status code *\/$/;"	m	struct:_SFLSampled_http	access:public
status	sflow.h	/^  uint32_t status;      \/* SFLMemcache_operation_status *\/$/;"	m	struct:_SFLSampled_memcache	access:public
status	sflowtool.c	/^  char status[SFLAPP_MAX_STATUS_LEN];$/;"	l
status	sflowtool.c	/^  uint32_t status;$/;"	l
status_1XX_count	sflow.h	/^  uint32_t status_1XX_count;$/;"	m	struct:_SFLHTTP_counters	access:public
status_2XX_count	sflow.h	/^  uint32_t status_2XX_count;$/;"	m	struct:_SFLHTTP_counters	access:public
status_3XX_count	sflow.h	/^  uint32_t status_3XX_count;$/;"	m	struct:_SFLHTTP_counters	access:public
status_4XX_count	sflow.h	/^  uint32_t status_4XX_count;$/;"	m	struct:_SFLHTTP_counters	access:public
status_5XX_count	sflow.h	/^  uint32_t status_5XX_count;$/;"	m	struct:_SFLHTTP_counters	access:public
status_OK	sflow.h	/^  uint32_t status_OK;$/;"	m	struct:_SFLAPP_counters	access:public
status_descr	sflow.h	/^  SFLString status_descr;      \/* additional text describing status (e.g. "unknown client") *\/$/;"	m	struct:__anon12	access:public
status_other_count	sflow.h	/^  uint32_t status_other_count;$/;"	m	struct:_SFLHTTP_counters	access:public
str	sflow.h	/^  char *str;$/;"	m	struct:_SFLString	access:public
stripped	sflow.h	/^  uint32_t stripped;                   \/* header\/trailer bytes stripped by sender *\/$/;"	m	struct:_SFLSampled_header	access:public
stripped	sflowtool.c	/^  uint32_t stripped;$/;"	m	struct:_SFSample	file:	access:public
subType	sflowtool.c	/^  uint32_t subType = (fc >> 4) & 15;$/;"	l
sub_agent_id	sflow.h	/^  uint32_t sub_agent_id;          \/* Used to distinguishing between datagram$/;"	m	struct:_SFLSample_datagram_hdr	access:public
subdir	Makefile	/^subdir = src$/;"	m
sum	sflowtool.c	/^  int sum = 0;$/;"	l
sw	sflow.h	/^  SFLExtended_switch sw;$/;"	m	union:_SFLFlow_type	access:public
swap_free	sflow.h	/^  uint64_t swap_free;    \/* swap free bytes *\/$/;"	m	struct:_SFLHost_mem_counters	access:public
swap_in	sflow.h	/^  uint32_t swap_in;      \/* swap in count *\/$/;"	m	struct:_SFLHost_mem_counters	access:public
swap_out	sflow.h	/^  uint32_t swap_out;     \/* swap out count *\/$/;"	m	struct:_SFLHost_mem_counters	access:public
swap_total	sflow.h	/^  uint64_t swap_total;   \/* swap total bytes *\/$/;"	m	struct:_SFLHost_mem_counters	access:public
switchDevice	sflowtool.h	/^  INMExtended_switch switchDevice;$/;"	m	struct:_INMFlow_sample	access:public
sysUpTime	sflowtool.c	/^  uint32_t sysUpTime;$/;"	m	struct:_NFFlowHdr5	file:	access:public
sysUpTime	sflowtool.c	/^  uint32_t sysUpTime;$/;"	m	struct:_SFSample	file:	access:public
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
tag	sflow.h	/^  uint32_t tag;  \/* SFLFlow_type_tag *\/$/;"	m	struct:_SFLFlow_sample_element	access:public
tag	sflow.h	/^  uint32_t tag; \/* SFLCounters_type_tag *\/$/;"	m	struct:_SFLCounters_sample_element	access:public
tag	sflowtool.c	/^      uint32_t tag, length;$/;"	l
tags	Makefile	/^tags: TAGS$/;"	t
target_alias	Makefile	/^target_alias = $/;"	m
tcp	sflowtool.c	/^      struct mytcphdr tcp;$/;"	l
tcpFlags	sflowtool.c	/^  uint8_t tcpFlags;$/;"	m	struct:_NFFlow5	file:	access:public
tcp_flags	sflow.h	/^  uint32_t tcp_flags;    \/* TCP flags *\/$/;"	m	struct:_SFLSampled_ipv6	access:public
tcp_flags	sflow.h	/^  uint32_t tcp_flags;   \/* TCP flags *\/$/;"	m	struct:_SFLSampled_ipv4	access:public
tcp_flags	sflowtool.h	/^  uint32_t tcp_flags;    \/* TCP flags *\/$/;"	m	struct:_INMSampled_ipv6	access:public
tcp_flags	sflowtool.h	/^  uint32_t tcp_flags;   \/* TCP flags *\/$/;"	m	struct:_INMSampled_ipv4	access:public
tcpdumpHdrPad	sflowtool.c	/^  uint32_t tcpdumpHdrPad;$/;"	m	struct:_SFConfig	file:	access:public
testVlan	sflowtool.c	/^static void testVlan(uint32_t num) {$/;"	f	file:	signature:(uint32_t num)
tgt	sflowtool.c	/^    SFForwardingTarget *tgt = sfConfig.forwardingTargets;$/;"	l
tgt	sflowtool.c	/^  SFForwardingTarget *tgt = (SFForwardingTarget *)calloc(1, sizeof(SFForwardingTarget));$/;"	l
th_ack	sflowtool.c	/^    uint32_t th_ack;		\/* acknowledgement number *\/$/;"	m	struct:mytcphdr	file:	access:public
th_dport	sflowtool.c	/^    uint16_t th_dport;		\/* destination port *\/$/;"	m	struct:mytcphdr	file:	access:public
th_flags	sflowtool.c	/^    uint8_t th_flags;$/;"	m	struct:mytcphdr	file:	access:public
th_off_and_unused	sflowtool.c	/^    uint8_t th_off_and_unused;$/;"	m	struct:mytcphdr	file:	access:public
th_seq	sflowtool.c	/^    uint32_t th_seq;		\/* sequence number *\/$/;"	m	struct:mytcphdr	file:	access:public
th_sport	sflowtool.c	/^    uint16_t th_sport;		\/* source port *\/$/;"	m	struct:mytcphdr	file:	access:public
th_sum	sflowtool.c	/^    uint16_t th_sum;		\/* checksum *\/$/;"	m	struct:mytcphdr	file:	access:public
th_urp	sflowtool.c	/^    uint16_t th_urp;		\/* urgent pointer *\/$/;"	m	struct:mytcphdr	file:	access:public
th_win	sflowtool.c	/^    uint16_t th_win;		\/* window *\/$/;"	m	struct:mytcphdr	file:	access:public
thiszone	sflowtool.c	/^  uint32_t thiszone;	\/* gmt to local correction *\/$/;"	m	struct:pcap_file_header	file:	access:public
thread_daemon	sflow.h	/^  uint32_t thread_daemon;$/;"	m	struct:_SFLJMX_counters	access:public
thread_live	sflow.h	/^  uint32_t thread_live;$/;"	m	struct:_SFLJMX_counters	access:public
thread_started	sflow.h	/^  uint32_t thread_started;$/;"	m	struct:_SFLJMX_counters	access:public
threads	sflow.h	/^   uint32_t threads;$/;"	m	struct:_SFLMemcache_counters	access:public
timeout	sflowtool.c	/^      struct timeval timeout;$/;"	l
tmpHi	sflowtool.c	/^  uint64_t tmpLo, tmpHi;$/;"	l
tmpLo	sflowtool.c	/^  uint64_t tmpLo, tmpHi;$/;"	l
to	sflowtool.c	/^      struct sockaddr_in *to = (struct sockaddr_in *)&dest;$/;"	l
toDS	sflowtool.c	/^  uint32_t toDS = (fc >> 8) & 1;$/;"	l
tokenring	sflow.h	/^  SFLTokenring_counters tokenring;$/;"	m	union:_SFLCounters_type	access:public
tokenring	sflowtool.h	/^  INMTokenring_counters tokenring;$/;"	m	union:_INMCounters_type	access:public
tokenring	sflowtool.h	/^  INMTokenring_specific_counters tokenring;$/;"	m	struct:_INMTokenring_counters	access:public
top_build_prefix	Makefile	/^top_build_prefix = ..\/$/;"	m
top_builddir	Makefile	/^top_builddir = ..$/;"	m
top_srcdir	Makefile	/^top_srcdir = ..$/;"	m
tos	sflow.h	/^  uint32_t tos;         \/* IP type of service *\/$/;"	m	struct:_SFLSampled_ipv4	access:public
tos	sflowtool.c	/^    uint8_t tos;$/;"	m	struct:myiphdr	file:	access:public
tos	sflowtool.h	/^  uint32_t tos;          \/* IP type of service *\/$/;"	m	struct:_INMSampled_ipv6	access:public
tos	sflowtool.h	/^  uint32_t tos;         \/* IP type of service *\/$/;"	m	struct:_INMSampled_ipv4	access:public
tot_len	sflowtool.c	/^    uint16_t tot_len;$/;"	m	struct:myiphdr	file:	access:public
total_connections	sflow.h	/^   uint32_t total_connections; \/* Total number of connections opened since$/;"	m	struct:_SFLMemcache_counters	access:public
total_items	sflow.h	/^   uint32_t total_items;$/;"	m	struct:_SFLMemcache_counters	access:public
total_memory	sflow.h	/^   uint64_t total_memory;  \/* total memory (in bytes) *\/$/;"	m	struct:_SFLProcessor_counters	access:public
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
transmissions	sflow.h	/^  uint32_t transmissions;   \/* number of transmissions for sampled$/;"	m	struct:_SFLExtended_wifi_tx	access:public
ts_sec	sflowtool.c	/^  uint32_t ts_sec;	\/* time stamp - used to be struct timeval, but time_t can be 64 bits now *\/$/;"	m	struct:pcap_pkthdr	file:	access:public
ts_usec	sflowtool.c	/^  uint32_t ts_usec;$/;"	m	struct:pcap_pkthdr	file:	access:public
ttl	sflowtool.c	/^    uint8_t ttl;$/;"	m	struct:myiphdr	file:	access:public
tunnel_cos	sflow.h	/^   uint32_t tunnel_cos;       \/* Tunnel COS value *\/$/;"	m	struct:_SFLExtended_mpls_tunnel	access:public
tunnel_cos	sflowtool.c	/^  uint32_t tunnel_id, tunnel_cos;$/;"	l
tunnel_id	sflow.h	/^   uint32_t tunnel_id;        \/* Tunnel ID *\/$/;"	m	struct:_SFLExtended_mpls_tunnel	access:public
tunnel_id	sflowtool.c	/^  uint32_t tunnel_id, tunnel_cos;$/;"	l
tunnel_lsp_name	sflow.h	/^   SFLString tunnel_lsp_name;  \/* Tunnel name *\/$/;"	m	struct:_SFLExtended_mpls_tunnel	access:public
tunnel_name	sflowtool.c	/^  char tunnel_name[SA_MAX_TUNNELNAME_LEN+1];$/;"	l
txMAC	sflowtool.c	/^      u_char *txMAC = macAddr2;$/;"	l
type	sflow.h	/^  uint32_t type;           \/* enum SFLAddress_type *\/$/;"	m	struct:_SFLAddress	access:public
type	sflow.h	/^  uint32_t type;   \/* enum SFLExtended_as_path_segment_type *\/$/;"	m	struct:_SFLExtended_as_path_segment	access:public
type	sflowtool.c	/^  uint8_t type;		\/* message type *\/$/;"	m	struct:myicmphdr	file:	access:public
type	sflowtool.h	/^  uint32_t type;           \/* enum INMAddress_type *\/$/;"	m	struct:_INMAddress	access:public
type	sflowtool.h	/^  uint32_t type;   \/* enum INMExtended_as_path_segment_type *\/$/;"	m	struct:_INMExtended_as_path_segment	access:public
type_len	sflowtool.c	/^  uint16_t type_len;$/;"	l
uS	sflow.h	/^  uint32_t uS;             \/* duration of the operation (microseconds) *\/$/;"	m	struct:_SFLSampled_http	access:public
ucastPkts	sflow.h	/^  uint32_t ucastPkts;$/;"	m	struct:_SFLVlan_counters	access:public
ucastPkts	sflowtool.h	/^  uint32_t ucastPkts;$/;"	m	struct:_INMVlan_counters	access:public
udp	sflowtool.c	/^      struct myudphdr udp;$/;"	l
udp	sflowtool.c	/^  struct myudphdr udp;$/;"	m	struct:mySendPacket	typeref:struct:mySendPacket::myudphdr	file:	access:public
udp_pduLen	sflowtool.c	/^  uint32_t udp_pduLen;$/;"	m	struct:_SFSample	file:	access:public
udpmagichdr	sflowtool.c	/^    struct udpmagichdr {$/;"	s	file:
udpmagichdr::dst	sflowtool.c	/^      uint32_t dst;$/;"	m	struct:udpmagichdr	file:	access:public
udpmagichdr::len	sflowtool.c	/^      u_short len;$/;"	m	struct:udpmagichdr	file:	access:public
udpmagichdr::proto	sflowtool.c	/^      u_char proto;$/;"	m	struct:udpmagichdr	file:	access:public
udpmagichdr::src	sflowtool.c	/^      uint32_t src;$/;"	m	struct:udpmagichdr	file:	access:public
udpmagichdr::zero	sflowtool.c	/^      u_char zero;$/;"	m	struct:udpmagichdr	file:	access:public
uh_dport	sflowtool.c	/^  uint16_t uh_dport;           \/* destination port *\/$/;"	m	struct:myudphdr	file:	access:public
uh_sport	sflowtool.c	/^  uint16_t uh_sport;           \/* source port *\/$/;"	m	struct:myudphdr	file:	access:public
uh_sum	sflowtool.c	/^  uint16_t uh_sum;             \/* udp checksum *\/$/;"	m	struct:myudphdr	file:	access:public
uh_ulen	sflowtool.c	/^  uint16_t uh_ulen;            \/* udp length *\/$/;"	m	struct:myudphdr	file:	access:public
uninstall	Makefile	/^uninstall: uninstall-am$/;"	t
uninstall-am	Makefile	/^uninstall-am: uninstall-binPROGRAMS$/;"	t
uninstall-binPROGRAMS	Makefile	/^uninstall-binPROGRAMS:$/;"	t
unixNanoSeconds	sflowtool.c	/^  uint32_t unixNanoSeconds;$/;"	m	struct:_NFFlowHdr5	file:	access:public
unixSeconds	sflowtool.c	/^  uint32_t unixSeconds;$/;"	m	struct:_NFFlowHdr5	file:	access:public
uptime	sflow.h	/^   uint32_t uptime;     \/* Number of seconds this server has been running *\/$/;"	m	struct:_SFLMemcache_counters	access:public
uptime	sflow.h	/^  uint32_t uptime;                \/* Current time (in milliseconds since device$/;"	m	struct:_SFLSample_datagram_hdr	access:public
uptime	sflow.h	/^  uint32_t uptime;     \/* seconds since last reboot *\/$/;"	m	struct:_SFLHost_cpu_counters	access:public
uptime	sflowtool.h	/^  uint32_t uptime;                \/* Current time (in milliseconds since device$/;"	m	struct:_INMSample_datagram_hdr	access:public
uri	sflow.h	/^  SFLString uri;           \/* URI exactly as it came from the client (up to 255 bytes) *\/$/;"	m	struct:_SFLSampled_http	access:public
uri	sflowtool.c	/^  char uri[SFL_MAX_HTTP_URI+1];$/;"	l
url	sflow.h	/^  SFLExtended_url url;$/;"	m	union:_SFLFlow_type	access:public
url	sflow.h	/^  SFLString url;         \/* URL associated with the packet flow.$/;"	m	struct:_SFLExtended_url	access:public
url	sflowtool.c	/^  char url[SA_MAX_EXTENDED_URL_LEN+1];$/;"	m	struct:_SFSample	file:	access:public
url	sflowtool.h	/^  INMExtended_url url;$/;"	m	struct:_INMFlow_sample	access:public
url	sflowtool.h	/^  char *url;$/;"	m	struct:_INMExtended_url	access:public
url_direction	sflowtool.c	/^  uint32_t url_direction;$/;"	m	struct:_SFSample	file:	access:public
url_len	sflowtool.c	/^  uint32_t url_len;$/;"	m	struct:_SFSample	file:	access:public
url_len	sflowtool.h	/^  uint32_t url_len;$/;"	m	struct:_INMExtended_url	access:public
user	sflow.h	/^  SFLExtended_user user;$/;"	m	union:_SFLFlow_type	access:public
user	sflowtool.h	/^  INMExtended_user user;$/;"	m	struct:_INMFlow_sample	access:public
useragent	sflow.h	/^  SFLString useragent;     \/* User-Agent value from request header (<= 128 bytes)*\/$/;"	m	struct:_SFLSampled_http	access:public
useragent	sflowtool.c	/^  char useragent[SFL_MAX_HTTP_USERAGENT+1];$/;"	l
uuid	sflow.h	/^  u_char uuid[16];$/;"	m	struct:_SFLHostId	access:public
uuid	sflowtool.c	/^  u_char *uuid;$/;"	l
v2	sflowtool.h	/^    INMExtended_gateway_v2 v2;  \/* make the version explicit so that there is *\/$/;"	m	union:_INMFlow_sample::__anon2	access:public
v4	sflowtool.h	/^    INMExtended_gateway_v4 v4;  \/* less danger of mistakes when upgrading code *\/$/;"	m	union:_INMFlow_sample::__anon2	access:public
v4src	sflowtool.c	/^      SFLIPv4 v4src;$/;"	l
val	sflowtool.c	/^  float val = getFloat(sample);$/;"	l
val	sflowtool.c	/^  uint32_t val = getData32(sample);$/;"	l
val64	sflowtool.c	/^  uint64_t val64 = getData64(sample);$/;"	l
valid	sflowtool.c	/^  int valid;$/;"	m	struct:_SFCommonLogFormat	file:	access:public
value_bytes	sflow.h	/^  uint32_t value_bytes;$/;"	m	struct:_SFLSampled_memcache	access:public
vc_cos	sflowtool.c	/^  uint32_t vll_vc_id, vc_cos;$/;"	l
vc_instance_name	sflow.h	/^   SFLString vc_instance_name; \/* VC instance name *\/$/;"	m	struct:_SFLExtended_mpls_vc	access:public
vc_label_cos	sflow.h	/^   uint32_t vc_label_cos;     \/* VC Label COS value *\/$/;"	m	struct:_SFLExtended_mpls_vc	access:public
vc_name	sflowtool.c	/^  char vc_name[SA_MAX_VCNAME_LEN+1];$/;"	l
vendor	sflowtool.c	/^  char vendor[SFLJVM_MAX_VENDOR_LEN];$/;"	l
version	sflow.h	/^  SFL_IEEE80211_version version;    \/* version *\/$/;"	m	struct:_SFLExtended_wifi_tx	access:public
version	sflow.h	/^  SFL_IEEE80211_version version;  \/* version *\/$/;"	m	struct:_SFLExtended_wifi_rx	access:public
version	sflowtool.c	/^  char version[SFLJVM_MAX_VERSION_LEN];$/;"	l
version	sflowtool.c	/^  uint16_t version;$/;"	m	struct:_NFFlowHdr5	file:	access:public
version_and_headerLen	sflowtool.c	/^    uint8_t version_and_headerLen;$/;"	m	struct:myiphdr	file:	access:public
version_major	sflowtool.c	/^  uint16_t version_major;$/;"	m	struct:pcap_file_header	file:	access:public
version_minor	sflowtool.c	/^  uint16_t version_minor;$/;"	m	struct:pcap_file_header	file:	access:public
vg	sflow.h	/^  SFLVg_counters vg;$/;"	m	union:_SFLCounters_type	access:public
vg	sflowtool.h	/^  INMVg_counters vg;$/;"	m	union:_INMCounters_type	access:public
vg	sflowtool.h	/^  INMVg_specific_counters vg;$/;"	m	struct:_INMVg_counters	access:public
vlan	sflow.h	/^  SFLVlan_counters vlan;$/;"	m	union:_SFLCounters_type	access:public
vlan	sflowtool.c	/^    uint32_t vlan = vlanData & 0x0fff;$/;"	l
vlan	sflowtool.h	/^  INMVlan_counters vlan;$/;"	m	union:_INMCounters_type	access:public
vlanData	sflowtool.c	/^    uint32_t vlanData = (ptr[0] << 8) + ptr[1];$/;"	l
vlanFilter	sflowtool.c	/^  u_char vlanFilter[FILTER_MAX_VLAN + 1];$/;"	m	struct:_SFConfig	file:	access:public
vlanFilterReject	sflowtool.c	/^  int vlanFilterReject;$/;"	m	struct:_SFSample	file:	access:public
vlan_id	sflow.h	/^  uint32_t vlan_id;$/;"	m	struct:_SFLVlan_counters	access:public
vlan_id	sflowtool.h	/^  uint32_t vlan_id;$/;"	m	struct:_INMVlan_counters	access:public
vlan_tunnel	sflow.h	/^  SFLExtended_vlan_tunnel vlan_tunnel;$/;"	m	union:_SFLFlow_type	access:public
vll_vc_id	sflow.h	/^   uint32_t vll_vc_id;        \/* VLL\/VC instance ID *\/$/;"	m	struct:_SFLExtended_mpls_vc	access:public
vll_vc_id	sflowtool.c	/^  uint32_t vll_vc_id, vc_cos;$/;"	l
vm_name	sflow.h	/^  SFLString vm_name;$/;"	m	struct:_SFLJVM_ID	access:public
vm_name	sflowtool.c	/^  char vm_name[SFLJVM_MAX_VMNAME_LEN];$/;"	l
vm_vendor	sflow.h	/^  SFLString vm_vendor;$/;"	m	struct:_SFLJVM_ID	access:public
vm_version	sflow.h	/^  SFLString vm_version;$/;"	m	struct:_SFLJVM_ID	access:public
w	sflowtool.c	/^  register char c, *r = in, *w = out;$/;"	l
w	sflowtool.c	/^  u_short *w = addr;$/;"	l
wan	sflowtool.h	/^  INMWan_counters wan;$/;"	m	union:_INMCounters_type	access:public
wifi	sflow.h	/^  SFLWifi_counters wifi;$/;"	m	union:_SFLCounters_type	access:public
wifi_payload	sflow.h	/^  SFLExtended_wifi_payload wifi_payload;$/;"	m	union:_SFLFlow_type	access:public
wifi_rx	sflow.h	/^  SFLExtended_wifi_rx wifi_rx;$/;"	m	union:_SFLFlow_type	access:public
wifi_tx	sflow.h	/^  SFLExtended_wifi_tx wifi_tx;$/;"	m	union:_SFLFlow_type	access:public
workers_active	sflow.h	/^  uint32_t workers_active;$/;"	m	struct:__anon14	access:public
workers_idle	sflow.h	/^  uint32_t workers_idle;$/;"	m	struct:__anon14	access:public
workers_max	sflow.h	/^  uint32_t workers_max;$/;"	m	struct:__anon14	access:public
wr_bytes	sflow.h	/^  uint64_t wr_bytes;   \/* number of  written bytes *\/$/;"	m	struct:_SFLHost_vrt_dsk_counters	access:public
wr_req	sflow.h	/^  uint32_t wr_req;     \/* number of write requests *\/$/;"	m	struct:_SFLHost_vrt_dsk_counters	access:public
writeCountersLine	sflowtool.c	/^static void writeCountersLine(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
writeFlowLine	sflowtool.c	/^static void writeFlowLine(SFSample *sample)$/;"	f	file:	signature:(SFSample *sample)
writePcapFile	sflowtool.c	/^  char *writePcapFile;$/;"	m	struct:_SFConfig	file:	access:public
writePcapHeader	sflowtool.c	/^static void writePcapHeader() {$/;"	f	file:
writePcapPacket	sflowtool.c	/^static void writePcapPacket(SFSample *sample) {$/;"	f	file:	signature:(SFSample *sample)
write_time	sflow.h	/^  uint32_t write_time;      \/* write time (ms) *\/$/;"	m	struct:_SFLHost_dsk_counters	access:public
writes	sflow.h	/^  uint32_t writes;          \/* writes completed *\/$/;"	m	struct:_SFLHost_dsk_counters	access:public
wsadata	sflowtool.c	/^  WSADATA wsadata;$/;"	l
x	sflowtool.c	/^    uint32_t x;$/;"	l
xff	sflow.h	/^  SFLString xff;           \/* X-Forwarded-For value from request header (<= 64 bytes)*\/$/;"	m	struct:_SFLSampled_http	access:public
xff	sflowtool.c	/^  char xff[SFL_MAX_HTTP_XFF+1];$/;"	l
zero	sflowtool.c	/^      u_char zero;$/;"	m	struct:udpmagichdr	file:	access:public
zeroPad	sflowtool.c	/^  u_char zeroPad[100];$/;"	m	struct:_SFConfig	file:	access:public
